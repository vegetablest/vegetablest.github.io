<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>VS Code 开发环境配置指南</title>
    <link href="/2025/08/13/vscode%E9%85%8D%E7%BD%AE/"/>
    <url>/2025/08/13/vscode%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>在日常开发中，合理配置 VS Code 能够显著提升开发效率。本文记录了一些实用的 VS Code 配置技巧，帮助你打造更舒适的开发环境。</p><h2 id="代理配置"><a href="#代理配置" class="headerlink" title="代理配置"></a>代理配置</h2><h3 id="基础代理设置"><a href="#基础代理设置" class="headerlink" title="基础代理设置"></a>基础代理设置</h3><p>由于某些扩展插件需要访问外网资源，我们需要为 VS Code 配置网络代理：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;http.proxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://127.0.0.1:7890&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>使用本地代理就不需要配置代理地址，会从本地env环境中寻找代理地址</strong>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;http.useLocalProxyConfiguration&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="端口转发配置"><a href="#端口转发配置" class="headerlink" title="端口转发配置"></a>端口转发配置</h2><p>在进行容器化开发时，VS Code 的自动端口转发功能默认只监听 <code>localhost</code>。为了让局域网内的其他设备也能访问，需要调整监听地址：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;remote.localPortHost&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;allInterfaces&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这样配置后，端口转发将监听 <code>0.0.0.0</code>，允许局域网内的用户通过你的 IP 地址访问转发的端口。</p><h2 id="文件嵌套优化建议"><a href="#文件嵌套优化建议" class="headerlink" title="文件嵌套优化建议"></a>文件嵌套优化建议</h2><p>在项目开发中，相关文件如果能以父子嵌套的方式在资源管理器中展示，将显得结构更加清晰，便于管理和查找。你可以通过如下配置启用文件嵌套功能：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;explorer.fileNesting.enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br></code></pre></td></tr></table></figure><h3 id="推荐嵌套配置示例"><a href="#推荐嵌套配置示例" class="headerlink" title="推荐嵌套配置示例"></a>推荐嵌套配置示例</h3><table><thead><tr><th>父文件</th><th>子文件（自动嵌套显示）</th></tr></thead><tbody><tr><td>Pipfile</td><td>Pipfile.lock</td></tr><tr><td>.env</td><td>.env*（如 .env.local、.env.dev 等）</td></tr><tr><td>pyproject.toml</td><td>uv.lock</td></tr></tbody></table><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ul><li><strong>Pipfile</strong>：将 <code>Pipfile.lock</code> 作为子文件嵌套，可以快速定位依赖及其锁定文件。</li><li><strong>.env</strong>：所有以 <code>.env</code> 开头的环境配置文件均作为 <code>.env</code> 的子项，便于统一管理环境变量。</li><li><strong>pyproject.toml</strong>：将依赖锁定文件 <code>uv.lock</code> 作为子项归类，保持 Python 项目根目录整洁。</li></ul><h2 id="其他实用配置"><a href="#其他实用配置" class="headerlink" title="其他实用配置"></a>其他实用配置</h2><p>TODO: </p><hr><p><strong>相关链接</strong>：</p><ul><li><a href="https://code.visualstudio.com/docs/getstarted/settings">VS Code 官方配置文档</a></li><li><a href="https://code.visualstudio.com/docs/remote/remote-overview">VS Code 远程开发指南</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>IDE</category>
      
      <category>开发环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vscode</tag>
      
      <tag>开发工具</tag>
      
      <tag>配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode-hard</title>
    <link href="/2025/06/04/leetcode-hard/"/>
    <url>/2025/06/04/leetcode-hard/</url>
    
    <content type="html"><![CDATA[<p>TODO: Stay tuned</p>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法-困难</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode-med</title>
    <link href="/2025/06/04/leetcode-med/"/>
    <url>/2025/06/04/leetcode-med/</url>
    
    <content type="html"><![CDATA[<p>TODO: Stay tuned</p>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法-中等</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode-easy</title>
    <link href="/2025/06/04/leetcode-easy/"/>
    <url>/2025/06/04/leetcode-easy/</url>
    
    <content type="html"><![CDATA[<ol><li>两数之和，梦开始的地方<blockquote><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。<br>你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。<br>你可以按任意顺序返回答案。<br>示例 1：</p><p>输入：nums &#x3D; [2,7,11,15], target &#x3D; 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。</p><p>示例 2：</p><p>输入：nums &#x3D; [3,2,4], target &#x3D; 6<br>输出：[1,2]</p><p>示例 3：</p><p>输入：nums &#x3D; [3,3], target &#x3D; 6<br>输出：[0,1]</p><p>提示：</p><p>2 &lt;&#x3D; nums.length &lt;&#x3D; 104<br>-109 &lt;&#x3D; nums[i] &lt;&#x3D; 109<br>-109 &lt;&#x3D; target &lt;&#x3D; 109<br>只会存在一个有效答案</p><p>进阶：你可以想出一个时间复杂度小于 O(n2) 的算法吗？</p></blockquote>暴力枚举，当我们使用遍历整个数组的方式寻找<code>target - x</code>时，需要注意到每一个位于 x 之前的元素都已经和 x 匹配过，因此不需要再进行匹配。而每一个元素不能被使用两次，所以我们只需要在 x 后面的元素中寻找 <code>target - x</code>。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-comment"># 外层循环控制每一个元素的遍历</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-comment"># 内层循环控制i之后的元素变量，i之前的已经遍历过了</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, n):<br>                <span class="hljs-keyword">if</span> nums[i] + nums[j] == target:<br>                    <span class="hljs-keyword">return</span> [i, j]<br>        <br>        <span class="hljs-keyword">return</span> []<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; n; ++j) &#123;<br>                <span class="hljs-keyword">if</span> (nums[i] + nums[j] == target) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;i, j&#125;;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们创建一个哈希表，对于每一个 x，我们首先查询哈希表中是否存在 target - x，然后将 x 插入到哈希表中，即可保证不会让 x 和自己匹配。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        point: <span class="hljs-built_in">dict</span>[<span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>] = &#123;&#125;<br>        <span class="hljs-keyword">for</span> index, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums):<br>            <span class="hljs-keyword">if</span> (target - value) <span class="hljs-keyword">in</span> point:<br>                <span class="hljs-keyword">return</span> [index, point[target - value]]<br>            point[value] = index<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>HashMap&lt;Integer, Integer&gt; point = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br><span class="hljs-keyword">if</span> (point.containsKey(target - nums[i])) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;point.get(target - nums[i]), i&#125;;<br>&#125;<br>point.put(nums[i], i);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>回文数<blockquote><p>给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。</p><p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><p>例如，121 是回文，而 123 不是。</p><p>示例 1：</p><p>输入：x &#x3D; 121<br>输出：true<br>示例 2：</p><p>输入：x &#x3D; -121<br>输出：false<br>解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是&gt;一个回文数。<br>示例 3：</p><p>输入：x &#x3D; 10<br>输出：false<br>解释：从右向左读, 为 01 。因此它不是一个回文数。</p><p>提示：</p><p>-231 &lt;&#x3D; x &lt;&#x3D; 231 - 1</p><p>进阶：你能不将整数转为字符串来解决这个问题吗？</p></blockquote>转化为字符串的时候进行题解就很方便，这也是我为什么选择使用python进行算法解题的原因，这样真的很简单</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isPalindrome</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-comment"># 翻转字符串判断是否相等</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(x) == <span class="hljs-built_in">str</span>(x)[::-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPalindrome</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> String.valueOf(x);<br>        <span class="hljs-comment">// 翻转字符串判断是否相等</span><br><span class="hljs-type">String</span> <span class="hljs-variable">reverse</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(string).reverse().toString();<br><span class="hljs-keyword">return</span> string.equals(reverse);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>映入脑海的第一个想法是将数字转换为字符串，并检查字符串是否为回文。但是，这需要额外的非常量空间来创建问题描述中所不允许的字符串。<br>第二个想法是将数字本身反转，然后将反转后的数字与原始数字进行比较，如果它们是相同的，那么这个数字就是回文。但是，如果反转后的数字大于 <code>int.MAX</code>，我们将遇到整数溢出问题。<br>按照第二个想法，为了避免数字反转可能导致的溢出问题，为什么不考虑只反转 int 数字的一半？毕竟，如果该数字是回文，其后半部分反转后应该与原始数字的前半部分相同。<br>例如，输入 1221，我们可以将数字 “1221” 的后半部分从 “21” 反转为 “12”，并将其与前半部分 “12” 进行比较，因为二者相同，我们得知数字 1221 是回文。<br>首先，我们应该处理一些临界情况。所有负数都不可能是回文，除了0以外，所有个位是0的数字不可能是回文，因为最高位不等于0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isPalindrome</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-comment"># 如果是负数，或者低位为0又不是0的时候，一定为false</span><br><span class="hljs-comment"># eg：-100、100、30、等</span><br>        <span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> (x % <span class="hljs-number">10</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> x != <span class="hljs-number">0</span>):<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-comment"># 定义后半部分翻转的数字</span><br>        reversed_number: <span class="hljs-built_in">int</span> = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> x &gt; reversed_number:<br>            <span class="hljs-comment"># 每次让x整除10去掉低位</span><br><span class="hljs-comment"># 让低位结果乘以10+上新的低位得到翻转之后的数组</span><br>            reversed_number = reversed_number * <span class="hljs-number">10</span> + x % <span class="hljs-number">10</span><br>            x = x // <span class="hljs-number">10</span><br>        <span class="hljs-keyword">return</span> x == reversed_number <span class="hljs-keyword">or</span> x == reversed_number // <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPalindrome</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br><span class="hljs-comment">// 如果是负数，或者低位为0又不是0的时候，一定为false</span><br><span class="hljs-comment">// eg：-100、100、30、等</span><br><span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span> || (x % <span class="hljs-number">10</span> == <span class="hljs-number">0</span> &amp;&amp; x != <span class="hljs-number">0</span>)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-comment">// 定义后半部分翻转的数字</span><br><span class="hljs-type">int</span> <span class="hljs-variable">reversedNumber</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (x &gt; reversedNumber) &#123;<br><span class="hljs-comment">// 每次让x整除10去掉低位</span><br><span class="hljs-comment">// 让低位结果乘以10+上新的低位得到翻转之后的数组</span><br>reversedNumber = reversedNumber * <span class="hljs-number">10</span> + x % <span class="hljs-number">10</span>;<br>x = x / <span class="hljs-number">10</span>;<br>&#125;<br><br><span class="hljs-comment">// 如果该数字是回文，其后半部分反转后应该与原始数字的前半部分相同</span><br><span class="hljs-comment">// 当数字长度为奇数时，我们可以通过 revertedNumber/10 去除处于中位的数字。</span><br><span class="hljs-comment">// 例如，当输入为 12321 时，在 while 循环的末尾我们可以得到 x = 12，revertedNumber = 123，</span><br><span class="hljs-comment">// 由于处于中位的数字不影响回文（它总是与自己相等），所以我们可以简单地将其去除。</span><br><span class="hljs-keyword">return</span> x == reversedNumber || x == reversedNumber / <span class="hljs-number">10</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>罗马数字转整数<blockquote><p>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</p><p>字符          数值</p></blockquote></li></ol><blockquote><p>I             1<br>V             5<br>X             10<br>L             50<br>C             100<br>D             500<br>M             1000<br>例如， 罗马数字 2 写做 II ，即为两个并列的 1 。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 &gt;1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><p>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。<br>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。<br>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。<br>给定一个罗马数字，将其转换成整数。</p><p>示例 1:</p><p>输入: s &#x3D; “III”<br>输出: 3<br>示例 2:</p><p>输入: s &#x3D; “IV”<br>输出: 4<br>示例 3:</p><p>输入: s &#x3D; “IX”<br>输出: 9<br>示例 4:</p><p>输入: s &#x3D; “LVIII”<br>输出: 58<br>解释: L &#x3D; 50, V&#x3D; 5, III &#x3D; 3.<br>示例 5:</p><p>输入: s &#x3D; “MCMXCIV”<br>输出: 1994<br>解释: M &#x3D; 1000, CM &#x3D; 900, XC &#x3D; 90, IV &#x3D; 4.</p><p>提示：</p><p>1 &lt;&#x3D; s.length &lt;&#x3D; 15<br>s 仅含字符 (‘I’, ‘V’, ‘X’, ‘L’, ‘C’, ‘D’, ‘M’)<br>题目数据保证 s 是一个有效的罗马数字，且表示整数在范围 [1, 3999] 内<br>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。<br>IL 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXCIX 。</p></blockquote><p>通常情况下，罗马数字中小的数字在大的数字的右边。若输入的字符串满足该情况，那么可以将每个字符视作一个单独的值，累加每个字符对应的数值即可。<br>如 XXVII 可视作 X+X+V+I+I&#x3D;10+10+5+1+1&#x3D;27。<br>若存在小的数字在大的数字的左边的情况，根据规则需要减去小的数字。对于这种情况，我们也可以将每个字符视作一个单独的值，若一个数字右侧的数字比它大，则将该数字的符号取反。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">romanToInt</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        c2n = &#123;<br>            <span class="hljs-string">&quot;I&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;V&quot;</span>: <span class="hljs-number">5</span>,<br>            <span class="hljs-string">&quot;X&quot;</span>: <span class="hljs-number">10</span>,<br>            <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-number">50</span>,<br>            <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-number">100</span>,<br>            <span class="hljs-string">&quot;D&quot;</span>: <span class="hljs-number">500</span>,<br>            <span class="hljs-string">&quot;M&quot;</span>: <span class="hljs-number">1000</span>,<br>        &#125;<br>        <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> index, c <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(s):<br>            <span class="hljs-keyword">if</span> index &lt; <span class="hljs-built_in">len</span>(s) - <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> c2n[c] &lt; c2n[s[index+<span class="hljs-number">1</span>]]:<br>                <span class="hljs-built_in">sum</span> -= -c2n[c]<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-built_in">sum</span> += c2n[c]<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">romanToInt</span><span class="hljs-params">(String s)</span> &#123;<br>Map&lt;Character, Integer&gt; pairs = Map.of(<span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;L&#x27;</span>,<br><span class="hljs-number">50</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-number">500</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">1000</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br><span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> s.charAt(i);<br><span class="hljs-keyword">if</span> (i &lt; s.length() - <span class="hljs-number">1</span> &amp;&amp; pairs.get(ch) &lt; pairs.get(s.charAt(i + <span class="hljs-number">1</span>))) &#123;<br>result -= pairs.get(ch);<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>result += pairs.get(ch);<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>最长公共前缀<blockquote><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 “”。</p><p>示例 1：</p><p>输入：strs &#x3D; [“flower”,”flow”,”flight”]<br>输出：”fl”<br>示例 2：</p><p>输入：strs &#x3D; [“dog”,”racecar”,”car”]<br>输出：””<br>解释：输入不存在公共前缀。</p><p>提示：</p><p>1 &lt;&#x3D; strs.length &lt;&#x3D; 200<br>0 &lt;&#x3D; strs[i].length &lt;&#x3D; 200<br>strs[i] 如果非空，则仅由小写英文字母组成</p></blockquote></li></ol><p>用 LCP(S1…Sn)表示字符串S1…Sn的最长公共前缀。可以得到以下结论LCP(S1…Sn)&#x3D;LCP(LCP(LCP(S1,S2),S3),…Sn)</p><p>基于该结论，可以得到一种查找字符串数组中的最长公共前缀的简单方法。依次遍历字符串数组中的每个字符串，对于每个遍历到的字符串，更新最长公共前缀，当遍历完所有的字符串以后，即可得到字符串数组中的最长公共前缀。如果在尚未遍历完所有的字符串时，最长公共前缀已经是空串，则最长公共前缀一定是空串，因此不需要继续遍历剩下的字符串，直接返回空串即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">longestCommonPrefix</span>(<span class="hljs-params">self, strs: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> strs:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(strs) == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> strs[<span class="hljs-number">0</span>]<br>        prefix = strs[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> strs[<span class="hljs-number">1</span>:]:<br>            prefix = self.lcp(prefix, s)<br>            <span class="hljs-keyword">if</span> prefix == <span class="hljs-string">&quot;&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> prefix<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lcp</span>(<span class="hljs-params">self, s1: <span class="hljs-built_in">str</span>, s2: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        s = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(s1), <span class="hljs-built_in">len</span>(s2))):<br>            <span class="hljs-keyword">if</span> s1[i] == s2[i]:<br>                s += s1[i]<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">return</span> s<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">longestCommonPrefix</span><span class="hljs-params">(String[] strs)</span> &#123;<br>        <span class="hljs-keyword">if</span> (strs == <span class="hljs-literal">null</span> || strs.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">prefix</span> <span class="hljs-operator">=</span> strs[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> strs.length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; count; i++) &#123;<br>            prefix = longestCommonPrefix(prefix, strs[i]);<br>            <span class="hljs-keyword">if</span> (prefix.length() == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> prefix;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">longestCommonPrefix</span><span class="hljs-params">(String str1, String str2)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> Math.min(str1.length(), str2.length());<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (index &lt; length &amp;&amp; str1.charAt(index) == str2.charAt(index)) &#123;<br>            index++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> str1.substring(<span class="hljs-number">0</span>, index);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二：<br>方法一是横向扫描，依次遍历每个字符串，更新最长公共前缀。另一种方法是纵向扫描。纵向扫描时，从前往后遍历所有字符串的每一列，比较相同列上的字符是否相同，如果相同则继续对下一列进行比较，如果不相同则当前列不再属于公共前缀，当前列之前的部分为最长公共前缀。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">longestCommonPrefix</span>(<span class="hljs-params">self, strs: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> strs:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>        <br>        length, count = <span class="hljs-built_in">len</span>(strs[<span class="hljs-number">0</span>]), <span class="hljs-built_in">len</span>(strs)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br>            c = strs[<span class="hljs-number">0</span>][i]<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>(i == <span class="hljs-built_in">len</span>(strs[j]) <span class="hljs-keyword">or</span> strs[j][i] != c <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, count)):<br>                <span class="hljs-keyword">return</span> strs[<span class="hljs-number">0</span>][:i]<br>        <br>        <span class="hljs-keyword">return</span> strs[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><ol start="5"><li>有效的括号<blockquote><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>每个右括号都有一个对应的相同类型的左括号。</p><p>示例 1：</p><p>输入：s &#x3D; “()”</p><p>输出：true</p><p>示例 2：</p><p>输入：s &#x3D; “()[]{}”</p><p>输出：true</p><p>示例 3：</p><p>输入：s &#x3D; “(]”</p><p>输出：false</p><p>示例 4：</p><p>输入：s &#x3D; “([])”</p><p>输出：true</p><p>提示：</p><p>1 &lt;&#x3D; s.length &lt;&#x3D; 104<br>s 仅由括号 ‘()[]{}’ 组成</p></blockquote>判断括号的有效性可以使用「栈」这一数据结构来解决。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isValid</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> s <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(s) % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        list1: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">str</span>] = []<br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s:<br>            <span class="hljs-keyword">if</span> c <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;&#123;&quot;</span>, <span class="hljs-string">&quot;[&quot;</span>, <span class="hljs-string">&quot;(&quot;</span>]:<br>                list1.append(c)<br>            <span class="hljs-keyword">if</span> c == <span class="hljs-string">&quot;&#125;&quot;</span>:<br>                <span class="hljs-keyword">if</span> list1 <span class="hljs-keyword">and</span> list1[-<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;&#123;&quot;</span>:<br>                    list1.pop()<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">if</span> c == <span class="hljs-string">&quot;]&quot;</span>:<br>                <span class="hljs-keyword">if</span> list1 <span class="hljs-keyword">and</span> list1[-<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;[&quot;</span>:<br>                    list1.pop()<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">if</span> c == <span class="hljs-string">&quot;)&quot;</span>:<br>                <span class="hljs-keyword">if</span> list1 <span class="hljs-keyword">and</span> list1[-<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;(&quot;</span>:<br>                    list1.pop()<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">not</span> list1   <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">(String s)</span> &#123;<br><span class="hljs-keyword">if</span> (s.length() % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>Deque&lt;Character&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>Map&lt;Character, Character&gt; pairs = Map.of(<span class="hljs-string">&#x27;&#125;&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#x27;</span>, <span class="hljs-string">&#x27;]&#x27;</span>, <span class="hljs-string">&#x27;[&#x27;</span>, <span class="hljs-string">&#x27;)&#x27;</span>, <span class="hljs-string">&#x27;(&#x27;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br><span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> s.charAt(i);<br><span class="hljs-keyword">if</span> (pairs.containsKey(ch)) &#123;<br><span class="hljs-keyword">if</span> (stack.isEmpty()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (stack.peek() != pairs.get(ch)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>stack.pop();<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>stack.push(ch);<br>&#125;<br><span class="hljs-keyword">return</span> stack.isEmpty();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="6"><li>合并两个有序链表<blockquote><p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给&gt;定的两个链表的所有节点组成的。 </p><p>示例 1：</p><p>输入：l1 &#x3D; [1,2,4], l2 &#x3D; [1,3,4]<br>输出：[1,1,2,3,4,4]<br>示例 2：</p><p>输入：l1 &#x3D; [], l2 &#x3D; []<br>输出：[]<br>示例 3：</p><p>输入：l1 &#x3D; [], l2 &#x3D; [0]<br>输出：[0]</p><p>提示：</p><p>两个链表的节点数目范围是 [0, 50]<br>-100 &lt;&#x3D; Node.val &lt;&#x3D; 100<br>l1 和 l2 均按 非递减顺序 排列</p></blockquote></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, next=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.next = next</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mergeTwoLists</span>(<span class="hljs-params">self, l1: ListNode, l2: ListNode</span>) -&gt; ListNode:<br>        prev = prehead = ListNode(-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">while</span> l1 <span class="hljs-keyword">and</span> l2:<br>            <span class="hljs-keyword">if</span> l1.val &lt;= l2.val:<br>                prev.<span class="hljs-built_in">next</span> = l1<br>                l1 = l1.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                prev.<span class="hljs-built_in">next</span> = l2<br>                l2 = l2.<span class="hljs-built_in">next</span>            <br>            prev = prev.<span class="hljs-built_in">next</span><br><br>        <span class="hljs-comment"># 合并后 l1 和 l2 最多只有一个还未被合并完，我们直接将链表末尾指向未合并完的链表即可</span><br>        prev.<span class="hljs-built_in">next</span> = l1 <span class="hljs-keyword">if</span> l1 <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> l2<br><br>        <span class="hljs-keyword">return</span> prehead.<span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure><ol start="7"><li>删除有序数组中的重复项<blockquote><p>给你一个 非严格递增排列 的数组 nums ，请你 原地 删除重复出现的元&gt;素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺&gt;序 应该保持 一致 。然后返回 nums 中唯一元素的个数。</p><p>考虑 nums 的唯一元素的数量为 k ，你需要做以下事情确保你的题解可&gt;以被通过：</p><p>更改数组 nums ，使 nums 的前 k 个元素包含唯一元素，并按照它们最&gt;初在 nums 中出现的顺序排列。nums 的其余元素与 nums 的大小不重&gt;要。<br>返回 k 。<br>判题标准:</p><p>系统会用下面的代码来测试你的题解:</p><p>int[] nums &#x3D; […]; &#x2F;&#x2F; 输入数组<br>int[] expectedNums &#x3D; […]; &#x2F;&#x2F; 长度正确的期望答案</p><p>int k &#x3D; removeDuplicates(nums); &#x2F;&#x2F; 调用</p><p>assert k &#x3D;&#x3D; expectedNums.length;<br>for (int i &#x3D; 0; i &lt; k; i++) {<br>   assert nums[i] &#x3D;&#x3D; expectedNums[i];<br>}<br>如果所有断言都通过，那么您的题解将被 通过。</p><p>示例 1：</p><p>输入：nums &#x3D; [1,1,2]<br>输出：2, nums &#x3D; [1,2,_]<br>解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修&gt;改为 1, 2 。不需要考虑数组中超出新长度后面的元素。<br>示例 2：</p><p>输入：nums &#x3D; [0,0,1,1,1,2,2,3,3,4]<br>输出：5, nums &#x3D; [0,1,2,3,4]<br>解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修&gt;改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。</p><p>提示：</p><p>1 &lt;&#x3D; nums.length &lt;&#x3D; 3 * 104<br>-104 &lt;&#x3D; nums[i] &lt;&#x3D; 104<br>nums 已按 非严格递增 排列</p></blockquote></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeDuplicates</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> nums:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br>        length = <span class="hljs-built_in">len</span>(nums)<br>        fast = slow = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> fast &lt; length:<br>            <span class="hljs-keyword">if</span> nums[fast] != nums[fast-<span class="hljs-number">1</span>]:<br>                nums[slow] = nums[fast]<br>                slow+=<span class="hljs-number">1</span><br>            fast+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> slow<br></code></pre></td></tr></table></figure><ol start="8"><li>移除元素<blockquote><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 &gt;val 的元素。元素的顺序可能发生改变。然后返回 nums 中与 val 不同&gt;的元素的数量。</p><p>假设 nums 中不等于 val 的元素数量为 k，要通过此题，您需要执行以&gt;下操作：</p><p>更改 nums 数组，使 nums 的前 k 个元素包含不等于 val 的元素。&gt;nums 的其余元素和 nums 的大小并不重要。<br>返回 k。<br>用户评测：</p><p>评测机将使用以下代码测试您的解决方案：</p><p>int[] nums &#x3D; […]; &#x2F;&#x2F; 输入数组<br>int val &#x3D; …; &#x2F;&#x2F; 要移除的值<br>int[] expectedNums &#x3D; […]; &#x2F;&#x2F; 长度正确的预期答案。<br>                           &#x2F;&#x2F; 它以不等于 val 的值排序。</p></blockquote></li></ol><blockquote><p>int k &#x3D; removeElement(nums, val); &#x2F;&#x2F; 调用你的实现</p><p>assert k &#x3D;&#x3D; expectedNums.length;<br>sort(nums, 0, k); &#x2F;&#x2F; 排序 nums 的前 k 个元素<br>for (int i &#x3D; 0; i &lt; actualLength; i++) {<br>   assert nums[i] &#x3D;&#x3D; expectedNums[i];<br>}<br>如果所有的断言都通过，你的解决方案将会 通过。</p><p>示例 1：</p><p>输入：nums &#x3D; [3,2,2,3], val &#x3D; 3<br>输出：2, nums &#x3D; [2,2,<em>,</em>]<br>解释：你的函数函数应该返回 k &#x3D; 2, 并且 nums 中的前两个元素均为 &gt;2。<br>你在返回的 k 个元素之外留下了什么并不重要（因此它们并不计入评&gt;测）。<br>示例 2：</p><p>输入：nums &#x3D; [0,1,2,2,3,0,4,2], val &#x3D; 2<br>输出：5, nums &#x3D; [0,1,4,0,3,<em>,</em>,_]<br>解释：你的函数应该返回 k &#x3D; 5，并且 nums 中的前五个元素为 0,0,&gt;1,3,4。<br>注意这五个元素可以任意顺序返回。<br>你在返回的 k 个元素之外留下了什么并不重要（因此它们并不计入评&gt;测）。</p><p>提示：</p><p>0 &lt;&#x3D; nums.length &lt;&#x3D; 100<br>0 &lt;&#x3D; nums[i] &lt;&#x3D; 50<br>0 &lt;&#x3D; val &lt;&#x3D; 100</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeElement</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], val: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        left = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>            <span class="hljs-keyword">if</span> nums[i] != val:<br>                nums[left] = nums[i]<br>                left += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> left<br></code></pre></td></tr></table></figure><ol start="9"><li>找出字符串中第一个匹配项的下标<blockquote><p>给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串的第一个匹配项的下标（下标从 0 开始）。如果 needle 不是 &gt;haystack 的一部分，则返回  -1 。</p><p>示例 1：</p><p>输入：haystack &#x3D; “sadbutsad”, needle &#x3D; “sad”<br>输出：0<br>解释：”sad” 在下标 0 和 6 处匹配。<br>第一个匹配项的下标是 0 ，所以返回 0 。<br>示例 2：</p><p>输入：haystack &#x3D; “leetcode”, needle &#x3D; “leeto”<br>输出：-1<br>解释：”leeto” 没有在 “leetcode” 中出现，所以返回 -1 。</p><p>提示：</p><p>1 &lt;&#x3D; haystack.length, needle.length &lt;&#x3D; 104<br>haystack 和 needle 仅由小写英文字符组成</p></blockquote></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">strStr</span>(<span class="hljs-params">self, haystack: <span class="hljs-built_in">str</span>, needle: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-comment"># ...</span><br>        <span class="hljs-comment"># return haystack.index(needle) if needle in haystack else -1</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> needle:<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(haystack) &lt; <span class="hljs-built_in">len</span>(needle):<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(haystack) - <span class="hljs-built_in">len</span>(needle) + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">all</span>(haystack[i+j] == needle[j] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(needle))):<br>                <span class="hljs-keyword">return</span> i<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ol start="10"><li>搜索插入位置<blockquote><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>请必须使用时间复杂度为 O(log n) 的算法。</p><p>示例 1:</p><p>输入: nums &#x3D; [1,3,5,6], target &#x3D; 5<br>输出: 2<br>示例 2:</p><p>输入: nums &#x3D; [1,3,5,6], target &#x3D; 2<br>输出: 1<br>示例 3:</p><p>输入: nums &#x3D; [1,3,5,6], target &#x3D; 7<br>输出: 4</p><p>提示:</p><p>1 &lt;&#x3D; nums.length &lt;&#x3D; 104<br>-104 &lt;&#x3D; nums[i] &lt;&#x3D; 104<br>nums 为 无重复元素 的 升序 排列数组<br>-104 &lt;&#x3D; target &lt;&#x3D; 104</p></blockquote></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">searchInsert</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> nums:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> nums[-<span class="hljs-number">1</span>] &lt; target:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>            <span class="hljs-keyword">if</span> nums[i] &gt;= target:<br>                <span class="hljs-keyword">return</span> i<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">searchInsert</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-comment">// 二分查找</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> left + (right - left) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target) &#123;<br>                right = mid - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums[left] &lt; target ? left + <span class="hljs-number">1</span> : left;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="11"><li>最后一个单词的长度<blockquote><p>给你一个字符串 s，由若干单词组成，单词前后用一些空格字符隔开。返回字符串中 最后一个 单词的长度。</p><p>单词 是指仅由字母组成、不包含任何空格字符的最大子字符串。</p><p>示例 1：</p><p>输入：s &#x3D; “Hello World”<br>输出：5<br>解释：最后一个单词是“World”，长度为 5。<br>示例 2：</p><p>输入：s &#x3D; “   fly me   to   the moon  “<br>输出：4<br>解释：最后一个单词是“moon”，长度为 4。<br>示例 3：</p><p>输入：s &#x3D; “luffy is still joyboy”<br>输出：6<br>解释：最后一个单词是长度为 6 的“joyboy”。</p><p>提示：</p><p>1 &lt;&#x3D; s.length &lt;&#x3D; 104<br>s 仅有英文字母和空格 ‘ ‘ 组成<br>s 中至少存在一个单词</p></blockquote></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lengthOfLastWord</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> s:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        length = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> s[i] != <span class="hljs-string">&quot; &quot;</span>:<br>                length += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&quot; &quot;</span> <span class="hljs-keyword">and</span> length:<br>                <span class="hljs-keyword">return</span> length <br>        <span class="hljs-keyword">return</span> length<br></code></pre></td></tr></table></figure><ol start="12"><li>加一<blockquote><p>给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。</p><p>最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。</p><p>你可以假设除了整数 0 之外，这个整数不会以零开头。</p><p>示例 1：</p><p>输入：digits &#x3D; [1,2,3]<br>输出：[1,2,4]<br>解释：输入数组表示数字 123。<br>示例 2：</p><p>输入：digits &#x3D; [4,3,2,1]<br>输出：[4,3,2,2]<br>解释：输入数组表示数字 4321。<br>示例 3：</p><p>输入：digits &#x3D; [9]<br>输出：[1,0]<br>解释：输入数组表示数字 9。<br>加 1 得到了 9 + 1 &#x3D; 10。<br>因此，结果应该是 [1,0]。</p></blockquote>当我们对数组 digits 加一时，我们只需要关注 digits 的末尾出现了多少个 9 即可。我们可以考虑如下的三种情况：<br>如果 digits 的末尾没有 9，例如 [1,2,3]，那么我们直接将末尾的数加一，得到 [1,2,4] 并返回；<br>如果 digits 的末尾有若干个 9，例如 [1,2,3,9,9]，那么我们只需要找出从末尾开始的第一个不为 9 的元素，即 3，将该元素加一，得到 [1,2,4,9,9]。随后将末尾的 9 全部置零，得到 [1,2,4,0,0] 并返回。<br>如果 digits 的所有元素都是 9，例如 [9,9,9,9,9]，那么答案为 [1,0,0,0,0,0]。我们只需要构造一个长度比 digits 多 1 的新数组，将首元素置为 1，其余元素置为 0 即可。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">plusOne</span>(<span class="hljs-params">self, digits: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        n = <span class="hljs-built_in">len</span>(digits)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> digits[i] != <span class="hljs-number">9</span>:<br>                digits[i] += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, n):<br>                    digits[j] = <span class="hljs-number">0</span><br>                <span class="hljs-keyword">return</span> digits<br><br>        <span class="hljs-comment"># digits 中所有的元素均为 9</span><br>        <span class="hljs-keyword">return</span> [<span class="hljs-number">1</span>] + [<span class="hljs-number">0</span>] * n<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法-简单</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 中 yield 关键字起什么作用？</title>
    <link href="/2025/06/03/python-yield/"/>
    <url>/2025/06/03/python-yield/</url>
    
    <content type="html"><![CDATA[<p>要理解<code>yield</code>的作用，我们首先需要理解 <strong>可迭代对象（iterable）</strong> 和 <strong>迭代器（iterator）</strong> 的概念。千万不要混淆可迭代对象、迭代器和生成器！</p><h2 id="可迭代对象与迭代器"><a href="#可迭代对象与迭代器" class="headerlink" title="可迭代对象与迭代器"></a>可迭代对象与迭代器</h2><p>创建一个列表后，我们可以逐个读取它的元素，这个过程称为<strong>迭代</strong>：</p><figure class="highlight pycon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pycon"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">a = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:</span><br><span class="hljs-meta prompt_">...</span> <span class="language-python">    <span class="hljs-built_in">print</span>(i)</span><br>0<br>1<br>2<br></code></pre></td></tr></table></figure><p>所有可以用于 <code>for...in...</code> 循环的对象，都是<strong>可迭代对象</strong>，比如列表、字符串、文件等。这些对象内部实现了 <code>__iter__()</code> 方法。</p><p>然而，可迭代对象通常会把所有元素一次性加载进内存。当数据量很大时，这可能会带来性能问题。</p><h2 id="什么是生成器？"><a href="#什么是生成器？" class="headerlink" title="什么是生成器？"></a>什么是生成器？</h2><p><strong>生成器（Generator）</strong>是一种特殊的迭代器，它不会一次性生成所有元素，而是<strong>在需要时动态生成值</strong>。生成器是“惰性”的，占用内存更少。</p><p>将列表推导式的方括号 <code>[]</code> 换成圆括号 <code>()</code>，就能得到一个生成器：</p><figure class="highlight pycon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pycon"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">a = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">type</span>(a)</span><br>&lt;class &#x27;list&#x27;&gt;<br><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">b = (i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>))</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">type</span>(b)</span><br>&lt;class &#x27;generator&#x27;&gt;<br></code></pre></td></tr></table></figure><h2 id="yield：创建生成器的关键字"><a href="#yield：创建生成器的关键字" class="headerlink" title="yield：创建生成器的关键字"></a>yield：创建生成器的关键字</h2><p>使用 <code>yield</code> 可以将普通函数变成一个生成器函数。每次执行到 <code>yield</code>，函数会返回一个值，并<strong>暂停执行</strong>，保留当前状态。下一次调用 <code>next()</code> 时，会从上一次暂停的地方继续执行。</p><p>来看一个简单示例：</p><figure class="highlight pycon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pycon"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_generator</span>():</span><br><span class="hljs-meta prompt_">...</span> <span class="language-python">    mylist = <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)</span><br><span class="hljs-meta prompt_">...</span> <span class="language-python">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> mylist:</span><br><span class="hljs-meta prompt_">...</span> <span class="language-python">        <span class="hljs-keyword">yield</span> i * i</span><br><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">mygenerator = create_generator()</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">print</span>(mygenerator)</span><br>&lt;generator object create_generator at 0x...&gt;<br><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> mygenerator:</span><br><span class="hljs-meta prompt_">...</span> <span class="language-python">    <span class="hljs-built_in">print</span>(i)</span><br>0<br>1<br>4<br></code></pre></td></tr></table></figure><p>你会发现，调用函数时并不会立即执行它，而是返回一个生成器对象。只有在遍历该生成器或调用 <code>next()</code> 时，函数才会逐步运行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">some_function</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        <span class="hljs-keyword">yield</span> i<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> some_function():<br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><h2 id="和手动实现迭代器对比"><a href="#和手动实现迭代器对比" class="headerlink" title="和手动实现迭代器对比"></a>和手动实现迭代器对比</h2><p>不使用 <code>yield</code>，我们也可以手动实现一个迭代器类，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyIterator</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.count = -<span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>        self.count += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> self.count &lt; <span class="hljs-number">4</span>:<br>            <span class="hljs-keyword">return</span> self.count<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> StopIteration<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">some_func</span>():<br>    <span class="hljs-keyword">return</span> MyIterator()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> some_func():<br>    <span class="hljs-built_in">print</span>(i)<br><br></code></pre></td></tr></table></figure><p>相比之下，使用 <code>yield</code> 可以让我们省去写 <code>__iter__</code> 和 <code>__next__</code> 方法的麻烦，快速构建一个可迭代的对象。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><code>yield</code> 是构建生成器的关键字。</li><li>生成器通过 <code>yield</code> 动态生成值，具有惰性、节省内存的特点。</li><li>相比手动实现迭代器，<code>yield</code> 提供了一种更简单、直观的方式。</li></ul><p>当你想逐步生成数据，或者处理大量数据时，优先考虑使用生成器和 <code>yield</code>，它们会让你的代码更高效、更优雅。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python Monkey Patching</title>
    <link href="/2025/05/31/python-monkey-patch/"/>
    <url>/2025/05/31/python-monkey-patch/</url>
    
    <content type="html"><![CDATA[<p>Python 是一种典型的动态脚本语言，不仅支持动态类型，其对象模型本身也是动态的。Python 中的类是可变的，方法不过是类的一个属性，因此我们可以在运行时修改它们的行为。这种技巧被称为 <strong>Monkey Patching</strong>（猴子补丁），这个名字可能源于 “游击补丁”（Guerrilla patch），意思是“偷偷地修改代码”。</p><h2 id="什么是-Monkey-Patching？"><a href="#什么是-Monkey-Patching？" class="headerlink" title="什么是 Monkey Patching？"></a>什么是 Monkey Patching？</h2><p>简而言之，Monkey Patching 就是在运行时动态地替换对象的属性。在 Python 中，这通常表现为对函数、类或模块的动态修改。</p><p>我们来看一个简单的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># monkey.py</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Me</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">who_am_i</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I am a Monkey&quot;</span>)<br></code></pre></td></tr></table></figure><p>假设你不喜欢这个输出，因为你是个人类，于是你打算使用 Monkey Patch 改变它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> monkey<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">i_am_human</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I am human&quot;</span>)<br><br><span class="hljs-comment"># 替换 who_am_i 方法</span><br>monkey.Me.who_am_i = i_am_human<br><br>obj = monkey.Me()<br>obj.who_am_i()  <span class="hljs-comment"># 输出：I am human</span><br></code></pre></td></tr></table></figure><p>输出结果变成了“我是人类”，修改生效了，这就是 Monkey Patching 的效果。</p><h2 id="可变与不可变类型的关系"><a href="#可变与不可变类型的关系" class="headerlink" title="可变与不可变类型的关系"></a>可变与不可变类型的关系</h2><p>理解 Monkey Patching，需要先搞清楚 Python 中 <strong>可变类型</strong> 与 <strong>不可变类型</strong> 的区别。</p><p>在 Python 中，变量更像是“标签”而不是“盒子”，它指向实际的对象。对于自定义对象（即类的实例），它们是<strong>可变</strong>的，因此可以直接修改其属性而不必新建对象。</p><p>一般来说：</p><ul><li><strong>不可变类型</strong>：<code>float</code>、<code>decimal</code>、<code>complex</code>、<code>bool</code>、<code>str</code>、<code>tuple</code>、<code>range</code>、<code>frozenset</code>、<code>bytes</code> 等。</li><li><strong>可变类型</strong>：<code>list</code>、<code>dict</code>、<code>set</code>、<code>bytearray</code>、自定义类等。</li></ul><p>Monkey Patching 正是利用了这种可变性。</p><p>前面的例子是修补了一个类的方法，因此该类的所有实例都会受到影响。但我们也可以<strong>只修补某个特定实例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> types<br><span class="hljs-keyword">import</span> monkey<br><br>monkey1 = monkey.Me()<br>monkey2 = monkey.Me()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">i_am_human</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I am human&quot;</span>)<br><br>monkey2.who_am_i = types.MethodType(i_am_human, monkey2)<br><br>monkey1.who_am_i()  <span class="hljs-comment"># 输出：I am a Monkey</span><br>monkey2.who_am_i()  <span class="hljs-comment"># 输出：I am human</span><br></code></pre></td></tr></table></figure><p>通过 <code>types.MethodType</code>，我们仅改变了 <code>monkey2</code> 的方法实现。</p><h2 id="修补模块"><a href="#修补模块" class="headerlink" title="修补模块"></a>修补模块</h2><p>Monkey Patching 不仅限于类或实例，也可以应用到模块级别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># whoami.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">who_am_i</span>(<span class="hljs-params">monkey_type</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;I am a <span class="hljs-subst">&#123;monkey_type&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># human.py</span><br><span class="hljs-keyword">import</span> whoami<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">who_am_i</span>():<br>    whoami.who_am_i(<span class="hljs-string">&quot;Human&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># monkey.py</span><br><span class="hljs-keyword">import</span> whoami<br><span class="hljs-keyword">import</span> human<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">i_am_monkey</span>(<span class="hljs-params">monkey_type</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;I am a <span class="hljs-subst">&#123;monkey_type&#125;</span>&quot;</span>)<br><br>whoami.who_am_i = i_am_monkey  <span class="hljs-comment"># 修补模块函数</span><br><br>human.who_am_i()  <span class="hljs-comment"># 输出：I am a Monkey</span><br></code></pre></td></tr></table></figure><p>猴子通过猴子补丁“攻击”了人类模块。</p><h2 id="警告-⚠️"><a href="#警告-⚠️" class="headerlink" title="警告 ⚠️"></a>警告 ⚠️</h2><p>Monkey Patching 虽然强大，但也有风险。</p><p>它通常用于处理遗留系统或第三方库，我们希望在<strong>不直接修改源码</strong>的前提下改变行为，从而适配某些环境或修复 bug。但这种修改方式会让代码的行为变得难以追踪，容易造成混淆和维护困难。</p><p>比如，在上面的例子中，谁是猴子谁是人类就不那么容易分辨了。</p><p>因此，<strong>在可行的情况下，优先选择扩展库的公共接口</strong>，而不是直接打补丁。</p><h2 id="测试中的应用"><a href="#测试中的应用" class="headerlink" title="测试中的应用"></a>测试中的应用</h2><p>在测试中，Monkey Patching 是非常实用的。它可以临时替换依赖项，比如模拟一个方法的返回值，用于验证系统行为，而无需实际调用外部服务。</p><h2 id="推荐库：Gorilla-🦍"><a href="#推荐库：Gorilla-🦍" class="headerlink" title="推荐库：Gorilla 🦍"></a>推荐库：Gorilla 🦍</h2><p>我推荐使用 <a href="https://gorilla.readthedocs.io/en/latest/">Gorilla</a>，它让 Monkey Patching 变得更优雅、模块化，尤其是在需要对大量类或方法打补丁的场景中。</p><p>下面是一个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gorilla<br><span class="hljs-keyword">import</span> destination<br><br><span class="hljs-meta">@gorilla.patches(<span class="hljs-params">destination.Class</span>)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello&quot;</span>)<br>    <br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">class_method</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;world!&quot;</span>)<br></code></pre></td></tr></table></figure><p>上面的代码只是定义了补丁，尚未应用。我们可以使用 <code>gorilla.find_patches</code> 扫描并批量应用补丁：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gorilla<br><span class="hljs-keyword">import</span> mypackage<br><br>patches = gorilla.find_patches([mypackage])<br><span class="hljs-keyword">for</span> patch <span class="hljs-keyword">in</span> patches:<br>    gorilla.apply(patch)<br></code></pre></td></tr></table></figure><p>这种方式不仅直观、干净，还大大提升了可维护性。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Monkey Patching 是 Python 提供的一种强大但危险的能力。合理使用它，可以提升灵活性和适配能力，尤其适用于：</p><ul><li>遗留代码的兼容性调整</li><li>单元测试中的方法模拟</li><li>第三方库的临时修复</li></ul><p>但请始终保持谨慎，确保补丁行为明确、文档清晰，并在可能的情况下考虑更安全的替代方式。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>python元类</title>
    <link href="/2025/05/29/python%E5%85%83%E7%B1%BB/"/>
    <url>/2025/05/29/python%E5%85%83%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>在 Python 中，一切皆对象，类也不例外。我们通常认为类是用来创建实例的“模版”，但实际上，<strong>类本身也是对象</strong>。也就是说，类是由某种机制动态生成的，这个机制就是 <strong>元类（metaclass）</strong>。</p><h2 id="一、类也是对象"><a href="#一、类也是对象" class="headerlink" title="一、类也是对象"></a>一、类也是对象</h2><p>当你使用 <code>class</code> 关键字定义一个类时，Python 会根据这个类的描述信息，创建一个对象。这个对象本身就是一个“类”，但它也是某个元类的实例：</p><figure class="highlight pycon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pycon"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectCreator</span>(<span class="hljs-title class_ inherited__">object</span>):</span><br><span class="hljs-meta prompt_">...</span> <span class="language-python">    <span class="hljs-keyword">pass</span></span><br><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">JustAnotherVariable = ObjectCreator</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">ObjectCreator.class_attribute = <span class="hljs-string">&#x27;foo&#x27;</span></span><br><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">print</span>(ObjectCreator)</span><br>&lt;class &#x27;__main__.ObjectCreator&#x27;&gt;<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">print</span>(JustAnotherVariable)</span><br>&lt;class &#x27;__main__.ObjectCreator&#x27;&gt;<br></code></pre></td></tr></table></figure><p>如上所示，类 <code>ObjectCreator</code> 是一个对象，可以赋值给变量、添加属性等，就像其他对象一样。</p><h2 id="二、谁创建了类？"><a href="#二、谁创建了类？" class="headerlink" title="二、谁创建了类？"></a>二、谁创建了类？</h2><p>既然类本身是对象，那它也必须是由某种“类”创建的。Python 默认使用 <a href="https://docs.python.org/3.13/library/functions.html#type">type</a> 这个内建元类来创建所有类：</p><figure class="highlight pycon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pycon"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-number">1</span>))               <span class="hljs-comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-string">&quot;1&quot;</span>))             <span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(ObjectCreator))   <span class="hljs-comment"># &lt;class &#x27;type&#x27;&gt;</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(ObjectCreator())) <span class="hljs-comment"># &lt;class &#x27;__main__.ObjectCreator&#x27;&gt;</span></span><br></code></pre></td></tr></table></figure><p>这说明：<code>ObjectCreator</code> 是由 <code>type</code> 创建的对象（类），而 <code>ObjectCreator()</code> 是该类创建的实例对象。</p><h2 id="三、使用-type-动态创建类"><a href="#三、使用-type-动态创建类" class="headerlink" title="三、使用 type 动态创建类"></a>三、使用 <code>type</code> 动态创建类</h2><p><code>type</code> 不只是一个用于检查对象类型的函数，它还可以动态地创建类。其使用方式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">type</span>(name, bases, attrs)<br><span class="hljs-comment"># name: 类名</span><br><span class="hljs-comment"># bases: 父类的元组</span><br><span class="hljs-comment"># attrs: 类属性的字典</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight pycon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pycon"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">Foo = <span class="hljs-built_in">type</span>(<span class="hljs-string">&#x27;Foo&#x27;</span>, (), &#123;&#125;)</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">print</span>(Foo)</span><br>&lt;class &#x27;__main__.Foo&#x27;&gt;<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">print</span>(Foo())</span><br>&lt;__main__.Foo object at 0x...&gt;<br></code></pre></td></tr></table></figure><p>你还可以在创建类时直接添加方法：</p><figure class="highlight pycon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pycon"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">echo_bar</span>(<span class="hljs-params">self</span>):</span><br><span class="hljs-meta prompt_">...</span> <span class="language-python">    <span class="hljs-built_in">print</span>(self.bar)</span><br><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">FooChild = <span class="hljs-built_in">type</span>(<span class="hljs-string">&#x27;FooChild&#x27;</span>, (Foo,), &#123;<span class="hljs-string">&#x27;echo_bar&#x27;</span>: echo_bar&#125;)</span><br><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">my_foo = FooChild()</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">my_foo.bar = <span class="hljs-string">&quot;hello&quot;</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">my_foo.echo_bar()</span><br>hello<br></code></pre></td></tr></table></figure><p>并且你可以像普通类一样，动态添加更多方法：</p><figure class="highlight pycon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pycon"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">echo_bar_more</span>(<span class="hljs-params">self</span>):</span><br><span class="hljs-meta prompt_">...</span> <span class="language-python">    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;yet another method&#x27;</span>)</span><br><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">FooChild.echo_bar_more = echo_bar_more</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">my_foo.echo_bar_more()</span><br>yet another method<br></code></pre></td></tr></table></figure><h2 id="四、什么是元类（Metaclass）？"><a href="#四、什么是元类（Metaclass）？" class="headerlink" title="四、什么是元类（Metaclass）？"></a>四、什么是元类（Metaclass）？</h2><blockquote><p>简单来说，<strong>元类是“用于创建类的类”</strong>。</p></blockquote><p>类是实例的工厂，而元类就是类的工厂。Python 使用 <code>type</code> 作为默认的元类，但你也可以自定义自己的元类来控制类的创建过程。</p><p>当你定义一个类时，如果指定了 <code>metaclass=XXX</code>，Python 会使用你提供的元类去创建这个类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MetaClass</span>(<span class="hljs-title class_ inherited__">type</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">cls, name, bases, attrs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;class name: <span class="hljs-subst">&#123;name&#125;</span>&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Defining class <span class="hljs-subst">&#123;cls&#125;</span>&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Bases: <span class="hljs-subst">&#123;bases&#125;</span>&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Attributes:&#x27;</span>)<br>        <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> attrs.items():<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;key&#125;</span>: <span class="hljs-subst">&#123;value&#125;</span>&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span>(<span class="hljs-built_in">object</span>, metaclass=MetaClass):<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-keyword">class</span> name: Foo<br>Defining <span class="hljs-keyword">class</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-comment">&#x27;__main__.Foo&#x27;&gt;</span><br><span class="hljs-symbol">Bases:</span> (&lt;<span class="hljs-keyword">class</span> <span class="hljs-comment">&#x27;object&#x27;&gt;,)</span><br><span class="hljs-symbol">Attributes:</span><br><span class="hljs-symbol">__module__:</span> <span class="hljs-comment">&#x27;__main__&#x27;</span><br><span class="hljs-symbol">__qualname__:</span> <span class="hljs-comment">&#x27;Foo&#x27;</span><br></code></pre></td></tr></table></figure><p>注意：这里的 <code>MetaClass.__init__</code> 会在类定义时执行，而不是类实例化时。</p><h2 id="五、元类的典型应用场景"><a href="#五、元类的典型应用场景" class="headerlink" title="五、元类的典型应用场景"></a>五、元类的典型应用场景</h2><p>元类常用于构建框架或库中，例如：</p><ul><li>自动注册类</li><li>为所有类添加统一方法或属性</li><li>控制属性的访问或修改</li><li>实现ORM字段与数据库字段的映射逻辑</li></ul><h2 id="六、示例"><a href="#六、示例" class="headerlink" title="六、示例"></a>六、示例</h2><p>1.要求一个类的所有属性都变成大写。先用一个函数来实现这个功能（metaclass的输入可以是函数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">upper_attr</span>(<span class="hljs-params">future_class_name, future_class_parents, future_class_attrs</span>):<br>    uppercase_attrs = &#123;<br>        attr <span class="hljs-keyword">if</span> attr.startswith(<span class="hljs-string">&quot;__&quot;</span>) <span class="hljs-keyword">else</span> attr.upper(): v<br>        <span class="hljs-keyword">for</span> attr, v <span class="hljs-keyword">in</span> future_class_attrs.items()<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">type</span>(future_class_name, future_class_parents, uppercase_attrs)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassC</span>(metaclass=upper_attr):<br>    attrib = <span class="hljs-string">&#x27;some value&#x27;</span><br><br>c1 = ClassC()<br><span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hasattr</span>(c1, <span class="hljs-string">&#x27;attrib&#x27;</span>))<br><span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hasattr</span>(c1, <span class="hljs-string">&#x27;ATTRIB&#x27;</span>))<br><span class="hljs-comment"># </span><br><span class="hljs-built_in">print</span>(c1.ATTRIB)<br></code></pre></td></tr></table></figure><p>2.控制成员访问<br>以下是一个完整示例，我们自定义了一个元类，用来控制对类属性的访问，禁止对“私有属性”的写入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MetaMemberControl</span>(<span class="hljs-title class_ inherited__">type</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">mcs, name, bases, attrs</span>):<br>        original_getattr = attrs.get(<span class="hljs-string">&#x27;__getattribute__&#x27;</span>)<br>        original_setattr = attrs.get(<span class="hljs-string">&#x27;__setattr__&#x27;</span>)<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_getattr</span>(<span class="hljs-params">self, item</span>):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> item.startswith(<span class="hljs-string">&#x27;_&#x27;</span>):<br>                alias_name = <span class="hljs-string">&#x27;_&#x27;</span> + item<br>                <span class="hljs-keyword">if</span> alias_name <span class="hljs-keyword">in</span> attrs.get(<span class="hljs-string">&#x27;__slots__&#x27;</span>, ()):<br>                    item = alias_name<br>            <span class="hljs-keyword">if</span> original_getattr:<br>                <span class="hljs-keyword">return</span> original_getattr(self, item)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>(<span class="hljs-built_in">eval</span>(name), self).__getattribute__(item)<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_setattr</span>(<span class="hljs-params">self, key, value</span>):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> key.startswith(<span class="hljs-string">&#x27;_&#x27;</span>) <span class="hljs-keyword">and</span> (<span class="hljs-string">&#x27;_&#x27;</span> + key) <span class="hljs-keyword">in</span> attrs.get(<span class="hljs-string">&#x27;__slots__&#x27;</span>, ()):<br>                <span class="hljs-keyword">raise</span> AttributeError(<span class="hljs-string">f&quot;you can&#x27;t modify private member: _<span class="hljs-subst">&#123;key&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">if</span> original_setattr:<br>                <span class="hljs-keyword">return</span> original_setattr(self, key, value)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>(<span class="hljs-built_in">eval</span>(name), self).__setattr__(key, value)<br><br>        attrs[<span class="hljs-string">&#x27;__getattribute__&#x27;</span>] = init_getattr<br>        attrs[<span class="hljs-string">&#x27;__setattr__&#x27;</span>] = init_setattr<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>().__new__(mcs, name, bases, attrs)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Human</span>(metaclass=MetaMemberControl):<br>    __slots__ = (<span class="hljs-string">&#x27;_age&#x27;</span>, <span class="hljs-string">&#x27;_name&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self._name = name<br>        self._age = age<br></code></pre></td></tr></table></figure><p>测试代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_demo</span>():<br>    h = Human(<span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-number">30</span>)<br>    <span class="hljs-built_in">print</span>(h.age)     <span class="hljs-comment"># 可以访问（实际上访问的是 _age）</span><br>    <span class="hljs-built_in">print</span>(h._age)    <span class="hljs-comment"># 也可以直接访问（Python不限制）</span><br>    h.age = <span class="hljs-number">20</span>       <span class="hljs-comment"># 抛出 AttributeError</span><br></code></pre></td></tr></table></figure><p>元类帮我们自动生成了简化的访问逻辑，无需手写 <code>@property</code>。</p><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><p>元类是 Python 中极其强大的功能，能够对类的创建过程进行控制，是实现高级抽象与框架功能的核心工具之一。其他可用于类变更的方法更直接，应该优先考虑，比如monkey补丁和类装饰器。</p><p>在日常开发中，可能很少直接使用元类，但理解它的工作原理将有助于我们更深入地掌握Python的对象模型，尤其是在阅读高级框架如Django、SQLAlchemy或Pydantic时。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>好奇</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何去使用python的typing.Annotated</title>
    <link href="/2025/05/28/%E5%A6%82%E4%BD%95%E5%8E%BB%E4%BD%BF%E7%94%A8python%E7%9A%84typing-Annotated/"/>
    <url>/2025/05/28/%E5%A6%82%E4%BD%95%E5%8E%BB%E4%BD%BF%E7%94%A8python%E7%9A%84typing-Annotated/</url>
    
    <content type="html"><![CDATA[<p>在最近的开发中，我越来越多地使用 <a href="https://docs.pydantic.dev/">Pydantic</a> 来进行字段校验。而在使用 Pydantic 的过程中，类型注解（type hint）几乎是必不可少的。其中一个经常出现的类型工具就是 <code>typing.Annotated</code>。</p><p>起初，我在阅读 <a href="https://docs.python.org/3/library/typing.html#typing.Annotated">官方文档</a> 时对它的用途感到困惑，看了半天也没搞懂它到底是做什么用的。后来在网上查阅了一些资料，终于理解了它的基本用途和背后的设计理念。于是，我决定将自己的理解总结下来，记录在这篇博客中，方便自己回顾，也希望能帮到同样疑惑的你。</p><h2 id="Annotated-是什么？"><a href="#Annotated-是什么？" class="headerlink" title="Annotated 是什么？"></a>Annotated 是什么？</h2><p>在 Python 中，<code>Annotated</code> 允许开发者为类型声明附加元数据。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Annotated[T, x] 的含义是：这个变量是类型 T，同时附带了元数据 x。</span><br>var_name: Annotated[T, x]<br></code></pre></td></tr></table></figure><p>来看一个简单的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> Annotated, TypedDict, get_type_hints<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>(<span class="hljs-title class_ inherited__">TypedDict</span>):<br>    <span class="hljs-comment"># 表示 name 是 str 类型，且 name[0] 应该是大写字母</span><br>    name: Annotated[<span class="hljs-built_in">str</span>, <span class="hljs-string">&quot;first letter is capital&quot;</span>]<br><br>get_type_hints(A)<br><span class="hljs-comment"># 输出: &#123;&#x27;name&#x27;: &lt;class &#x27;str&#x27;&gt;&#125;</span><br><br>get_type_hints(A, include_extras=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># 输出: &#123;&#x27;name&#x27;: typing.Annotated[str, &#x27;first letter is capital&#x27;]&#125;</span><br><br>get_type_hints(A, include_extras=<span class="hljs-literal">True</span>)[<span class="hljs-string">&#x27;name&#x27;</span>].__metadata__[<span class="hljs-number">0</span>]<br><span class="hljs-comment"># 输出: &#x27;first letter is capital&#x27;</span><br></code></pre></td></tr></table></figure><p>可以看到，<code>Annotated</code> 本身并不会影响类型本身的行为，它的作用只是附加一些元数据。这些元数据可以通过 <code>.__metadata__</code> 属性在运行时获取。但要真正“用起来”，还需要其他工具或框架来解析这些元数据并据此执行某些逻辑。</p><h2 id="Annotated-在-Pydantic-和-FastAPI-中的应用"><a href="#Annotated-在-Pydantic-和-FastAPI-中的应用" class="headerlink" title="Annotated 在 Pydantic 和 FastAPI 中的应用"></a>Annotated 在 Pydantic 和 FastAPI 中的应用</h2><p>在使用 Pydantic 的框架中，<code>Annotated</code> 被广泛用于表达校验规则。例如在 FastAPI 中，你可以用它来传递额外的校验信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> Annotated<br><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> Header, Query<br><br><span class="hljs-comment"># 参数 q 是 str 类型，最大长度为 50。</span><br><span class="hljs-comment"># 这个信息通过 Annotated 传递给 FastAPI，用于参数校验。</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_items</span>(<span class="hljs-params">q: Annotated[<span class="hljs-built_in">str</span>, Query(<span class="hljs-params">max_length=<span class="hljs-number">50</span></span>)]</span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># 用于依赖注入的情况也类似：</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">UserIdHeader</span>(<span class="hljs-params">alias: <span class="hljs-built_in">str</span> | <span class="hljs-literal">None</span> = <span class="hljs-literal">None</span>, **kwargs</span>):<br>    <span class="hljs-keyword">if</span> alias <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        alias = <span class="hljs-string">&quot;X-Forwarded-User&quot;</span><br>    <span class="hljs-keyword">return</span> Header(alias=alias, **kwargs)<br><br>UserIdHeaderDep = Annotated[<span class="hljs-built_in">str</span> | <span class="hljs-literal">None</span>, UserIdHeader()]<br></code></pre></td></tr></table></figure><h2 id="在-Pydantic-模型中定义校验规则"><a href="#在-Pydantic-模型中定义校验规则" class="headerlink" title="在 Pydantic 模型中定义校验规则"></a>在 Pydantic 模型中定义校验规则</h2><p>你还可以在 Pydantic 模型中使用 Annotated 来定义字段的校验规则：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> Annotated<br><span class="hljs-keyword">from</span> pydantic <span class="hljs-keyword">import</span> BaseModel, Field, field_validator<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Model</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    x: <span class="hljs-built_in">int</span><br><br><span class="hljs-meta">    @field_validator(<span class="hljs-params"><span class="hljs-string">&quot;x&quot;</span></span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">between_2_and_20</span>(<span class="hljs-params">cls, v: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-number">2</span> &lt; v &lt; <span class="hljs-number">20</span>:<br>            <span class="hljs-keyword">return</span> v<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;v&#125;</span> is not between 2 and 20.&quot;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Model2</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    <span class="hljs-comment"># Annotated 提供的元数据 Field 可以直接用于字段验证</span><br>    x: Annotated[<span class="hljs-built_in">int</span>, Field(lt=<span class="hljs-number">20</span>, gt=<span class="hljs-number">2</span>)]       <br></code></pre></td></tr></table></figure><p>这是因为 Pydantic 内部能够解析 <code>Annotated</code> 中的 <code>Field</code> 并据此自动生成验证器，简化了手动定义校验逻辑的过程。</p><h2 id="更高级的用法：函数作为元数据"><a href="#更高级的用法：函数作为元数据" class="headerlink" title="更高级的用法：函数作为元数据"></a>更高级的用法：函数作为元数据</h2><p><code>Annotated</code> 不仅可以添加静态信息，甚至可以附加函数。比如在 <a href="https://github.com/langchain-ai/langgraph"><code>langgraph</code></a> 库中就使用这种方式来实现动态行为。下面是一个简化示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> Annotated, TypedDict, <span class="hljs-type">Callable</span>, get_type_hints<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reducer</span>(<span class="hljs-params">a: <span class="hljs-built_in">list</span>, b: <span class="hljs-built_in">float</span></span>) -&gt; <span class="hljs-built_in">list</span>:<br>    <span class="hljs-keyword">return</span> a + [b]<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">State</span>(<span class="hljs-title class_ inherited__">TypedDict</span>):<br>    x: Annotated[<span class="hljs-built_in">list</span>, reducer]<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Graph</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, schema: <span class="hljs-built_in">type</span></span>):<br>        self.metadata = &#123;<br>            name: typ.__metadata__[<span class="hljs-number">0</span>] <br>            <span class="hljs-keyword">for</span> name, typ <span class="hljs-keyword">in</span> get_type_hints(schema, include_extras=<span class="hljs-literal">True</span>).items()<br>        &#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_node</span>(<span class="hljs-params">self, func: <span class="hljs-type">Callable</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.func = func<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">invoke</span>(<span class="hljs-params">self, input_: <span class="hljs-built_in">dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-built_in">float</span>]</span>) -&gt; <span class="hljs-built_in">dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-built_in">list</span>[<span class="hljs-built_in">float</span>]]:<br>        output = &#123;k: [v] <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> input_.items()&#125;<br>        <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> output.items():<br>            processed = self.func(output)<br>            output[k] = self.metadata[k](output[k], processed[k])<br>            <span class="hljs-comment">#                 ↑ 这里调用 reducer 函数处理结果</span><br>        <span class="hljs-keyword">return</span> output<br><br>graph = Graph(State)<br>graph.add_node(<span class="hljs-keyword">lambda</span> x: &#123;<span class="hljs-string">&quot;x&quot;</span>: x[<span class="hljs-string">&quot;x&quot;</span>][-<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>&#125;)<br><span class="hljs-built_in">print</span>(graph.invoke(&#123;<span class="hljs-string">&quot;x&quot;</span>: <span class="hljs-number">0.5</span>&#125;))  <span class="hljs-comment"># 输出: &#123;&#x27;x&#x27;: [0.5, 1.5]&#125;</span><br></code></pre></td></tr></table></figure><p>这个例子展示了一个强大的用法：将函数作为元数据附加到类型上，在运行时动态处理字段的值。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>typing.Annotated</code> 是 Python 类型系统中一个非常灵活的工具，它本身不会做任何“实事”，但提供了一种标准方式来附加元数据。只要配合能够解析它的框架或代码逻辑，就能实现非常强大的功能。在 Pydantic、FastAPI、LangGraph 等现代 Python 工具链中，它都发挥着关键作用。</p><p>希望这篇文章能帮你更好地理解并应用 <code>Annotated</code>，让你的类型注解既“好看”又“有用”。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>好奇</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用Jdk17的风格书写代码</title>
    <link href="/2023/08/12/%E7%94%A8jdk17%E7%9A%84%E9%A3%8E%E6%A0%BC%E4%B9%A6%E5%86%99%E4%BB%A3%E7%A0%81/"/>
    <url>/2023/08/12/%E7%94%A8jdk17%E7%9A%84%E9%A3%8E%E6%A0%BC%E4%B9%A6%E5%86%99%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>我想通过Java不同版本的编程特性去解决一下开发中会遇到的问题，帮我们快速理解和学习新特性，后续我会不断的收集和补充这些问题，目前比较可惜的是我还没有对不同的jdk版本的单元测试代码进行banchmark……</p><h3 id="Q1-在给定的字符串中取出出现次数Top3的字母，但是可能会出现并列情况，所以我们的结果应该是-k-char1-chat2-……-……"><a href="#Q1-在给定的字符串中取出出现次数Top3的字母，但是可能会出现并列情况，所以我们的结果应该是-k-char1-chat2-……-……" class="headerlink" title="Q1:在给定的字符串中取出出现次数Top3的字母，但是可能会出现并列情况，所以我们的结果应该是[k&#x3D;[char1,chat2,……],……]"></a>Q1:在给定的字符串中取出出现次数Top3的字母，但是可能会出现并列情况，所以我们的结果应该是[k&#x3D;[char1,chat2,……],……]</h3><ul><li>A:jdk8之前</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCharTopK</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">python</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;                Python is powerful... and fast;\n&quot;</span> +<br>            <span class="hljs-string">&quot;                plays well with others;\n&quot;</span> +<br>            <span class="hljs-string">&quot;                runs everywhere;\n&quot;</span> +<br>            <span class="hljs-string">&quot;                is friendly &amp; easy to learn;\n&quot;</span> +<br>            <span class="hljs-string">&quot;                is Open.&quot;</span>;<br><br>    <span class="hljs-comment">// key:char value:char 出现次数</span><br>    Map&lt;Character, Long&gt; key2count = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-type">char</span>[] pythonChars = python.toLowerCase().toCharArray();<br>    <span class="hljs-keyword">for</span> (Character c : pythonChars) &#123;<br>        <span class="hljs-keyword">if</span> (!Character.isAlphabetic(c)) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> key2count.getOrDefault(c, <span class="hljs-number">0L</span>);<br>        key2count.put(c, count + <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// key:count value:chars ，像直方图</span><br>    TreeMap&lt;Long, List&lt;Character&gt;&gt; count2chars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;((o1, o2) -&gt; Math.toIntExact(o2 - o1));<br><br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;Character, Long&gt; entry : key2count.entrySet()) &#123;<br>        List&lt;Character&gt; chars = count2chars.getOrDefault(entry.getValue(), Lists.newArrayList());<br>        chars.add(entry.getKey());<br>        count2chars.put(entry.getValue(), chars);<br>    &#125;<br><br>    log.info(<span class="hljs-string">&quot;sorted result &#123;&#125;&quot;</span>, count2chars);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>A:jdk8之后，jdk16之前</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCharTopK</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">var</span> <span class="hljs-variable">python</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">            Python is powerful... and fast;</span><br><span class="hljs-string">            plays well with others;</span><br><span class="hljs-string">            runs everywhere;</span><br><span class="hljs-string">            is friendly &amp; easy to learn;</span><br><span class="hljs-string">            is Open.</span><br><span class="hljs-string">            &quot;&quot;&quot;</span>;<br><br>    <span class="hljs-comment">// key:char value:char 出现次数</span><br>    Map&lt;Character, Long&gt; key2count = python.chars()<br>            .filter(Character::isAlphabetic).mapToObj(i -&gt; (<span class="hljs-type">char</span>) i)<br>            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));<br><br>    <span class="hljs-comment">// key:count value:chars ，像直方图</span><br>    Map&lt;Long, List&lt;Character&gt;&gt; count2char = key2count.entrySet().stream().<br>            collect(Collectors.groupingBy(Map.Entry::getValue,<br>                            Collectors.mapping(Map.Entry::getKey, Collectors.toList())<br>                    )<br>            );<br>    <span class="hljs-comment">// 倒排</span><br>    List&lt;Map.Entry&lt;Long, List&lt;Character&gt;&gt;&gt; topK = count2char.entrySet().stream()<br>            .sorted(Map.Entry.comparingByKey(Comparator.reverseOrder())).toList();<br><br>    log.info(<span class="hljs-string">&quot;sorted result &#123;&#125;&quot;</span>, topK);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>A:jdk16之后，更适用于可读性更好的业务代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCharTopK</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">var</span> <span class="hljs-variable">python</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">            Python is powerful... and fast;</span><br><span class="hljs-string">            plays well with others;</span><br><span class="hljs-string">            runs everywhere;</span><br><span class="hljs-string">            is friendly &amp; easy to learn;</span><br><span class="hljs-string">            is Open.</span><br><span class="hljs-string">            &quot;&quot;&quot;</span>;<br>    <span class="hljs-keyword">record</span> <span class="hljs-title class_">Letter</span><span class="hljs-params">(<span class="hljs-type">int</span> codePoint)</span> &#123;<br>        Letter(<span class="hljs-type">int</span> codePoint) &#123;<br>            <span class="hljs-built_in">this</span>.codePoint = Character.toLowerCase(codePoint);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">record</span> <span class="hljs-title class_">LetterCount</span><span class="hljs-params">(<span class="hljs-type">long</span> count)</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;LetterCount&gt; &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(LetterCount o)</span> &#123;<br>            <span class="hljs-keyword">return</span> Long.compare(<span class="hljs-built_in">this</span>.count, o.count);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">record</span> <span class="hljs-title class_">LetterByCount</span><span class="hljs-params">(Letter letter, LetterCount count)</span> &#123;<br>        LetterByCount(Map.Entry&lt;Letter, LetterCount&gt; entry) &#123;<br>            <span class="hljs-built_in">this</span>(entry.getKey(), entry.getValue());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">record</span> <span class="hljs-title class_">LettersByCount</span><span class="hljs-params">(LetterCount count, List&lt;Letter&gt; letters)</span> &#123;<br>        LettersByCount(Map.Entry&lt;LetterCount, List&lt;Letter&gt;&gt; entry) &#123;<br>            <span class="hljs-built_in">this</span>(entry.getKey(), entry.getValue());<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Comparator&lt;? <span class="hljs-built_in">super</span> LettersByCount&gt; comparingByCount() &#123;<br>            <span class="hljs-keyword">return</span> Comparator.comparing(LettersByCount::count);<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">// key:char value:char 出现次数</span><br>    Map&lt;Letter, LetterCount&gt; letter2count = python.chars()<br>            .filter(Character::isAlphabetic).mapToObj(Letter::<span class="hljs-keyword">new</span>)<br>            .collect(<br>                    Collectors.groupingBy(<br>                            Function.identity(),<br>                            Collectors.collectingAndThen(Collectors.counting(), LetterCount::<span class="hljs-keyword">new</span>)<br>                    )<br>            );<br><br>    <span class="hljs-comment">// key:count value:chars ，像直方图</span><br>    Map&lt;LetterCount, List&lt;Letter&gt;&gt; count2letter = letter2count.entrySet().stream()<br>            .map(LetterByCount::<span class="hljs-keyword">new</span>)<br>            .collect(Collectors.groupingBy(LetterByCount::count, Collectors.mapping(LetterByCount::letter, Collectors.toList())));<br><br>    <span class="hljs-comment">// 倒排</span><br>    List&lt;LettersByCount&gt; topK = count2letter.entrySet().stream()<br>            .map(LettersByCount::<span class="hljs-keyword">new</span>)<br>            .sorted(LettersByCount.comparingByCount().reversed())<br>            .toList();<br>    log.info(<span class="hljs-string">&quot;sorted result &#123;&#125;&quot;</span>, topK);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Q2-猜数字游戏-一位玩家想一个单词，另一位通过单词长度尝试猜该玩家所想的单词，如果同位置上的字母相同，则在猜测的单词上该字母大写返回，如果同位置上没有，但是其它位置有则不变（只匹配一次），如果同位置不匹配且它位置未出现则用-替换"><a href="#Q2-猜数字游戏-一位玩家想一个单词，另一位通过单词长度尝试猜该玩家所想的单词，如果同位置上的字母相同，则在猜测的单词上该字母大写返回，如果同位置上没有，但是其它位置有则不变（只匹配一次），如果同位置不匹配且它位置未出现则用-替换" class="headerlink" title="Q2:猜数字游戏:一位玩家想一个单词，另一位通过单词长度尝试猜该玩家所想的单词，如果同位置上的字母相同，则在猜测的单词上该字母大写返回，如果同位置上没有，但是其它位置有则不变（只匹配一次），如果同位置不匹配且它位置未出现则用.替换."></a>Q2:猜数字游戏:一位玩家想一个单词，另一位通过单词长度尝试猜该玩家所想的单词，如果同位置上的字母相同，则在猜测的单词上该字母大写返回，如果同位置上没有，但是其它位置有则不变（只匹配一次），如果同位置不匹配且它位置未出现则用.替换.</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGuess</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">record</span> <span class="hljs-title class_">Wordless</span><span class="hljs-params">(String hidden)</span> &#123;<br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">guess</span><span class="hljs-params">(String guess)</span> &#123;<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>            <span class="hljs-type">boolean</span>[] used = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[hidden.length()];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; guess.length(); i++) &#123;<br>                <span class="hljs-keyword">if</span> (guess.codePointAt(i) == <span class="hljs-built_in">this</span>.hidden.codePointAt(i)) &#123;<br>                    result.append(Character.toString(guess.codePointAt(i)).toUpperCase());<br>                    used[i] = <span class="hljs-literal">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-type">boolean</span> <span class="hljs-variable">found</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; hidden.length(); j++) &#123;<br>                        <span class="hljs-keyword">if</span> (used[j]) &#123;<br>                            <span class="hljs-keyword">continue</span>;<br>                        &#125;<br>                        <span class="hljs-keyword">if</span> (i != j<br>                                &amp;&amp; guess.codePointAt(j) != <span class="hljs-built_in">this</span>.hidden.codePointAt(j)<br>                                &amp;&amp; guess.codePointAt(i) == <span class="hljs-built_in">this</span>.hidden.codePointAt(j)) &#123;<br>                            result.append(Character.toString(guess.codePointAt(i)));<br>                            used[j] = <span class="hljs-literal">true</span>;<br>                            found = <span class="hljs-literal">true</span>;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (!found) &#123;<br>                        result.append(<span class="hljs-string">&quot;.&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> result.toString();<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">Wordless</span> <span class="hljs-variable">wordless</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Wordless</span>(<span class="hljs-string">&quot;aaaab&quot;</span>);<br>    Assertions.assertEquals(wordless.guess(<span class="hljs-string">&quot;ccccc&quot;</span>), <span class="hljs-string">&quot;.....&quot;</span>);<br>    Assertions.assertEquals(wordless.guess(<span class="hljs-string">&quot;ccacc&quot;</span>), <span class="hljs-string">&quot;..A..&quot;</span>);<br>    Assertions.assertEquals(wordless.guess(<span class="hljs-string">&quot;ccacb&quot;</span>), <span class="hljs-string">&quot;..A.B&quot;</span>);<br>    Assertions.assertEquals(wordless.guess(<span class="hljs-string">&quot;bbacc&quot;</span>), <span class="hljs-string">&quot;b.A..&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>封装重构之后,看似变长了，但是可读性更高了<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">Wordless</span><span class="hljs-params">(String hiddenAsStr)</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">guess</span><span class="hljs-params">(String guessAsStr)</span> &#123;<br>        <span class="hljs-type">Guess</span> <span class="hljs-variable">guess</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Guess</span>(guessAsStr);<br>        <span class="hljs-type">Hidden</span> <span class="hljs-variable">hidden</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hidden</span>(hiddenAsStr);<br>        <span class="hljs-keyword">return</span> IntStream.range(<span class="hljs-number">0</span>, guess.length()).mapToObj(i -&gt; &#123;<br>            <span class="hljs-keyword">if</span> (guess.hasALetterAtPosition(i).thatIsWellPlacedIn(hidden)) &#123;<br>                <span class="hljs-keyword">return</span> Character.toString(guess.codePointAt(i)).toUpperCase();<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (guess.hasALetterAtPosition(i).thatIsNotWellPlacedIn(hidden)) &#123;<br>                <span class="hljs-keyword">return</span> Character.toString(guess.codePointAt(i));<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;.&quot;</span>;<br>            &#125;<br>        &#125;).collect(Collectors.joining());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">record</span> <span class="hljs-title class_">Hidden</span><span class="hljs-params">(String hidden, <span class="hljs-type">boolean</span>[] used)</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Hidden</span><span class="hljs-params">(String hidden)</span> &#123;<br>        <span class="hljs-built_in">this</span>(hidden, <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[hidden.length()]);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">codePointAt</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.hidden.codePointAt(i);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">length</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.hidden.length();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">match</span><span class="hljs-params">(GuessWithIndex guessWithIndex, <span class="hljs-type">int</span> guessIndex, <span class="hljs-type">int</span> hiddenIndex)</span> &#123;<br>        <span class="hljs-keyword">if</span> (used[hiddenIndex]) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">match</span> <span class="hljs-operator">=</span> guessWithIndex.guess().codePointAt(guessIndex) == hidden.codePointAt(hiddenIndex);<br>        <span class="hljs-keyword">if</span> (match) &#123;<br>            used[hiddenIndex] = <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> match;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">record</span> <span class="hljs-title class_">Guess</span><span class="hljs-params">(String guess)</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">length</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.guess.length();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> GuessWithIndex <span class="hljs-title function_">hasALetterAtPosition</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GuessWithIndex</span>(<span class="hljs-built_in">this</span>, i);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">codePointAt</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.guess.codePointAt(i);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">record</span> <span class="hljs-title class_">GuessWithIndex</span><span class="hljs-params">(Guess guess, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">thatIsWellPlacedIn</span><span class="hljs-params">(Hidden hidden)</span> &#123;<br>        <span class="hljs-keyword">return</span> hidden.match(<span class="hljs-built_in">this</span>, index, index);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">thatIsNotWellPlacedIn</span><span class="hljs-params">(Hidden hidden)</span> &#123;<br>        <span class="hljs-keyword">return</span> IntStream.range(<span class="hljs-number">0</span>, hidden.length())<br>                .filter(i -&gt; index != i)<br>                .filter(i -&gt; guess.codePointAt(i) != hidden.codePointAt(i))<br>                .anyMatch(i -&gt; hidden.match(<span class="hljs-built_in">this</span>, index, i));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGuess</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Wordless</span> <span class="hljs-variable">wordless</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Wordless</span>(<span class="hljs-string">&quot;aaaab&quot;</span>);<br>    Assertions.assertEquals(wordless.guess(<span class="hljs-string">&quot;ccccc&quot;</span>), <span class="hljs-string">&quot;.....&quot;</span>);<br>    Assertions.assertEquals(wordless.guess(<span class="hljs-string">&quot;ccacc&quot;</span>), <span class="hljs-string">&quot;..A..&quot;</span>);<br>    Assertions.assertEquals(wordless.guess(<span class="hljs-string">&quot;ccacb&quot;</span>), <span class="hljs-string">&quot;..A.B&quot;</span>);<br>    Assertions.assertEquals(wordless.guess(<span class="hljs-string">&quot;bbacc&quot;</span>), <span class="hljs-string">&quot;b.A..&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>继续重构，引入密闭类和switch case表达式<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">Wordless</span><span class="hljs-params">(String hiddenAsStr)</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">guess</span><span class="hljs-params">(String guessAsStr)</span> &#123;<br>        <span class="hljs-type">Guess</span> <span class="hljs-variable">guess</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Guess</span>(guessAsStr);<br>        <span class="hljs-type">Hidden</span> <span class="hljs-variable">hidden</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hidden</span>(hiddenAsStr);<br>        <span class="hljs-keyword">return</span> IntStream.range(<span class="hljs-number">0</span>, guess.length()).mapToObj(index -&gt; <span class="hljs-keyword">switch</span> (guess.checkCharterAtPosition(index).with(hidden)) &#123;<br>            <span class="hljs-keyword">case</span> WELL_PLACED letter -&gt; Character.toString(letter.codePoint()).toUpperCase();<br>            <span class="hljs-keyword">case</span> NOT_WELL_PLACED letter -&gt; Character.toString(letter.codePoint());<br>            <span class="hljs-keyword">case</span> ABSEND letter -&gt; <span class="hljs-string">&quot;.&quot;</span>;<br>        &#125;).collect(Collectors.joining());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">record</span> <span class="hljs-title class_">Hidden</span><span class="hljs-params">(String hidden, <span class="hljs-type">boolean</span>[] used)</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Hidden</span><span class="hljs-params">(String hidden)</span> &#123;<br>        <span class="hljs-built_in">this</span>(hidden, <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[hidden.length()]);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">codePointAt</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.hidden.codePointAt(i);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">length</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.hidden.length();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">match</span><span class="hljs-params">(GuessWithIndex guessWithIndex, <span class="hljs-type">int</span> guessIndex, <span class="hljs-type">int</span> hiddenIndex)</span> &#123;<br>        <span class="hljs-keyword">if</span> (used[hiddenIndex]) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">match</span> <span class="hljs-operator">=</span> guessWithIndex.guess().codePointAt(guessIndex) == hidden.codePointAt(hiddenIndex);<br>        <span class="hljs-keyword">if</span> (match) &#123;<br>            used[hiddenIndex] = match;<br>        &#125;<br>        <span class="hljs-keyword">return</span> match;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">record</span> <span class="hljs-title class_">Guess</span><span class="hljs-params">(String guess)</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">length</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.guess.length();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> GuessWithIndex <span class="hljs-title function_">hasALetterAtPosition</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GuessWithIndex</span>(<span class="hljs-built_in">this</span>, i);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">codePointAt</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.guess.codePointAt(i);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> GuessWithIndex <span class="hljs-title function_">checkCharterAtPosition</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GuessWithIndex</span>(<span class="hljs-built_in">this</span>,index);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">record</span> <span class="hljs-title class_">GuessWithIndex</span><span class="hljs-params">(Guess guess, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">thatIsWellPlacedIn</span><span class="hljs-params">(Hidden hidden)</span> &#123;<br>        <span class="hljs-keyword">return</span> hidden.match(<span class="hljs-built_in">this</span>, index, index);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">thatIsNotWellPlacedIn</span><span class="hljs-params">(Hidden hidden)</span> &#123;<br>        <span class="hljs-keyword">return</span> IntStream.range(<span class="hljs-number">0</span>, hidden.length()).filter(i -&gt; index != i)<br>                .filter(i -&gt; guess.codePointAt(i) != hidden.codePointAt(i))<br>                .anyMatch(i -&gt; hidden.match(<span class="hljs-built_in">this</span>, index, i));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Letter <span class="hljs-title function_">with</span><span class="hljs-params">(Hidden hidden)</span> &#123;<br>        <span class="hljs-keyword">if</span> (thatIsWellPlacedIn(hidden)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WELL_PLACED</span>(<span class="hljs-built_in">this</span>.guess.codePointAt(<span class="hljs-built_in">this</span>.index));<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (thatIsNotWellPlacedIn(hidden)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NOT_WELL_PLACED</span>(<span class="hljs-built_in">this</span>.guess.codePointAt(<span class="hljs-built_in">this</span>.index));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ABSEND</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">sealed</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Letter</span> <span class="hljs-keyword">permits</span> WELL_PLACED, NOT_WELL_PLACED, ABSEND &#123;<br>&#125;<br><br><span class="hljs-keyword">record</span> <span class="hljs-title class_">WELL_PLACED</span><span class="hljs-params">(<span class="hljs-type">int</span> codePoint)</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Letter</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">record</span> <span class="hljs-title class_">NOT_WELL_PLACED</span><span class="hljs-params">(<span class="hljs-type">int</span> codePoint)</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Letter</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">record</span> <span class="hljs-title class_">ABSEND</span><span class="hljs-params">()</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Letter</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGuess</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Wordless</span> <span class="hljs-variable">wordless</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Wordless</span>(<span class="hljs-string">&quot;aaaab&quot;</span>);<br>    Assertions.assertEquals(wordless.guess(<span class="hljs-string">&quot;ccccc&quot;</span>), <span class="hljs-string">&quot;.....&quot;</span>);<br>    Assertions.assertEquals(wordless.guess(<span class="hljs-string">&quot;ccacc&quot;</span>), <span class="hljs-string">&quot;..A..&quot;</span>);<br>    Assertions.assertEquals(wordless.guess(<span class="hljs-string">&quot;ccacb&quot;</span>), <span class="hljs-string">&quot;..A.B&quot;</span>);<br>    Assertions.assertEquals(wordless.guess(<span class="hljs-string">&quot;bbacc&quot;</span>), <span class="hljs-string">&quot;b.A..&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot应用镜像构建</title>
    <link href="/2022/11/20/Efficient-container-images/"/>
    <url>/2022/11/20/Efficient-container-images/</url>
    
    <content type="html"><![CDATA[<blockquote><p>容器 ——云原生的基石</p></blockquote><p>一个SpringBoot应用的上云其实很简单，我们只需要将打出来的jar包放入一个带有jdk环境的Docker基础镜像中运行起来就行。但是如果我们深入思考真的是这样吗？简单的复制jar包在容器中运行总是会比运行解压之后的文件多一些的开销，而在容器化环境中，这种开销是很明显的。另一个问题是，把应用程序的代码和它的所有依赖放在Docker镜像的一个层中并不是优雅的做法，由于重新编译代码的频率一定比我们升级所使用的依赖的频率要高很多，所以通常情况下在DockerFile中把事情分开一些比较好。 如果把jar文件放在应用类之前的那一层，Docker通常只需要改变最底层，就可以从其缓存中获取其他文件（充分利用unionFS）。</p><p>基于上述前提，我们想要做一个高效的Springboot DockerFile只需要两步：</p><ol><li>分层的jar包</li><li>编写Dockerfiles</li></ol><h3 id="分层的jar包"><a href="#分层的jar包" class="headerlink" title="分层的jar包"></a>分层的jar包</h3><p>为了更容易创建优化的Docker镜像，SpringBoot支持在jar中添加一个层索引文件，它提供了一个层的列表以及jar中应包含的部分，索引中的层列表是根据层应该被添加到Docker&#x2F;OCI镜像中的顺序排列的：</p><ul><li>dependencies (用于常规发布的依赖)</li><li>spring-boot-loader (针对 org&#x2F;springframework&#x2F;boot&#x2F;loader 下的所有内容)</li><li>snapshot-dependencies (用于snapshot的依赖)</li><li>application (用于application 类和资源)</li></ul><p>这种分层设计是为了根据代码在应用程序构建之间变化的可能性来分离代码，dependencies代码在不同的构建之间变化的可能性较小，所以它被放在自己的层中，以允许工具从缓存中重新使用这些层。application在不同的构建之间更有可能发生变化，所以它被隔离在一个单独的层中。</p><h3 id="编写Dockerfiles"><a href="#编写Dockerfiles" class="headerlink" title="编写Dockerfiles"></a>编写Dockerfiles</h3><p>虽然在Dockerfile中只需几行就可以将SpringBoot的jar转换成docker镜像，但我们将使用分层功能可以创建一个优化的docker镜像。当我们创建一个包含分层文件的jar时，spring-boot-jarmode-layertools.jar将被作为依赖添加到我们的应用jar中(解压之后能看到)。有了classpath上的这个jar，我们可以在一个特殊的模式下启动应用程序，这个模式允许bootstrap代码运行与我们的应用程序完全不同的东西，例如提取层里的东西。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动jar</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">java -Djarmode=layertools -jar my-app.jar</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压jar并分类依赖（构建分层Docker镜像的核心工具）</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">java -Djarmode=layertools -jar my-app.jar extract</span><br></code></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs DOCKERFILE"><span class="hljs-keyword">FROM</span> eclipse-temurin:<span class="hljs-number">17</span>-jre as builder<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> application</span><br><span class="hljs-keyword">ARG</span> JAR_FILE=target/*.jar<br><span class="hljs-keyword">COPY</span><span class="language-bash"> <span class="hljs-variable">$&#123;JAR_FILE&#125;</span> application.jar</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> java -Djarmode=layertools -jar application.jar extract</span><br><br><span class="hljs-keyword">FROM</span> eclipse-temurin:<span class="hljs-number">17</span>-jre<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> application</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=builder application/dependencies/ ./</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=builder application/spring-boot-loader/ ./</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=builder application/snapshot-dependencies/ ./</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=builder application/application/ ./</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;org.springframework.boot.loader.JarLauncher&quot;</span>]</span><br></code></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># 可以指定参数构建</span><br>docker <span class="hljs-keyword">build </span>--<span class="hljs-keyword">build-arg </span><span class="hljs-keyword">JAR_FILE=path/to/myapp.jar </span>.<br></code></pre></td></tr></table></figure><p>这是一个多阶段的docker文件，构建者阶段提取了以后需要的目录，每个 COPY 命令都与jarmode提取的层有关。<br>当然，不使用jarmode也可以编写Dockerfile， 我们可以使用unzip和mv的一些组合来把东西移到正确的层，但jarmode简化了这一点。</p>]]></content>
    
    
    <categories>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cloud native</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python魔法方法</title>
    <link href="/2022/09/17/python%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95/"/>
    <url>/2022/09/17/python%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>魔法方法(Magic Methods)是Python中的内置函数，一般以双下划线开头和结尾，例如__init__、__del__等。之所以称之为魔法方法，是因为这些方法会在进行特定的操作时会自动被调用，魔法方法大致分为如下几类：构造与初始化、类的表示、访问控制、比较、运算等操作、容器类操作、可调用对象、序列化类。在这里我记录一下它的常用魔法方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查看魔法方法</span><br>magic = <span class="hljs-built_in">dir</span>(<span class="hljs-string">&quot;hello&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x.startswith(<span class="hljs-string">&quot;__&quot;</span>), magic)))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[<span class="hljs-string">&#x27;__add__&#x27;</span>, <span class="hljs-string">&#x27;__class__&#x27;</span>, <span class="hljs-string">&#x27;__contains__&#x27;</span>, <span class="hljs-string">&#x27;__delattr__&#x27;</span>, <span class="hljs-string">&#x27;__dir__&#x27;</span>, <span class="hljs-string">&#x27;__doc__&#x27;</span>, <span class="hljs-string">&#x27;__eq__&#x27;</span>, <span class="hljs-string">&#x27;__format__&#x27;</span>, <span class="hljs-string">&#x27;__ge__&#x27;</span>, <span class="hljs-string">&#x27;__getattribute__&#x27;</span>, <span class="hljs-string">&#x27;__getitem__&#x27;</span>, <span class="hljs-string">&#x27;__getnewargs__&#x27;</span>, <span class="hljs-string">&#x27;__getstate__&#x27;</span>, <span class="hljs-string">&#x27;__gt__&#x27;</span>, <span class="hljs-string">&#x27;__hash__&#x27;</span>, <span class="hljs-string">&#x27;__init__&#x27;</span>, <span class="hljs-string">&#x27;__init_subclass__&#x27;</span>, <span class="hljs-string">&#x27;__iter__&#x27;</span>, <span class="hljs-string">&#x27;__le__&#x27;</span>, <span class="hljs-string">&#x27;__len__&#x27;</span>, <span class="hljs-string">&#x27;__lt__&#x27;</span>, <span class="hljs-string">&#x27;__mod__&#x27;</span>, <span class="hljs-string">&#x27;__mul__&#x27;</span>, <span class="hljs-string">&#x27;__ne__&#x27;</span>, <span class="hljs-string">&#x27;__new__&#x27;</span>, <span class="hljs-string">&#x27;__reduce__&#x27;</span>, <span class="hljs-string">&#x27;__reduce_ex__&#x27;</span>, <span class="hljs-string">&#x27;__repr__&#x27;</span>, <span class="hljs-string">&#x27;__rmod__&#x27;</span>, <span class="hljs-string">&#x27;__rmul__&#x27;</span>, <span class="hljs-string">&#x27;__setattr__&#x27;</span>, <span class="hljs-string">&#x27;__sizeof__&#x27;</span>, <span class="hljs-string">&#x27;__str__&#x27;</span>, <span class="hljs-string">&#x27;__subclasshook__&#x27;</span>]<br></code></pre></td></tr></table></figure><h2 id="构造初始化相关"><a href="#构造初始化相关" class="headerlink" title="构造初始化相关"></a>构造初始化相关</h2><p>与构造和初始化相关的方法有三个__init__、<strong>del__、__new</strong></p><ul><li>__new__方法是创建类的实例并返回，再进入__init__对实例进行初始化，使用场景如单例模式、工厂模式，以及一些不可变对象的继承上</li><li>__init__通过调用属性操作相关的方法，对属性进行初始化</li><li>而__del__方法则是当对象被系统回收的时候调用的魔法方法，在对象生命周期调用结束时调用该方法。Python 采用自动引用计数（ARC）方式来回收对象所占用的空间</li></ul><ul><li>执行顺序如下<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>) -&gt; Self:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;构造方法__new__&quot;</span>)<br>        <span class="hljs-comment"># 创建实例并返回,如果不返回则不会进入到初始化方法</span><br>        <span class="hljs-comment"># __new__返回的是其它实例，当前实例的__init__也不会调用</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">object</span>.__new__(cls)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name: <span class="hljs-built_in">str</span>, age: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># self就是__new__返回的对象实例</span><br>        self.name = name<br>        self.age = age<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;初始化方法__init__&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__del__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;del方法被执行&quot;</span>)<br><br><br>user = User(<span class="hljs-string">&quot;zs&quot;</span>, <span class="hljs-number">23</span>)<br><span class="hljs-keyword">del</span> user  <span class="hljs-comment"># python使用引用计数法，在没有被引用的时候会被回收</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">执行顺序：<br>构造方法__new__<br>初始化方法__init__<br><span class="hljs-keyword">del</span>方法被执行<br></code></pre></td></tr></table></figure></li><li>引入父类之后执行顺序如下<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>) -&gt; Self:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;父类构造方法__new__&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">object</span>.__new__(cls)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, id_card: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.id_card = id_card<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;父类初始化方法__init__&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__del__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;父类的del方法被执行&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>(<span class="hljs-title class_ inherited__">People</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>) -&gt; Self:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;子类构造方法__new__&quot;</span>)<br>        <span class="hljs-comment"># 创建实例并返回,如果不返回则不会进入到初始化方法</span><br>        <span class="hljs-comment"># __new__返回的是其它实例，当前实例的__init__也不会调用</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>().__new__(cls, *args, **kwargs)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, id_card: <span class="hljs-built_in">str</span>, name: <span class="hljs-built_in">str</span>, age: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># self就是__new__返回的对象实例</span><br>        <span class="hljs-built_in">super</span>().__init__(id_card)<br>        self.name = name<br>        self.age = age<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;子类初始化方法__init__&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__del__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;子类的del方法被执行&quot;</span>)<br><br><br>user = User(<span class="hljs-string">&quot;10010&quot;</span>, <span class="hljs-string">&quot;zs&quot;</span>, <span class="hljs-number">23</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">子类构造方法__new__<br>父类构造方法__new__<br>父类初始化方法__init__<br>子类初始化方法__init__<br>子类的<span class="hljs-keyword">del</span>方法被执行<br></code></pre></td></tr></table></figure></li><li>通过new方法实现单例模式<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Single</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    _instance = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kw</span>):<br>        <span class="hljs-keyword">if</span> cls._instance <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            cls._instance = <span class="hljs-built_in">object</span>.__new__(cls, *args, **kw)<br>        <span class="hljs-keyword">return</span> cls._instance<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br>single1 = Single()<br>single2 = Single()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(single1) == <span class="hljs-built_in">id</span>(single2))<br></code></pre></td></tr></table></figure></li></ul><h2 id="控制属性访问"><a href="#控制属性访问" class="headerlink" title="控制属性访问"></a>控制属性访问</h2><p>这类魔法方法主要再对对象的属性进行访问、定义、修改时起作用。主要有：</p><ul><li><strong>getattr</strong>(self, name): 定义当用户试图获取一个属性时的行为</li><li><strong>getattribute</strong>(self, name)：定义当该类的属性被访问时的行为（先调用该方法，查看是否存在该属性，若不存在，接着去调用__getattr__）</li><li><strong>setattr</strong>(self, name, value)：定义当一个属性被设置时的行为</li><li><strong>delattr</strong>(self, name)：定义当一个属性被删除时的行为<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name: <span class="hljs-built_in">str</span>, age: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># 会调用__setattr__方法复制</span><br>        <span class="hljs-comment"># 每次复制都会把属性写入dict字典中</span><br>        self.age = age<br>        <span class="hljs-comment"># print(self.__dict__)</span><br>        self.name = name<br>        <span class="hljs-comment"># print(self.__dict__)</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__setattr__</span>(<span class="hljs-params">self, __name: <span class="hljs-built_in">str</span>, __value: <span class="hljs-type">Any</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># 由于每次类实例进行属性赋值时都会调用__setattr__()，所以也可以重载__setattr__()方法，来动态的观察每次实例属性赋值时__dict__()的变化</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;__setattr__被调用了，设置属性<span class="hljs-subst">&#123;__name&#125;</span>值为<span class="hljs-subst">&#123;__value&#125;</span>&quot;</span>)<br>        <span class="hljs-comment"># self.__dict__会去调用__getattribute__方法确认__dict__是否存在</span><br>        self.__dict__[__name] = __value<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getattribute__</span>(<span class="hljs-params">self, __name: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-type">Any</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;__getattribute__方法被调用了,属性名称<span class="hljs-subst">&#123;__name&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">object</span>.__getattribute__(self, __name)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getattr__</span>(<span class="hljs-params">self, __name</span>):<br>        <span class="hljs-comment"># 如果class中定义了__getattr__()，则__getattr__()不会被调用（除非显示调用或引发AttributeError异常）</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;调用__getattr__方法获取属性<span class="hljs-subst">&#123;__name&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> self.__dict__[__name]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__delattr__</span>(<span class="hljs-params">self, __name</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;调用了__delattr__方法，删除了<span class="hljs-subst">&#123;__name&#125;</span>属性&quot;</span>)<br>        self.__dict__.pop[__name]<br><br>user = User(<span class="hljs-string">&quot;zs&quot;</span>, <span class="hljs-number">23</span>)<br><span class="hljs-built_in">delattr</span>(user, <span class="hljs-string">&quot;name&quot;</span>)<br><span class="hljs-built_in">print</span>(user.name)<br><span class="hljs-built_in">print</span>(user.a)  <span class="hljs-comment"># 因为__getattribute__抛出AttributeError异常，触发__getattr__</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="容器类操作"><a href="#容器类操作" class="headerlink" title="容器类操作"></a>容器类操作</h2><p>有一些方法可以让我们自己定义自己的容器，就像python内置的list,tuple,dict等等；容器分为可变容器和不可变容器,这里的细节需要去了解相关的协议。如果自定义一个不可变容器的话，只能定义__len__和__getitem__；定义一个可变容器除了不可变容器的所有魔法方法，还需要定义__setitem__和__delitem__；如果容器可迭代还需要定义__iter__</p><ul><li><strong>len</strong>(self):返回容器的长度</li><li><strong>getitem</strong>(self,key):当需要执行self[key]的方式去调用容器中的对象，调用的时该方法</li><li><strong>setitem</strong>(self,key,value):当需要执行self[key] &#x3D; value时，调用的是该方法。</li><li><strong>delitem</strong>(self, key):当需要执行 del self[key]时，需要调用该方法；</li><li><strong>iter</strong>(self):当容器可以执行 for x in container: ，或者使用iter(container)时，需要定义该方法</li><li><strong>reversed</strong>(self):实现当reversed()被调用时的行为。应该返回序列反转后的版本。仅当序列可以是有序的时候实现它，例如对于列表或者元组。</li><li><strong>contains</strong>(self, item)：定义了调用in和not in来测试成员是否存在的时候所产生的行为。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python">Card = collections.namedtuple(<span class="hljs-string">&quot;Card&quot;</span>, [<span class="hljs-string">&quot;rank&quot;</span>, <span class="hljs-string">&quot;suit&quot;</span>])<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FrenchDeck</span>:<br>    ranks = [<span class="hljs-built_in">str</span>(n) <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">11</span>)] + <span class="hljs-built_in">list</span>(<span class="hljs-string">&quot;JQKA&quot;</span>)<br>    suits = <span class="hljs-string">&quot;spades diamonds clubs hearts&quot;</span>.split()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, cards: <span class="hljs-built_in">list</span>[Card] = <span class="hljs-literal">None</span></span>):<br>        <span class="hljs-keyword">if</span> cards <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            self._cards = cards<br>            <span class="hljs-keyword">return</span><br>        self._cards = [Card(rank, suit) <span class="hljs-keyword">for</span> suit <span class="hljs-keyword">in</span> self.suits <span class="hljs-keyword">for</span> rank <span class="hljs-keyword">in</span> self.ranks]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 集合相关操作，返回集合的长度len(FrenchDeck())</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;调用__len__方法获取集合的长度&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self._cards)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, position</span>):<br>        <span class="hljs-comment"># 仅仅实现了 __getitem__ 方法，这一摞牌就变成可迭代的了</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;调用__getitem__方法返回改索引或者切片位置的数据&quot;</span>)<br>        <span class="hljs-keyword">return</span> self._cards[position]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__setitem__</span>(<span class="hljs-params">self, position, value</span>):<br>        <span class="hljs-comment"># 通过obj[key]=value去修改容器内的对象</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;调用__setitem__方法设置索引或者切片位置<span class="hljs-subst">&#123;position&#125;</span>的数据为<span class="hljs-subst">&#123;value&#125;</span>&quot;</span>)<br>        self._cards[position] = value<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__delitem__</span>(<span class="hljs-params">self, position</span>):<br>        <span class="hljs-comment"># 通过del obj[key]来删除容器内的对象</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;调用__getitem__方法删除索引或者切片位置<span class="hljs-subst">&#123;position&#125;</span>的数据&quot;</span>)<br>        <span class="hljs-keyword">del</span> self._cards[position]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 通过for 循环来遍历容器</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;调用__iter__方法迭代数据&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">iter</span>(self._cards)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reversed__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 通过reverse(obj)来反转容器内的对象</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;调用___reversed__方法翻转内部cards&quot;</span>)<br>        <span class="hljs-keyword">return</span> FrenchDeck(<span class="hljs-built_in">reversed</span>(self._cards))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__contains__</span>(<span class="hljs-params">self, item</span>):  <br>        <span class="hljs-comment"># 通过 item in obj来判断元素是否在容器内</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;调用__contains__方法翻转判断是否包含&quot;</span>)<br>        <span class="hljs-keyword">return</span> item <span class="hljs-keyword">in</span> self._cards<br><br><br>frenchDeck = FrenchDeck()<br><span class="hljs-keyword">for</span> card <span class="hljs-keyword">in</span> frenchDeck:<br>    <span class="hljs-built_in">print</span>(card)<br><span class="hljs-built_in">print</span>(frenchDeck[<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(frenchDeck[<span class="hljs-number">1</span>::<span class="hljs-number">2</span>])<br>spades2 = Card(rank=<span class="hljs-string">&#x27;12&#x27;</span>, suit=<span class="hljs-string">&#x27;spades&#x27;</span>)<br><span class="hljs-built_in">print</span>(spades2 <span class="hljs-keyword">in</span> frenchDeck)<br></code></pre></td></tr></table></figure></li></ul><h2 id="类的表示"><a href="#类的表示" class="headerlink" title="类的表示"></a>类的表示</h2><p>类的表示相关的魔法方法主要有__str__、<strong>repr__和__bool</strong></p><ul><li>__str__主要是在打印对象print(obj)时，会隐式调用str(obj)，即调用类中的__str__方法；定了该方法就可以通过str(obj)来调用；</li><li>__repr__主要式在直接输出对象时的显示，会调用__repr__方法；定义了该方法就可以通过repr(obj)来调用。</li><li>__bool__主要表示对象作为判断条件时候反映的结果<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name: <span class="hljs-built_in">str</span>, age: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.name = name<br>        self.age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;调用了方法__str__&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;name=<span class="hljs-subst">&#123;self.name&#125;</span>,age=<span class="hljs-subst">&#123;self.age&#125;</span>&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;调用了方法__repr__&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;cls=<span class="hljs-subst">&#123;self.__class__.__name__&#125;</span>,id=<span class="hljs-subst">&#123;<span class="hljs-built_in">id</span>(self)&#125;</span>&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__bool__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;调用了方法__bool__&quot;</span>)<br>        <span class="hljs-keyword">if</span> self.name <span class="hljs-keyword">and</span> self.age &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br>user = User(<span class="hljs-string">&quot;zs&quot;</span>, <span class="hljs-number">23</span>)<br><span class="hljs-built_in">print</span>(user)<br>user<br><span class="hljs-keyword">if</span> user:<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="可调用对象"><a href="#可调用对象" class="headerlink" title="可调用对象"></a>可调用对象</h2><p>方法也是一种高等的对象。通过对对象实现__call__就可以实现像调用方法一样去调用类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name: <span class="hljs-built_in">str</span>, age: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.name = name<br>        self.age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, *args: <span class="hljs-type">Any</span>, **kwds: <span class="hljs-type">Any</span></span>) -&gt; <span class="hljs-type">Any</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;调用方法__call__,args=<span class="hljs-subst">&#123;args&#125;</span>,kwds=<span class="hljs-subst">&#123;kwds&#125;</span>&quot;</span>)<br><br><br>user = User(<span class="hljs-string">&quot;zs&quot;</span>, <span class="hljs-number">23</span>)<br><span class="hljs-comment"># 调用方法__call__,args=(&#x27;1&#x27;,),kwds=&#123;&#x27;a&#x27;: &#x27;a&#x27;&#125;</span><br>user(<span class="hljs-string">&quot;1&quot;</span>, a=<span class="hljs-string">&quot;a&quot;</span>)<br></code></pre></td></tr></table></figure><p>使用场景，通过__call__方法做装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,func</span>):<br>        self.func=func<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;this is call&#x27;</span>)<br>        <span class="hljs-keyword">return</span> self.func()<br><span class="hljs-comment"># 语法糖，相当于A(f)        </span><br><span class="hljs-meta">@A   </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hhh&#x27;</span>)<br>f()<br><span class="hljs-comment"># this is call</span><br><span class="hljs-comment"># hhh</span><br></code></pre></td></tr></table></figure><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>python中有一个pickle模块来对实例化对象进行序列化；如pickle.loads(obj),pickle.dumps(obj)等；在序列化的时候也是调用的内置魔法方法：</p><ul><li><strong>getstate</strong>():用于Python 对象的序列化,指定在序列化时将哪些信息记录下来</li><li><strong>setstate</strong>()：用于Python 对象的反序列化,指定在反序列化时指明如何利用信息<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name: <span class="hljs-built_in">str</span>, age: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.name = name<br>        self.age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getstate__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;调用方法__getstate__&quot;</span>)<br>        <span class="hljs-comment"># 序列化时返回的，即为在反序列化时传入的state</span><br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;name&quot;</span>: self.name, <span class="hljs-string">&quot;age&quot;</span>: self.age&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__setstate__</span>(<span class="hljs-params">self, state</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;调用方法__setstate__&quot;</span>)<br>        self.name = state[<span class="hljs-string">&quot;name&quot;</span>]<br>        self.age = <span class="hljs-number">300</span><br><br>user = User(<span class="hljs-string">&quot;zs&quot;</span>,<span class="hljs-string">&quot;23&quot;</span>)<br><span class="hljs-keyword">import</span> pickle<br>ser = pickle.dumps(user)<br>user1 = pickle.loads(ser)<br><span class="hljs-built_in">print</span>(user1.age)<br></code></pre></td></tr></table></figure></li></ul><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>我们可以控制怎么使用内置在函数isinstance()和issubclass()方法 反射定义魔术方法. 这个魔术方法是:</p><p><strong>instancecheck</strong>(self, instance)<br><strong>subclasscheck</strong>(self, subclass)</p><h2 id="比较运算"><a href="#比较运算" class="headerlink" title="比较运算"></a>比较运算</h2><p>通过定义各类比较、运算、类型相关的魔法方法，来实现对象之间的各类比较、运算等操作。这类魔法方法非常多，不一一展开，比如__eq__ 魔法方法，如果自定义的对象要实现&#x3D;&#x3D;的比较功能，则必须在类中实现__eq__：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Vector</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">str</span>, y: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.x = x<br>        self.y = y<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Vector(%r, %r)&quot;</span> % (self.x, self.y)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__bool__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bool</span>(self.x <span class="hljs-keyword">or</span> self.y)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__add__</span>(<span class="hljs-params">self, other: <span class="hljs-string">&quot;Vector&quot;</span></span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;加法：__add__&quot;</span>)<br>        <span class="hljs-keyword">return</span> Vector(self.x + other.x, self.y + other.y)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__sub__</span>(<span class="hljs-params">self, other: <span class="hljs-string">&quot;Vector&quot;</span></span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;减法：__sub__&quot;</span>)<br>        <span class="hljs-keyword">return</span> Vector(self.x - other.x, self.y - other.y)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__abs__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;绝对值：__abs__&quot;</span>)<br>        <span class="hljs-keyword">return</span> hypot(self.x, self.y)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__mul__</span>(<span class="hljs-params">self, scalar</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;乘法：__mul__&quot;</span>)<br>        <span class="hljs-keyword">return</span> Vector(self.x * scalar, self.y * scalar)<br><br><br>v1 = Vector(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>)<br>v2 = Vector(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>)<br>v2 - v1<br>v2 + v1<br>v2 * <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Flight Recorder</title>
    <link href="/2022/08/25/JFR/"/>
    <url>/2022/08/25/JFR/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Java Flight Recorder (JFR) 是一种用于收集、诊断和分析有关正在运行的 Java 应用程序的数据的工具。它集成到Java虚拟机（JVM）中，几乎不会造成性能开销，因此即使在负载较重的生产环境中也可以使用。使用默认设置时，性能影响不到百分之一。对于某些应用程序，它可能会低得多。但是，对于短时间运行的应用程序（不是在生产环境中运行的应用程序类型），相对启动和预热时间可能会更长，这可能会影响性能超过 1%。JFR 收集有关 JVM 以及在其上运行的 Java 应用程序的数据。</p></blockquote><p>我们都知道，黑匣子是用于记录飞机飞行和性能参数的仪器。在飞机出问题后，用于定位问题原因。JFR 就是 Java 的黑匣子。</p><p>JFR 是 Java Flight Record （Java飞行记录） 的缩写，是 JVM 内置的基于事件的JDK监控记录框架。这个起名就是参考了黑匣子对于飞机的作用，将Java进程比喻成飞机飞行。顾名思义这个记录主要用于问题定位和持续监控。最主要的是它从<code>JDK11</code>开始不再需要商业许可，只要是Hotspot的jdk都可以使用。</p><h3 id="JFR的优点"><a href="#JFR的优点" class="headerlink" title="JFR的优点"></a>JFR的优点</h3><ul><li><p>提供更好的数据： JFR 从运行时的各个部分捕获数据，并付出了巨大的努力来确保捕获的数据代表系统的真实状态。这种努力的例子包括最大限度地减少观察者效应，以及能够在安全点之外捕获样本。</p></li><li><p>提供更好的数据模型：数据模型是自描述的。录音无论大小，都包含理解数据所需的一切。</p></li><li><p>提供更好的性能：飞行记录仪引擎本身针对性能进行了优化，不会对应用的性能产生负面影响。一些数据实际上可以免费获得，因为它已经被运行时捕获。</p></li><li><p>允许第三方事件提供程序：一组 API 使 JFR 能够从第三方应用程序（包括 WebLogic Server 和其他 Oracle 产品）捕获数据。</p></li><li><p>降低总体拥有成本： JFR 使我们能够减少诊断和排除问题的时间，减少运营成本和业务中断，在出现问题时提供更快的解决时间，并提高系统效率。</p></li></ul><h3 id="JFR原理"><a href="#JFR原理" class="headerlink" title="JFR原理"></a>JFR原理</h3><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><p>Java Flight Recorder 收集有关事件的数据。事件在特定时间点发生在 JVM 或 Java 应用程序中。每个事件都有一个名称、一个时间戳和一个可选的有效负载。负载是与事件相关的数据，例如CPU使用率、事件前后的Java堆大小、锁持有者的线程ID等。</p><p>大多数事件还包含有关事件发生的线程、事件发生时的堆栈跟踪以及事件持续时间的信息。使用事件中可用的信息，我们可以重建 JVM 和 Java 应用程序的运行时详细信息。</p><p>JFR 收集有关三类事件的信息：</p><p>持续时间事件需要一些时间才能发生，并在完成时记录。我们可以设置持续时间事件的阈值，以便仅记录持续时间超过指定时间段的事件。这对于其他类型的事件是不可能的。即时事件立即发生，并立即记录。</p><p>定期记录样本事件（也称为可请求事件），以提供系统活动的样本。我们可以配置采样发生的频率。</p><p>JFR 以极高的细节水平监控运行系统。这会产生大量数据。为了使开销尽可能低，请将记录事件的类型限制为我们实际需要的类型。在大多数情况下，持续时间非常短的事件是没有意义的，因此将记录限制为持续时间超过某个有意义阈值的事件。</p><h4 id="事件流（k8s监控特别适合）"><a href="#事件流（k8s监控特别适合）" class="headerlink" title="事件流（k8s监控特别适合）"></a>事件流（k8s监控特别适合）</h4><p>JFR 从 JVM（通过内部 API）和 Java 应用程序（通过 JFR API）收集数据。该数据存储在小型线程本地缓冲区中，这些缓冲区会刷新到全局内存缓冲区中。然后全局内存缓冲区中的数据被写入磁盘。磁盘写入操作的成本很高，因此我们应该通过仔细选择启用记录的事件数据来尽量减少磁盘写入操作。二进制记录文件的格式非常紧凑，并且对于应用程序的读写来说非常高效。每个缓冲区之间没有信息重叠。特定的数据块可以在内存或磁盘上使用，但不能同时在两个地方使用。这具有以下含义：<br>如果发生电源故障，尚未刷新到磁盘缓冲区的数据将不可用。</p><p>JVM 崩溃可能会导致一些数据在核心文件（即内存缓冲区）中可用，而另一些数据则在磁盘缓冲区中可用。JFR 不提供合并此类缓冲区的功能。</p><p>在 JFR 收集的数据在我们使用之前，可能会有一小段延迟（例如，必须将其移动到不同的缓冲区才能使其可见，记录文件中的数据可能不按时间顺序排列，因为数据是从多个线程缓冲区以块的形式收集的。</p><p>在某些情况下，JVM 会删除事件顺序以确保它不会崩溃。任何无法足够快地写入磁盘的数据都会被丢弃。发生这种情况时，记录文件将包含受影响时间段的信息。此信息还将记录到 JVM 的日志记录工具中。</p><p>我们可以将 JFR 配置为不将任何数据写入磁盘。在此模式下，全局缓冲区充当循环缓冲区，当缓冲区已满时，最旧的数据将被丢弃。这种开销非常低的操作模式仍然可以收集根本原因问题分析所需的所有重要数据。由于最新数据始终在全局缓冲区中可用，因此只要操作或监视系统检测到问题，就可以按需将其写入磁盘。然而，在这种模式下，只有最后几分钟的数据可用，因此它只包含最近的事件。如果我们需要获取长时间内的完整操作历史记录，在定期将事件写入磁盘时使用默认模式。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>我们使用它可以在启动的时候通过jvm参数指定，也可以对已经启动的应用通过jcmd启动，也可以通过jmc的页面配置</p><h4 id="jvm-参数指定"><a href="#jvm-参数指定" class="headerlink" title="jvm 参数指定"></a>jvm 参数指定</h4><ul><li><p>idea 启动时候我们增加如下参数<br>-XX:+FlightRecorder 启动jfr<br>-XX:StartFlightRecording&#x3D;delay&#x3D;20s,duration&#x3D;60s,filename&#x3D;my.jfr 表示启动应用之后延迟20s，开始记录JFR信息60秒，数据保存在my.jfr中</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">-<span class="hljs-variable constant_">XX</span><span class="hljs-symbol">:+FlightRecorder</span> -<span class="hljs-variable constant_">XX</span><span class="hljs-symbol">:StartFlightRecording=delay=</span>20s,duration=60s,filename=my.jfr<br></code></pre></td></tr></table></figure></li><li><p>常用参数：<br>name&#x3D;name 指定记录的名称<br>dumponexit&#x3D;true&#x2F;false JVM推出时是否记录事件，默认为 false<br>settings&#x3D;path JFR 配置文件的路径<br>delay&#x3D;time 开始记录前的延时<br>duration&#x3D;time 记录持续时间<br>filename&#x3D;path 保存记录事件的文件路径<br>compress&#x3D;true&#x2F;false 是否使用 gzip 压缩记录数据，默认为 false<br>maxage&#x3D;time 环形缓存中保存记录的数据的最长时间<br>maxsize&#x3D;size 环形缓存占用的最大空间</p></li><li><p>idea控制台启动时候输出如下日志：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-comment">[0.198s]</span><span class="hljs-comment">[info]</span><span class="hljs-comment">[jfr,startup]</span> Started recording 1. The result will be written to:<br><span class="hljs-comment">[0.198s]</span><span class="hljs-comment">[info]</span><span class="hljs-comment">[jfr,startup]</span> <br><span class="hljs-comment">[0.198s]</span><span class="hljs-comment">[info]</span><span class="hljs-comment">[jfr,startup]</span> /Users/suaofeng/IdeaProjects/spring-boot-starter/my.jfr<br></code></pre></td></tr></table></figure></li></ul><h4 id="jcmd启动"><a href="#jcmd启动" class="headerlink" title="jcmd启动"></a>jcmd启动</h4><p>这种是可以在任意情况下使用的，即使你忘记了启动时启动jfr，通过它依旧可以给进程添加一个记录器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  spring-boot-starter git:(master) ✗ jps -l<br>57122 org.jetbrains.jps.cmdline.Launcher<br>57123 sample.mybatis.web.SampleWebApplication<br>94082 <br>55349 <br>56230 org.jetbrains.idea.maven.server.RemoteMavenServer36<br>57133 jdk.jcmd/sun.tools.jps.Jps<br>➜  spring-boot-starter git:(master) ✗ jcmd 57123 JFR.start name=jfr-test1 disk=true dumponexit=true filename=my2.jfr maxage=2m maxsize=128M <br>57123:<br>Started recording 2.<br><br>Use jcmd 57123 JFR.dump name=jfr-test1 to copy recording data to file.<br>➜  spring-boot-starter git:(master) ✗ jcmd 57123 JFR.check                                                                                  <br>57123:<br>Recording 2: name=jfr-test1 maxsize=128.0MB maxage=2m (running)<br>➜  spring-boot-starter git:(master) ✗ jcmd 57123 JFR.stop name=jfr-test1                                                                    <br>57123:<br>Stopped recording &quot;jfr-test1&quot;.<br></code></pre></td></tr></table></figure><h4 id="jmc启动"><a href="#jmc启动" class="headerlink" title="jmc启动"></a>jmc启动</h4><h4 id="Java-Mission-Control分析"><a href="#Java-Mission-Control分析" class="headerlink" title="Java Mission Control分析"></a><a href="https://jdk.java.net/jmc/8/">Java Mission Control分析</a></h4><h3 id="扩展JFR事件"><a href="#扩展JFR事件" class="headerlink" title="扩展JFR事件"></a>扩展JFR事件</h3><p>继承jdk.jfr.Event自定义事件:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Example</span> &#123;<br><br>  <span class="hljs-meta">@Label(&quot;Hello World&quot;)</span><br>  <span class="hljs-meta">@Description(&quot;Helps programmer getting started&quot;)</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Event</span> &#123;<br>      <span class="hljs-meta">@Label(&quot;Message&quot;)</span><br>      String message;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String... args)</span> &#123;<br>      <span class="hljs-type">HelloWorld</span> <span class="hljs-variable">event</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloWorld</span>();<br>      event.message = <span class="hljs-string">&quot;hello, world!&quot;</span>;<br>      event.commit();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以通过jfr命令配置事件。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>性能分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码美学</title>
    <link href="/2022/08/13/code_aesthetics/"/>
    <url>/2022/08/13/code_aesthetics/</url>
    
    <content type="html"><![CDATA[<p>最近我写的代码被同事code review时一直被吐槽，而我发现确实存在各种各样的问题，所以我打算把这些都给记录下来，以后不断改进</p><h3 id="1-正确的命名"><a href="#1-正确的命名" class="headerlink" title="1.正确的命名"></a>1.正确的命名</h3><blockquote><p>有一句老话说的好：计算机科学有两件难事，一是缓存失效，二是取名。我对第二点深有体会，所以我记录了一下取名的一些规范</p></blockquote><ul><li>尽量避免使用单个字母去给变量命名，这会使变量失去相关信息<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">sealed</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> <span class="hljs-keyword">permits</span> Student, Teacher &#123;<br>    <span class="hljs-comment">// before</span><br>    <span class="hljs-keyword">private</span> String n;<br>    <span class="hljs-keyword">private</span> String p;<br>    <span class="hljs-keyword">private</span> Integer a;<br>    <span class="hljs-comment">//after</span><br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-keyword">private</span> String passWord;<br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>绝对不要使用缩写，因为缩写的含义依赖于上下文，尽量避免让别人读代码时候依赖上下文<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> price_count_reader;    <span class="hljs-comment">// 无缩写</span><br><span class="hljs-type">int</span> num_errors;            <span class="hljs-comment">// &quot;num&quot; 是一个常见的写法</span><br><span class="hljs-type">int</span> num_dns_connections;   <span class="hljs-comment">// 人人都知道 &quot;DNS&quot; 是什么</span><br><br><span class="hljs-type">int</span> n;                     <span class="hljs-comment">// 毫无意义.</span><br><span class="hljs-type">int</span> nerr;                  <span class="hljs-comment">// 含糊不清的缩写.</span><br><span class="hljs-type">int</span> n_comp_conns;          <span class="hljs-comment">// 含糊不清的缩写.</span><br><span class="hljs-type">int</span> wgc_connections;       <span class="hljs-comment">// 只有贵团队知道是什么意思.</span><br><span class="hljs-type">int</span> pc_reader;             <span class="hljs-comment">// &quot;pc&quot; 有太多可能的解释了.</span><br><span class="hljs-type">int</span> cstmr_id;              <span class="hljs-comment">// 删减了若干字母.</span><br></code></pre></td></tr></table></figure></li><li>不要在命名中参杂变量类型信息，比如passWordStr、userNameStr<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">sealed</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> <span class="hljs-keyword">permits</span> Student, Teacher &#123;<br>    <span class="hljs-comment">// 前面都已经类型约束了为什么还要写xxxxStr？</span><br>    <span class="hljs-keyword">private</span> String userNameStr;<br>    <span class="hljs-keyword">private</span> String passWordStr;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>适当的给参数加上单位，比如下边两个哪个更好理解？<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">executor</span><span class="hljs-params">(<span class="hljs-type">int</span> delay)</span>&#123;<br>    <span class="hljs-comment">// TODO</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">executor</span><span class="hljs-params">(<span class="hljs-type">int</span> delaySeconds)</span>&#123;<br>    <span class="hljs-comment">// TODO</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>不要在基类的取名上使用BaseXXX，这样的名字并不好<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseTruck</span> &#123;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Truck</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseTruck</span> &#123;<br>    <span class="hljs-comment">// Truck总是让人一头雾水</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Truck</span> &#123;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TrailerTruck</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Truck</span> &#123;<br>    <span class="hljs-comment">// 更加的具体</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-勿写注释-不是指接口文档、方法文档等各种文档哦"><a href="#2-勿写注释-不是指接口文档、方法文档等各种文档哦" class="headerlink" title="2.勿写注释(不是指接口文档、方法文档等各种文档哦)"></a>2.勿写注释(不是指接口文档、方法文档等各种文档哦)</h3><p>这是一个充满争议的问题，其实大部分时间我更加认为注释是告诉我们为什么要这样做而不是解释这么做代表什么意思，其实我们按照上边命名约束做好命名之后就可以通过名称解释大部分代码了。最主要的是有时候我们需要更改代码，但是会发生代码更改了注释没更改的情况，这种情况一旦发生会让读代码的人很头疼的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 如果状态是5代表消息已经发送</span><br><span class="hljs-keyword">if</span> (status == <span class="hljs-number">5</span>) &#123;<br>    message.markSend();<br>&#125;<br><br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MESSAGE_SEND</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-keyword">if</span> (status == MESSAGE_SEND) &#123;  <span class="hljs-comment">// 这句代码读起来就像注释</span><br>    message.markSend();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 如果消息发送者是当前用户，同时消息是五分钟内发送的，或者当前用户是管理员就可以更新消息</span><br><span class="hljs-keyword">if</span> ((message.user.id == current_user.id &amp;&amp; ((System.currentTimeMillis() - message.delivered_time()) &lt; <span class="hljs-number">300000</span> )) or current_user.role == Role.Admin) &#123;<br>    message.update_text(text);<br>&#125;<br><br><span class="hljs-comment">// after</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">user_is_author</span> <span class="hljs-operator">=</span> message.user.id == current_user.id;<br><span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">FIVE_MINUTES</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">is_recent</span> <span class="hljs-operator">=</span> (System.currentTimeMillis() - message.delivered_time()) &lt; FIVE_MINUTES;<br><span class="hljs-keyword">if</span> ((user_is_author &amp;&amp; is_recent) || (current_user.role == Role.Admin)) &#123;<br>    message.update_text(text);<br>&#125;<br><br><span class="hljs-comment">// final</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">can_edit_message</span><span class="hljs-params">(Message message, User current_user)</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">user_is_author</span> <span class="hljs-operator">=</span> message.user.id == current_user.id;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">FIVE_MINUTES</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">is_recent</span> <span class="hljs-operator">=</span> (System.currentTimeMillis() - message.delivered_time()) &gt; FIVE_MINUTES;<br>    <span class="hljs-keyword">return</span> (user_is_author &amp;&amp; is_recent) || current_user.role == Role.Admin;<br>&#125;<br><br><span class="hljs-keyword">if</span> (can_edit_message(message, current_user)) &#123;<br>    message.update_text(text);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-不要过度嵌套"><a href="#3-不要过度嵌套" class="headerlink" title="3.不要过度嵌套"></a>3.不要过度嵌套</h3><p>if else作为每种编程语言都不可或缺的条件语句，我们在编程时会大量的用到。但if else一般不建议嵌套超过三层，如果一段代码存在过多的if else嵌套，代码的可读性就会急速下降，后期维护难度也大大提高。所以，不要超过三层！不要超过三层！！不要超过三层！！！<br>减少代码嵌套的手段一般是抽取和反转，反转是指提前返回，抽取往往指提炼方法。</p><ul><li>反转条件，将负面条件移到前面，使方法尽早返回<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(<span class="hljs-type">int</span> top, <span class="hljs-type">int</span> bottom)</span> &#123;<br>    <span class="hljs-keyword">if</span> (top &gt; bottom) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> bottom; number &lt;= top; number++) &#123;<br>            sum += number;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(<span class="hljs-type">int</span> top, <span class="hljs-type">int</span> bottom)</span> &#123;<br>    <span class="hljs-keyword">if</span> (top &lt; bottom) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> bottom; number &lt;= top; number++) &#123;<br>        sum += number;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerUser</span><span class="hljs-params">(String user)</span> &#123;<br>    String[] parts = user.split(<span class="hljs-string">&quot;:&quot;</span>);<br>    <span class="hljs-keyword">if</span> (parts.length == <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> Integer.parseInt(parts[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">if</span> (userId &gt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">userName</span> <span class="hljs-operator">=</span> parts[<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span> (users.containsKey(userId)) &#123;<br>                users.get(userId).setUserName(userName);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                users.put(userId, <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(userName));<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Invalid userId : &quot;</span> + userId);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Invalid user string: &quot;</span> + user);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 反转条件，正确的分支都下沉，异常的分支都上浮</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerUser</span><span class="hljs-params">(String user)</span> &#123;<br>    String[] parts = user.split(<span class="hljs-string">&quot;:&quot;</span>);<br>    <span class="hljs-keyword">if</span> (parts.length != <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Invalid user string: &quot;</span> + user);<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> Integer.parseInt(parts[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">if</span> (userId &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Invalid userId : &quot;</span> + userId);<br>    &#125;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">userName</span> <span class="hljs-operator">=</span> parts[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span> (users.containsKey(userId)) &#123;<br>        users.get(userId).setUserName(userName);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        users.put(userId, <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(userName));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>抽取方法，合理使用设计模式,以一个分享功能为例<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 分享类型</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ShareType</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">TYPE_LINK</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">TYPE_IMAGE</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">TYPE_TEXT</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">TYPE_IMAGE_TEXT</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-comment">// 分享元素</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ShareItem</span> &#123;<br>    <span class="hljs-type">int</span> type;<br>    String title;<br>    String content;<br>    String imagePath;<br>    String link;<br>&#125;<br><span class="hljs-comment">// 分享回调</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ShareListener</span> &#123;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">STATE_SUCC</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">STATE_FAIL</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCallback</span><span class="hljs-params">(<span class="hljs-type">int</span> state, String msg)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Share</span> &#123;<br>    <span class="hljs-comment">// 分享</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">share</span> <span class="hljs-params">(ShareItem item, ShareListener listener)</span> &#123;<br>        <span class="hljs-keyword">if</span> (item != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (item.type == ShareType.TYPE_LINK) &#123;<br>                <span class="hljs-comment">// 分享链接</span><br>                <span class="hljs-keyword">if</span> (Strings.isNotBlank(item.link) &amp;&amp; Strings.isNotBlank(item.content)) &#123;<br>                    doShareLink(item.link, item.title, item.content, listener);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (listener != <span class="hljs-literal">null</span>) &#123;<br>                        listener.onCallback(ShareListener.STATE_FAIL, <span class="hljs-string">&quot;分享信息不完整&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.type == ShareType.TYPE_IMAGE) &#123;<br>                <span class="hljs-comment">// 分享图片</span><br>                <span class="hljs-keyword">if</span> (Strings.isNotBlank(item.imagePath)) &#123;<br>                    doShareImage(item.imagePath, listener);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (listener != <span class="hljs-literal">null</span>) &#123;<br>                        listener.onCallback(ShareListener.STATE_FAIL, <span class="hljs-string">&quot;分享信息不完整&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.type == ShareType.TYPE_TEXT) &#123;<br>                <span class="hljs-comment">// 分享文本</span><br>                <span class="hljs-keyword">if</span> (Strings.isNotBlank(item.content)) &#123;<br>                    doShareText(item.content, listener);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (listener != <span class="hljs-literal">null</span>) &#123;<br>                        listener.onCallback(ShareListener.STATE_FAIL, <span class="hljs-string">&quot;分享信息不完整&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.type == ShareType.TYPE_IMAGE_TEXT) &#123;<br>                <span class="hljs-comment">// 分享图文</span><br>                <span class="hljs-keyword">if</span> (Strings.isNotBlank(item.imagePath) &amp;&amp; Strings.isNotBlank(item.content)) &#123;<br>                    doShareImageAndText(item.imagePath, item.content, listener);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (listener != <span class="hljs-literal">null</span>) &#123;<br>                        listener.onCallback(ShareListener.STATE_FAIL, <span class="hljs-string">&quot;分享信息不完整&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (listener != <span class="hljs-literal">null</span>) &#123;<br>                    listener.onCallback(ShareListener.STATE_FAIL, <span class="hljs-string">&quot;不支持的分享类型&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (listener != <span class="hljs-literal">null</span>) &#123;<br>                listener.onCallback(ShareListener.STATE_FAIL, <span class="hljs-string">&quot;ShareItem 不能为 null&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 具体分享功能实现</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doShareImageAndText</span><span class="hljs-params">(String imagePath, String content, ShareListener listener)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doShareText</span><span class="hljs-params">(String content, ShareListener listener)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doShareImage</span><span class="hljs-params">(String imagePath, ShareListener listener)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doShareLink</span><span class="hljs-params">(String link, String title, String content, ShareListener listener)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>第一步：接口分层，把接口分为外部和内部接口，所有空值判断放在外部接口完成，只处理一次；而内部接口传入的变量由外部接口保证不为空，从而减少空值判断<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">share</span> <span class="hljs-params">(ShareItem item, ShareListener listener)</span> &#123;<br>    <span class="hljs-keyword">if</span> (item == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (listener != <span class="hljs-literal">null</span>) &#123;<br>            listener.onCallback(ShareListener.STATE_FAIL, <span class="hljs-string">&quot;ShareItem 不能为 null&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (listener == <span class="hljs-literal">null</span>) &#123;<br>        listener = (state, msg) -&gt; log.debug(<span class="hljs-string">&quot;ShareListener is null&quot;</span>);<br>    &#125;<br>    shareImpl(item, listener);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shareImpl</span><span class="hljs-params">(ShareItem item, ShareListener listener)</span> &#123;<br>    <span class="hljs-keyword">if</span> (item.type == ShareType.TYPE_LINK) &#123;<br>        <span class="hljs-comment">// 分享链接</span><br>        <span class="hljs-keyword">if</span> (Strings.isNotBlank(item.link) &amp;&amp; Strings.isNotBlank(item.content)) &#123;<br>            doShareLink(item.link, item.title, item.content, listener);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (listener != <span class="hljs-literal">null</span>) &#123;<br>                listener.onCallback(ShareListener.STATE_FAIL, <span class="hljs-string">&quot;分享信息不完整&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.type == ShareType.TYPE_IMAGE) &#123;<br>        <span class="hljs-comment">// 分享图片</span><br>        <span class="hljs-keyword">if</span> (Strings.isNotBlank(item.imagePath)) &#123;<br>            doShareImage(item.imagePath, listener);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (listener != <span class="hljs-literal">null</span>) &#123;<br>                listener.onCallback(ShareListener.STATE_FAIL, <span class="hljs-string">&quot;分享信息不完整&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.type == ShareType.TYPE_TEXT) &#123;<br>        <span class="hljs-comment">// 分享文本</span><br>        <span class="hljs-keyword">if</span> (Strings.isNotBlank(item.content)) &#123;<br>            doShareText(item.content, listener);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (listener != <span class="hljs-literal">null</span>) &#123;<br>                listener.onCallback(ShareListener.STATE_FAIL, <span class="hljs-string">&quot;分享信息不完整&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.type == ShareType.TYPE_IMAGE_TEXT) &#123;<br>        <span class="hljs-comment">// 分享图文</span><br>        <span class="hljs-keyword">if</span> (Strings.isNotBlank(item.imagePath) &amp;&amp; Strings.isNotBlank(item.content)) &#123;<br>            doShareImageAndText(item.imagePath, item.content, listener);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (listener != <span class="hljs-literal">null</span>) &#123;<br>                listener.onCallback(ShareListener.STATE_FAIL, <span class="hljs-string">&quot;分享信息不完整&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (listener != <span class="hljs-literal">null</span>) &#123;<br>            listener.onCallback(ShareListener.STATE_FAIL, <span class="hljs-string">&quot;不支持的分享类型&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>第二步利用多态，每种业务单独处理，在接口不再做任何业务判断。把ShareItem抽象出来，作为基础类，然后针对每种业务各自实现其子类：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShareItem</span> &#123;<br>    <span class="hljs-type">int</span> type;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ShareItem</span><span class="hljs-params">(<span class="hljs-type">int</span> type)</span> &#123;<br>        <span class="hljs-built_in">this</span>.type = type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doShare</span><span class="hljs-params">(ShareListener listener)</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkShareItem</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ShareItem</span> &#123;<br>    String title;<br>    String content;<br>    String link;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkShareItem</span><span class="hljs-params">(String link, String title, String content)</span> &#123;<br>        <span class="hljs-built_in">super</span>(ShareType.TYPE_LINK);<br>        <span class="hljs-built_in">this</span>.title = Strings.isNotBlank(title) ? title : <span class="hljs-string">&quot;default&quot;</span>;<br>        <span class="hljs-built_in">this</span>.content = Strings.isNotBlank(content) ? content : <span class="hljs-string">&quot;default&quot;</span>;<br>        <span class="hljs-built_in">this</span>.link = Strings.isNotBlank(link) ? link : <span class="hljs-string">&quot;default&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doShare</span><span class="hljs-params">(ShareListener listener)</span> &#123;<br>        <span class="hljs-comment">// do share</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageShareItem</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ShareItem</span> &#123;<br>    String imagePath;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ImageShareItem</span><span class="hljs-params">(String imagePath)</span> &#123;<br>        <span class="hljs-built_in">super</span>(ShareType.TYPE_IMAGE);<br>        <span class="hljs-built_in">this</span>.imagePath = Strings.isNotBlank(imagePath) ? imagePath : <span class="hljs-string">&quot;default&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doShare</span><span class="hljs-params">(ShareListener listener)</span> &#123;<br>        <span class="hljs-comment">// do share</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TextShareItem</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ShareItem</span> &#123;<br>    String content;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TextShareItem</span><span class="hljs-params">(String content)</span> &#123;<br>        <span class="hljs-built_in">super</span>(ShareType.TYPE_TEXT);<br>        <span class="hljs-built_in">this</span>.content = Strings.isNotBlank(content) ? content : <span class="hljs-string">&quot;default&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doShare</span><span class="hljs-params">(ShareListener listener)</span> &#123;<br>        <span class="hljs-comment">// do share</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageTextShareItem</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ShareItem</span> &#123;<br>    String content;<br>    String imagePath;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ImageTextShareItem</span><span class="hljs-params">(String imagePath, String content)</span> &#123;<br>        <span class="hljs-built_in">super</span>(ShareType.TYPE_IMAGE_TEXT);<br>        <span class="hljs-built_in">this</span>.imagePath = Strings.isNotBlank(imagePath) ? imagePath : <span class="hljs-string">&quot;default&quot;</span>;<br>        <span class="hljs-built_in">this</span>.content = Strings.isNotBlank(content) ? content : <span class="hljs-string">&quot;default&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doShare</span><span class="hljs-params">(ShareListener listener)</span> &#123;<br>        <span class="hljs-comment">// do share</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">share</span> <span class="hljs-params">(ShareItem item, ShareListener listener)</span> &#123;<br>    <span class="hljs-keyword">if</span> (item == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (listener != <span class="hljs-literal">null</span>) &#123;<br>            listener.onCallback(ShareListener.STATE_FAIL, <span class="hljs-string">&quot;ShareItem 不能为 null&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (listener == <span class="hljs-literal">null</span>) &#123;<br>        listener = (state, msg) -&gt; log.debug(<span class="hljs-string">&quot;ShareListener is null&quot;</span>);<br>    &#125;<br>    item.doShare(listener);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="4-组合优于继承"><a href="#4-组合优于继承" class="headerlink" title="4.组合优于继承"></a>4.组合优于继承</h3><blockquote><p>面向对象编程中，有一条非常经典的设计原则，那就是：组合优于继承，多用组合少用继承。同样地，在《阿里巴巴Java开发手册》中有一条规定：谨慎使用继承的方式进行扩展，优先使用组合的方式实现。</p></blockquote><p>每个人在刚刚学习面向对象编程时都会觉得：继承（用来表示类之间的is-a关系）可以实现类的复用。所以，很多开发人员在需要复用一些代码的时候会很自然的使用类的继承的方式，因为书上就是这么写的，官方是这么教的，所以作为面向对象四大特性之一的继承，被我们作为解决代码复用的主要手段之一。虽然继承有诸多作用，但继承层次过深、过复杂，也会影响到代码的可维护性。下边我们就用一个测试来表现它带来的弊端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RecodeHashSet</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HashSet</span>&lt;E&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">addCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>        addCount += <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.add(e);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addAll</span><span class="hljs-params">(Collection&lt;? extends E&gt; c)</span> &#123;<br>        addCount += c.size();<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.addAll(c);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testRecodeSet</span><span class="hljs-params">()</span> &#123;<br>    RecodeHashSet&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RecodeHashSet</span>&lt;&gt;();<br>    set.addAll(List.of(<span class="hljs-string">&quot;zs&quot;</span>, <span class="hljs-string">&quot;ls&quot;</span>));<br>    <span class="hljs-keyword">assert</span> set.getAddCount() == <span class="hljs-number">2</span>;  <span class="hljs-comment">// 失败了，addCount == 4?</span><br>&#125;<br></code></pre></td></tr></table></figure><p>为什么会失败？让人很迷惑，探究源码之后我们发现addAll()会调用add()方法，因为会先调用自己的add()方法所以发生了重复计数，我们只需要把addAll()方法的计算给删除就好了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addAll</span><span class="hljs-params">(Collection&lt;? extends E&gt; c)</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">modified</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span> (E e : c)<br>        <span class="hljs-keyword">if</span> (add(e))<br>            modified = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> modified;<br>&#125;<br></code></pre></td></tr></table></figure><p>虽然删除之后问题解决了但是这样真的合适吗，是不是需要在我们极度熟悉父类源码的情况下才能发现问题，如果有一天HashSet的add()方法不再调用add()方法我们的RecodeSet是不是又会出现问题，所以为了避免父类的方法具体实现对我们带来影响我们应该使用组合而非继承。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForwardingSet</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Set</span>&lt;E&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Set&lt;E&gt; set;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> set.size();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> set.isEmpty();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">return</span> set.contains(o);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator&lt;E&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> set.iterator();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object[] toArray() &#123;<br>        <span class="hljs-keyword">return</span> set.toArray();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;<br>        <span class="hljs-keyword">return</span> set.toArray(a);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>        <span class="hljs-keyword">return</span> set.add(e);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">return</span> set.remove(o);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">containsAll</span><span class="hljs-params">(Collection&lt;?&gt; c)</span> &#123;<br>        <span class="hljs-keyword">return</span> set.containsAll(c);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addAll</span><span class="hljs-params">(Collection&lt;? extends E&gt; c)</span> &#123;<br>        <span class="hljs-keyword">return</span> set.addAll(c);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">retainAll</span><span class="hljs-params">(Collection&lt;?&gt; c)</span> &#123;<br>        <span class="hljs-keyword">return</span> set.retainAll(c);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">removeAll</span><span class="hljs-params">(Collection&lt;?&gt; c)</span> &#123;<br>        <span class="hljs-keyword">return</span> set.removeAll(c);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br>        set.clear();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RecodeHashSet</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ForwardingSet</span>&lt;E&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">addCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RecodeHashSet</span><span class="hljs-params">(Set&lt;E&gt; set)</span> &#123;<br>        <span class="hljs-built_in">super</span>(set);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>        addCount += <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.add(e);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addAll</span><span class="hljs-params">(Collection&lt;? extends E&gt; c)</span> &#123;<br>        addCount += c.size();<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.addAll(c);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testRecodeSet</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 不光能传入hashset，还能传入任何set类型，并不会让父类的行为影响我们</span><br>    RecodeHashSet&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RecodeHashSet</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;());<br>    set.addAll(List.of(<span class="hljs-string">&quot;zs&quot;</span>, <span class="hljs-string">&quot;ls&quot;</span>));<br>    <span class="hljs-keyword">assert</span> set.getAddCount() == <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-不要过度抽象"><a href="#5-不要过度抽象" class="headerlink" title="5.不要过度抽象"></a>5.不要过度抽象</h3><blockquote><p>我们提高代码复用常用的一个套路就是识别重复的代码进行抽象，然后继承，我们容易误入的一个怪圈就是抽象越多越好，但是过度抽象带给我们的就是耦合，我们再去清理对象关系的时候只能看到错综复杂的关系网，如果我们一直不抽象那么就会给我们带来一写重复代码，所以把我抽象的程度很重要</p></blockquote><p>比如我现在有一个游戏系统，我想把用户所有的数据保存到XML文件中，我就会写这样的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SaveGameData</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String fileName;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SaveGameData</span><span class="hljs-params">(String fileName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.fileName = fileName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(GameStat stat)</span> &#123;<br>        <span class="hljs-comment">// 1.生成一个格式化转化工具，将stat转xml</span><br>        <span class="hljs-comment">// 2.将xml转成字节流</span><br>        <span class="hljs-comment">// 3.写入文件</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> GameStat <span class="hljs-title function_">load</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1.读取文件</span><br>        <span class="hljs-comment">// 2.将字节流转成xml</span><br>        <span class="hljs-comment">// 3.将xml转成GameStat</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在我需要增加对json格式的支持，怎么办？改造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SaveGameData</span> &#123;<br><br>    <span class="hljs-keyword">private</span> SaveMode saveMode;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">SaveMode</span> &#123;<br>        XML,<br>        JSON;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SaveGameData</span><span class="hljs-params">(SaveMode saveMode)</span> &#123;<br>        <span class="hljs-built_in">this</span>.saveMode = saveMode;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(GameStat stat, String fileName)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.saveMode == SaveMode.XML) &#123;<br>            <span class="hljs-type">SaveXml</span> <span class="hljs-variable">saveXml</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SaveXml</span>(fileName);<br>            saveXml.save();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.saveMode == SaveMode.JSON) &#123;<br>            <span class="hljs-type">SaveJson</span> <span class="hljs-variable">saveJson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SaveJson</span>(fileName);<br>            saveJson.save();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> GameStat <span class="hljs-title function_">load</span><span class="hljs-params">(String fileName)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.saveMode == SaveMode.XML) &#123;<br>            <span class="hljs-type">SaveXml</span> <span class="hljs-variable">saveXml</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SaveXml</span>(fileName);<br>            <span class="hljs-keyword">return</span> saveXml.load();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.saveMode == SaveMode.JSON) &#123;<br>            <span class="hljs-type">SaveJson</span> <span class="hljs-variable">saveJson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SaveJson</span>(fileName);<br>            <span class="hljs-keyword">return</span> saveJson.load();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GameStat</span> &#123;<br>    <span class="hljs-keyword">private</span> Map&lt;String, String&gt; userData;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SaveXml</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SaveXml</span><span class="hljs-params">(String fileName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.fileName = fileName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> GameStat <span class="hljs-title function_">load</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SaveJson</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SaveJson</span><span class="hljs-params">(String fileName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.fileName = fileName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> GameStat <span class="hljs-title function_">load</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当我们改完之后我们编译器告诉我们有大量判断代码是重复，这个时候我们开始思考是否需要抽象？然后开始抽象得到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SaveGameData</span> &#123;<br><br>    <span class="hljs-keyword">private</span> SaveMode saveMode;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">SaveMode</span> &#123;<br>        XML,<br>        JSON;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SaveGameData</span><span class="hljs-params">(SaveMode saveMode)</span> &#123;<br>        <span class="hljs-built_in">this</span>.saveMode = saveMode;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(GameStat stat, String fileName)</span> &#123;<br>        <span class="hljs-type">FileSave</span> <span class="hljs-variable">save</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.saveMode == SaveMode.XML) &#123;<br>            save = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SaveXml</span>(fileName);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.saveMode == SaveMode.JSON) &#123;<br>            save = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SaveJson</span>(fileName);<br>        &#125;<br>        save.save(stat);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> GameStat <span class="hljs-title function_">load</span><span class="hljs-params">(String fileName)</span> &#123;<br>        <span class="hljs-type">FileSave</span> <span class="hljs-variable">load</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.saveMode == SaveMode.XML) &#123;<br>            load = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SaveXml</span>(fileName);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.saveMode == SaveMode.JSON) &#123;<br>            load = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SaveJson</span>(fileName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> load.load();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GameStat</span> &#123;<br>    <span class="hljs-keyword">private</span> Map&lt;String, String&gt; userData;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FileSave</span> &#123;<br>    <span class="hljs-keyword">private</span> String fileName;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FileSave</span><span class="hljs-params">(String fileName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.fileName = fileName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(GameStat stat)</span> &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> GameStat <span class="hljs-title function_">load</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SaveXml</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FileSave</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SaveXml</span><span class="hljs-params">(String fileName)</span> &#123;<br>        <span class="hljs-built_in">super</span>(fileName);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(GameStat stat)</span> &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> GameStat <span class="hljs-title function_">load</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SaveJson</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FileSave</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SaveJson</span><span class="hljs-params">(String fileName)</span> &#123;<br>        <span class="hljs-built_in">super</span>(fileName);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(GameStat stat)</span> &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> GameStat <span class="hljs-title function_">load</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看上去很完美，但是其实相比较写两个SaveXml和SaveJson不继承FileSave只是少写了一行private String fileName;而已，但是我们发现强行抽象之后其实它已经和文件有了强耦合，如果之后我们想保存到数据库或者S3或者远程服务器呢？而且我们的save方法与GameStat也绑定了，所以这并不是一个好的抽象，也不是我们真正需要的抽象，或许当我们需要保存更多介质更多保存的类型更多的时候我们可以抽象出来两个顶级接口，而不是现在就提早抽象了。</p>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>规范</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>好用但不为人知的API</title>
    <link href="/2022/08/12/%E5%A5%BD%E7%94%A8%E4%BD%86%E4%B8%8D%E4%B8%BA%E4%BA%BA%E7%9F%A5%E7%9A%84API/"/>
    <url>/2022/08/12/%E5%A5%BD%E7%94%A8%E4%BD%86%E4%B8%8D%E4%B8%BA%E4%BA%BA%E7%9F%A5%E7%9A%84API/</url>
    
    <content type="html"><![CDATA[<h3 id="1-好用的集合工厂方法"><a href="#1-好用的集合工厂方法" class="headerlink" title="1.好用的集合工厂方法"></a>1.好用的集合工厂方法</h3><ul><li>Collection.of()<br>这些集合的of方法让我们代码变得简单，当我们只想展示我们想要展示的列表或者东西不是很多的场景中使用，这些api都是不可变的，我们知道集合工具类已经帮我们提供了转换成不可变的集合的方法unmodifiableXXX，为什么我们还需要List.of？因为它总是会copy原来的list到新的list，它不是很有效率，</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCollectionOf</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 返回不可变的集合，且不能包含null，所以我们遍历使用的时候不用判断空值</span><br>    List&lt;String&gt; names = List.of(<span class="hljs-string">&quot;zs&quot;</span>, <span class="hljs-string">&quot;ls&quot;</span>, <span class="hljs-string">&quot;ww&quot;</span>);<br>    <span class="hljs-comment">// names.add(&quot;zl&quot;); error</span><br>    Set&lt;String&gt; of = Set.of(<span class="hljs-string">&quot;zl&quot;</span>, <span class="hljs-string">&quot;zq&quot;</span>);<br>    Map&lt;String, Integer&gt; users = Map.of(<span class="hljs-string">&quot;zs&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&quot;ls&quot;</span>, <span class="hljs-number">24</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testList</span><span class="hljs-params">()</span> &#123;<br>    ArrayList&lt;String&gt; nameList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;() &#123;&#123;<br>        add(<span class="hljs-string">&quot;zs&quot;</span>);<br>        add(<span class="hljs-string">&quot;ls&quot;</span>);<br>        add(<span class="hljs-string">&quot;ww&quot;</span>);<br>    &#125;&#125;;<br>    <span class="hljs-comment">// 转成不可修改list</span><br>    List&lt;String&gt; unmodifiableList = Collections.unmodifiableList(nameList);<br>    <span class="hljs-comment">// 不可修改</span><br>    <span class="hljs-comment">// unmodifiableList.add(&quot;zl&quot;);</span><br>    List&lt;String&gt; names = List.of(<span class="hljs-string">&quot;zs&quot;</span>, <span class="hljs-string">&quot;ls&quot;</span>, <span class="hljs-string">&quot;ww&quot;</span>);<br>    <span class="hljs-comment">// 不可修改</span><br>    <span class="hljs-comment">// names.add(&quot;zl&quot;);</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Stream.toList()<br>帮我们返回一个不可变的list，但它绝对不是collect(Collectors.toList())的替换，它有比collect(Collectors.toList())更好的优化，默认返回一个不可变的list，而前者返回的是一个arraylist</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testList</span><span class="hljs-params">()</span> &#123;<br>    List&lt;String&gt; names = List.of(<span class="hljs-string">&quot;zs&quot;</span>, <span class="hljs-string">&quot;ls&quot;</span>, <span class="hljs-string">&quot;ww&quot;</span>);<br>    List&lt;String&gt; collectList = names.stream().collect(Collectors.toList());<br>    collectList.add(<span class="hljs-string">&quot;zl&quot;</span>);<br>    List&lt;String&gt; toList = names.stream().toList();<br>    <span class="hljs-comment">// toList.add(&quot;zl&quot;);</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">default</span> List&lt;T&gt; <span class="hljs-title function_">toList</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> (List&lt;T&gt;) Collections.unmodifiableList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="hljs-built_in">this</span>.toArray())));<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>List.copyOf()<br>返回一个不可变的集合副本，并且不能接受集合中的空值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCopy</span><span class="hljs-params">()</span>&#123;<br>    List&lt;String&gt; names = Arrays.asList(<span class="hljs-string">&quot;zs&quot;</span>, <span class="hljs-string">&quot;ls&quot;</span>, <span class="hljs-string">&quot;ww&quot;</span>);<br>    List&lt;String&gt; names_bak = List.copyOf(names);<br>    <span class="hljs-comment">// names_bak.add(&quot;aaa&quot;);</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-HTTPclient"><a href="#2-HTTPclient" class="headerlink" title="2.HTTPclient"></a>2.HTTPclient</h3><p>有时候我们需要做一个小项目，为了尽量减小项目的体量和避免外部依赖的侵入性我们可以用过内置的api进行接口调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHttpClient</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">HttpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> HttpClient.newBuilder()<br>            .connectTimeout(Duration.ofSeconds(<span class="hljs-number">3</span>))<br>            .followRedirects(HttpClient.Redirect.ALWAYS)<br>            .build();<br>    <span class="hljs-type">HttpRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> HttpRequest.newBuilder()<br>            .GET().uri(URI.create(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>))<br>            .build();<br>    HttpResponse&lt;String&gt; response = client.send(request, HttpResponse.BodyHandlers.ofString());<br>    <span class="hljs-keyword">if</span> (response.statusCode() == <span class="hljs-number">200</span>) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> response.body();<br>        log.info(<span class="hljs-string">&quot;response: &#123;&#125;&quot;</span>, body);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        log.warn(<span class="hljs-string">&quot;request error, status code &#123;&#125;&quot;</span>, response.statusCode());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-null-in-java"><a href="#3-null-in-java" class="headerlink" title="3.null in java"></a>3.null in java</h3><blockquote><p>java的null变量是可以隐藏在任何类型背后的，而NullPointException是我们最讨厌的报错，所以我们需要在程序中花费大量的时间去进行null的判断，当方法返回null的时候我们都需要花费大量的精力去判断这是有意的缺失还是故障状态，所以我们应该善用jdk帮我们提供的api。</p></blockquote><ul><li><p>判断变量是否是null或者不是null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testNull</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (Objects.isNull(obj))&#123;<br>        log.warn(<span class="hljs-string">&quot;variable obj is null&quot;</span>);<br>    &#125;<br>    <span class="hljs-type">var</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    <span class="hljs-keyword">if</span> (Objects.nonNull(str))&#123;<br>        log.info(<span class="hljs-string">&quot;variable str not null&quot;</span>);<br>    &#125;<br>    Objects.requireNonNull(obj); <span class="hljs-comment">// throw  NullPointerException</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>当我们自己的方法有可能返回null值的时候我们应该使用Optional进行封装，这样在语义上就能立刻知道它有可能存在null的情况</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testOptional</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 创建</span><br>    Optional&lt;String&gt; aaa = Optional.of(<span class="hljs-string">&quot;aaa&quot;</span>);<br>    Optional&lt;String&gt; bbb = Optional.ofNullable(obj);<br>    <span class="hljs-comment">// 判断是否有值</span><br>    <span class="hljs-keyword">if</span> (aaa.isPresent()) &#123;<br>        log.info(<span class="hljs-string">&quot;aaa not null, value is &#123;&#125;&quot;</span>, aaa.get());<br>    &#125;<br>    <span class="hljs-comment">// 获取，如果是null返回default</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> Optional.ofNullable(obj).orElse(<span class="hljs-string">&quot;bbb&quot;</span>);<br>    log.info(<span class="hljs-string">&quot;default value is &#123;&#125;&quot;</span>, result);<br>    <span class="hljs-comment">// 获取，如果是null抛出指定异常</span><br>    result = bbb.orElseThrow(IllegalArgumentException::<span class="hljs-keyword">new</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-String类新方法"><a href="#4-String类新方法" class="headerlink" title="4.String类新方法"></a>4.String类新方法</h3><p>Java11之前我们想要对String进行一些判空操作的时候往往会引入Commons-lang3包，因为自带的String方法实在太少了，而Java11之后String有新增一些比较实用的方法</p><ul><li>isBlank():如果字符串为空或仅包含空格代码点，则此方法返回true。</li><li>lines():此方法返回从字符串中提取的行流，并用\ n，\ r等行终止符分隔。</li><li>strip()，stripLeading()，stripTrailing() ：这些方法用于从字符串中去除空格。 顾名思义， strip()将删除前导和尾随空格。 但是， stripLeading()将仅删除前导空格，而stripTrailing()将仅删除尾随空格</li><li>repeat（int n） ：此方法返回一个新字符串，该字符串的值是该字符串的重复n次的串联<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testStr</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">var</span> <span class="hljs-variable">blank</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;    &quot;</span>;<br>    <span class="hljs-keyword">assert</span> blank.isBlank();<br>    <span class="hljs-type">var</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot; hello world &quot;</span>;<br>    <span class="hljs-keyword">assert</span> Objects.equals(str.strip(), <span class="hljs-string">&quot;hello world&quot;</span>);<br>    <span class="hljs-keyword">assert</span> Objects.equals(str.stripLeading(), <span class="hljs-string">&quot;hello world &quot;</span>);<br>    <span class="hljs-keyword">assert</span> Objects.equals(str.stripTrailing(), <span class="hljs-string">&quot; hello world&quot;</span>);<br>    <span class="hljs-keyword">assert</span> Objects.equals(str.repeat(<span class="hljs-number">2</span>), <span class="hljs-string">&quot; hello world  hello world &quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="4-java基于值类型-Value-Types"><a href="#4-java基于值类型-Value-Types" class="headerlink" title="4.java基于值类型 (Value Types)"></a>4.java基于值类型 (Value Types)</h3><p>在Java11中明确定义了基于值的类型，值类型是一种数据类型，旨在按值传入和传出方法，并按值存储在数据结构中。<br>基于值的类是Container类，是基于值的类型的包装器，其中基于值的类的实例遵循以下原则（来自Java文档）：</p><ul><li>该类是final的（尽管可能包含对可变对象的引用），并且只定义final字段，并且不存在继承或者实现</li><li>具有equals，hashCode和toString的实现，这些实现仅根据实例的状态而不是根据其标识或任何其他对象或变量的状态进行计算</li><li>没有可访问的构造函数（或者明确该构造以后会删除，所以String不满足该条件），而是通过工厂方法实例化的，这些方法不承诺返回实例的身份</li><li>不使用身份敏感的操作，例如实例之间的引用相等（&#x3D;&#x3D;），而是基于equals被视为相等，因为上边不保证生成相同或者不同的实例</li><li>在相等时可以自由替换，这意味着在任何计算或方法调用中互换等于equals（）的任意两个实例x和y都不会在行为上产生任何可见的变化。</li><li>通过工厂方法获取的实例不保证每次都是不同的实例（integer就存在缓存-128-127之间只生成一份）</li></ul><p>显而易见Java语言直接支持的唯一值类型是八种原始类型和Optional</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Deprecated(since=&quot;9&quot;, forRemoval = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Integer</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>    <span class="hljs-built_in">this</span>.value = value;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">valueOf</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> NumberFormatException &#123;<br>    <span class="hljs-keyword">return</span> Integer.valueOf(parseInt(s, <span class="hljs-number">10</span>));<br>&#125;<br><br><span class="hljs-meta">@IntrinsicCandidate</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">valueOf</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>    <span class="hljs-keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)<br>        <span class="hljs-keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(i);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-AutoCloseable"><a href="#5-AutoCloseable" class="headerlink" title="5.AutoCloseable"></a>5.AutoCloseable</h3><p>我们都知道Java的Object对象有一个finalize方法，所以我们所有的对象都会存在该方法并且我们可以重写它(继承带来的弊端)。该方法会对象不存在引用的时候进行垃圾回收时执行一次，通常我们会实现该方法在该方法中释放IO或者链接或者资源，但是它不是一个线程安全的操作，而且我们永远也不知道它什么时候会被调用(假设在没有引用之前它先晋升到了老年代，那么资源就挂在了老年代，很恐怖的事情)，它也会给垃圾回收器带来负担，因为处理它会增加时间，也不能保证调用它的时候会不会出现线程安全问题。比如我们现在有一个对象它有一个ArrayList字段，我们想要在对象垃圾回收的时候释放list，我们都知道释放list需要调用list的clear方法，其实我们都知道ArrayList不是一个线程安全的集合，如果真的这样做很可能会出现并发修改的异常，而且因为是重写了finalize方法所以我们不可能对方法加锁，所以jdk官方也认识到了这一点在jdk9版本将该方法设置为过时的方法了，我们可以通过实现AutoCloseable接口通过try with语法去操作资源并保证资源释放。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataSourceConnection</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AutoCloseable</span>&#123;<br><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-keyword">private</span> String connection;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DataSourceConnection</span><span class="hljs-params">(String url)</span> &#123;<br>        <span class="hljs-built_in">this</span>.url = url;<br>        <span class="hljs-built_in">this</span>.connection = url + <span class="hljs-string">&quot;conn&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// TODO：</span><br>        log.info(<span class="hljs-string">&quot;关闭链接，释放资源====&gt;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testClose</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">DataSourceConnection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceConnection</span>(<span class="hljs-string">&quot;rul&quot;</span>)) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> connection.getConnection();<br>        <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span></span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-break-label"><a href="#6-break-label" class="headerlink" title="6.break label"></a>6.break label</h3><p>其实这个也不算是api了，它只能算是一个大家都没注意的语法特性，Java没有像c中的goto语句，想要实现任意的循环跳转就要使用label<br>我们都知道break和continue分别是结束当且循环和结束这一轮循环，如果是多层for循环嵌套的话就不能直接退出到指定的循环层级中，所以我们这里借助lable实现该功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; j++) &#123;<br>        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">3</span>) &#123;<br>            <span class="hljs-keyword">break</span>;  <span class="hljs-comment">// continue;</span><br>        &#125;<br>        System.out.print(<span class="hljs-string">&quot;&quot;</span> + i + j + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>    System.out.println();<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;This is end&quot;</span>);<br><span class="hljs-comment">//00 01 02</span><br><span class="hljs-comment">//10 11 12</span><br><span class="hljs-comment">//20 21 22</span><br><span class="hljs-comment">//30 31 32</span><br><span class="hljs-comment">//40 41 42</span><br><span class="hljs-comment">//This is end</span><br><br><span class="hljs-comment">//00 01 02 04</span><br><span class="hljs-comment">//10 11 12 14</span><br><span class="hljs-comment">//20 21 22 24</span><br><span class="hljs-comment">//30 31 32 34</span><br><span class="hljs-comment">//40 41 42 44</span><br><span class="hljs-comment">//This is end</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    Label_inner:    <span class="hljs-comment">// 其实默认break和continue就是在这层，所以写不写都一样</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; j++) &#123;<br>        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">3</span>) &#123;<br>            <span class="hljs-comment">//break Label_inner;</span><br>            <span class="hljs-keyword">continue</span> Label_inner;<br>        &#125;<br>        System.out.print(<span class="hljs-string">&quot;&quot;</span> + i + j + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>    System.out.println();<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;This is end&quot;</span>);<br><br><span class="hljs-comment">//00 01 02</span><br><span class="hljs-comment">//10 11 12</span><br><span class="hljs-comment">//20 21 22</span><br><span class="hljs-comment">//30 31 32</span><br><span class="hljs-comment">//40 41 42</span><br><span class="hljs-comment">//This is end</span><br><br><span class="hljs-comment">//00 01 02 04</span><br><span class="hljs-comment">//10 11 12 14</span><br><span class="hljs-comment">//20 21 22 24</span><br><span class="hljs-comment">//30 31 32 34</span><br><span class="hljs-comment">//40 41 42 44</span><br><span class="hljs-comment">//This is endinner</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">Label_outer:<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; j++) &#123;<br>        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">3</span>) &#123;<br>            <span class="hljs-keyword">break</span> Label_outer;<br>            <span class="hljs-comment">//continue Label_outer;</span><br>        &#125;<br>        System.out.print(<span class="hljs-string">&quot;&quot;</span> + i + j + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>    System.out.println();<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;This is end&quot;</span>);<br><br><span class="hljs-comment">// 00 01 02 This is end</span><br><span class="hljs-comment">// 00 01 02 10 11 12 20 21 22 30 31 32 40 41 42 This is end</span><br></code></pre></td></tr></table></figure><h3 id="7-Predicate断言型函数接口"><a href="#7-Predicate断言型函数接口" class="headerlink" title="7.Predicate断言型函数接口"></a>7.Predicate断言型函数接口</h3><p>Predicate我们会经常使用，因为Java8只从有了stream流之后我们经常使用filter方法进行集合的过滤筛选，有很多内置api帮我们提供了方法引用符合我们使用场景的时候只需引用就行，但是因为是方法引用所以它不支持非（操作）或者组合操作，这个时候就可以使用Predicate内置的方法帮我们进行增强了，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPredicate</span><span class="hljs-params">()</span> &#123;<br>    List&lt;List&lt;?&gt;&gt; list1 = List.of(List.of(<span class="hljs-string">&quot;zz&quot;</span>), Collections.emptyList());<br>    <span class="hljs-comment">// 我们想要过滤list内部不为空的集合</span><br>    List&lt;List&lt;?&gt;&gt; list2 = list1.stream().filter(Predicate.not(List::isEmpty)).toList();<br>    System.out.println(list2);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPredicate</span><span class="hljs-params">()</span> &#123;<br>    List&lt;String&gt; names = List.of(<span class="hljs-string">&quot;zs&quot;</span>, <span class="hljs-string">&quot;ls&quot;</span>, <span class="hljs-string">&quot;ww&quot;</span>, <span class="hljs-string">&quot;lxy&quot;</span>, <span class="hljs-string">&quot;ywj&quot;</span>, <span class="hljs-string">&quot;suaf&quot;</span>);<br>    <span class="hljs-comment">//    过滤名字长度小于等于3，且不以W开头的</span><br>    List&lt;String&gt; names2 = names.stream().filter(s -&gt; &#123;<br>        <span class="hljs-keyword">if</span> (!s.isBlank() &amp;&amp; s.length() &lt;= <span class="hljs-number">3</span> &amp;&amp; !s.startsWith(<span class="hljs-string">&quot;w&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;).toList();<br>    Predicate&lt;String&gt; isNotStartsWith = s -&gt; !s.startsWith(<span class="hljs-string">&quot;w&quot;</span>);<br>    Predicate&lt;String&gt; shorterThan4 = s -&gt; s.length() &lt;= <span class="hljs-number">3</span>;<br>    List&lt;String&gt; names3 = names.stream().filter(Predicate.not(String::isBlank).and(isNotStartsWith).and(shorterThan4)).toList();<br>    <span class="hljs-keyword">assert</span> names3.equals(names2);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-Comparator比较器"><a href="#8-Comparator比较器" class="headerlink" title="8.Comparator比较器"></a>8.Comparator比较器</h3><p>Comparator比较器我们会经常使用，因为Java8自从有了stream流之后我们经常使用sort方法进行集合的排序，有很多内置api帮我们提供了默认的比较方法，在符合我们使用场景的时候只需使用方法引用就行，但是因为是方法引用所以它不支持倒序或者多值比较什么的，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testComparable</span><span class="hljs-params">()</span> &#123;<br>    List&lt;String&gt; names = Arrays.asList(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-string">&quot;lisi&quot;</span>, <span class="hljs-string">&quot;wangwu&quot;</span>, <span class="hljs-string">&quot;zhaoliu&quot;</span>, <span class="hljs-string">&quot;zhouqi&quot;</span>);<br>    <span class="hljs-comment">// 我不认为这是一个很好的方法，也许有一个不接受任何参数的重载方法更好</span><br>    <span class="hljs-comment">// 如果指定的比较器是 null ，则此列表中的所有元素都必须实现接口Comparable并且应使用元素的自然顺序，string正好实现了Comparable</span><br>    names.sort(<span class="hljs-literal">null</span>);<br>    names.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testComparator</span><span class="hljs-params">()</span> &#123;<br>    List&lt;String&gt; names = Arrays.asList(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-string">&quot;lisi&quot;</span>, <span class="hljs-string">&quot;wangwu&quot;</span>, <span class="hljs-string">&quot;zhaoliu&quot;</span>, <span class="hljs-string">&quot;zhouqi&quot;</span>);<br>    <span class="hljs-comment">// 按照字符串长度排序</span><br>    <span class="hljs-comment">// 书写法则：if o1 &gt; o2 then (o1, o2) &gt; 0</span><br>    <span class="hljs-comment">// 书写法则：if o1 &lt; o2 then (o1, o2) &lt; 0</span><br>    <span class="hljs-comment">// 书写法则：if o1 = o2 then (o1, o2) = 0</span><br>    <span class="hljs-comment">// Comparator&lt;String&gt; comparator = ((o1, o2) -&gt; o1.length() - o2.length();</span><br>    Comparator&lt;String&gt; comparator = Comparator.comparingInt(String::length);<br>    names.sort(comparator);<br>    names.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testComparator</span><span class="hljs-params">()</span> &#123;<br>    List&lt;Integer&gt; numbers = List.of(<span class="hljs-number">123</span>, <span class="hljs-number">21</span>, <span class="hljs-number">32</span>, <span class="hljs-number">125</span>, <span class="hljs-number">1</span>, <span class="hljs-number">321</span>);<br>    <span class="hljs-comment">// 升序</span><br>    List&lt;Integer&gt; list = numbers.stream().sorted(Integer::compare).toList();<br>    System.out.println(<span class="hljs-string">&quot;list = &quot;</span> + list);<br>    <span class="hljs-comment">// 降序</span><br>    Comparator&lt;Integer&gt; comparator = Integer::compare;<br>    List&lt;Integer&gt; list2 = numbers.stream().sorted(comparator.reversed()).toList();<br>    System.out.println(<span class="hljs-string">&quot;list2 = &quot;</span> + list2);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testComparator</span><span class="hljs-params">()</span> &#123;<br>    List&lt;String&gt; names = List.of(<span class="hljs-string">&quot;zs&quot;</span>, <span class="hljs-string">&quot;ls&quot;</span>, <span class="hljs-string">&quot;ww&quot;</span>, <span class="hljs-string">&quot;lxy&quot;</span>, <span class="hljs-string">&quot;ywj&quot;</span>, <span class="hljs-string">&quot;suaf&quot;</span>);<br>    <span class="hljs-comment">//  按照名字字符长短排序</span><br>    Comparator&lt;String&gt; comparing = Comparator.comparing(String::length);<br>    List&lt;String&gt; list1 = names.stream().sorted(comparing).toList();<br>    List&lt;String&gt; list2 = names.stream().sorted(comparing.reversed()).toList();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testComparator23</span><span class="hljs-params">()</span> &#123;<br>    ArrayList&lt;User&gt; users = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;() &#123;&#123;<br>        add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;zs&quot;</span>, <span class="hljs-number">23</span>));<br>        add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;ls&quot;</span>, <span class="hljs-number">24</span>));<br>        add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;ww&quot;</span>, <span class="hljs-number">25</span>));<br>        add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;zl&quot;</span>, <span class="hljs-number">26</span>));<br>        add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;zqq&quot;</span>, <span class="hljs-number">26</span>));<br>        add(<span class="hljs-literal">null</span>);<br>    &#125;&#125;;<br>    Comparator&lt;User&gt; comparatorByAge = Comparator.comparing(User::getAge);<br>    Comparator&lt;User&gt; comparatorByName = Comparator.comparing(User::getUserName);<br>    <span class="hljs-comment">// 先按照age排序。再按照name排序</span><br>    List&lt;User&gt; list1 = users.stream().sorted(Comparator.nullsLast(comparatorByAge.thenComparing(comparatorByName))).toList();<br>    List&lt;User&gt; list2 = users.stream().sorted(Comparator.nullsFirst(comparatorByAge.thenComparing(comparatorByName).reversed())).toList();<br>    System.out.println(<span class="hljs-string">&quot;list1 = &quot;</span> + list1);<br>    System.out.println(<span class="hljs-string">&quot;list2 = &quot;</span> + list2);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-Java-shebang"><a href="#9-Java-shebang" class="headerlink" title="9.Java shebang"></a>9.Java shebang</h3><p>我们一直羡慕python作为脚本语言的时候能直接执行，而一个Java代码你需要先使用Javac编译成class文件，然后再使用Java命令运行，这是一个简单Java脚本最繁琐的地方，好在Java推出了shebang行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"># !/path/you java path     --source <span class="hljs-number">17</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./HelloWorld<br></code></pre></td></tr></table></figure><h3 id="10-string相关"><a href="#10-string相关" class="headerlink" title="10.string相关"></a>10.string相关</h3><p>字符串jdk也一直在优化，曾经不同版本的字符串可能会有点性能差异，但是现在经过优化之后好了很多但是我们还是应该注意使用的时候按照规范使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testStringJoin</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    List&lt;String&gt; string = List.of(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">join</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (String s : string) &#123;<br>        <span class="hljs-comment">// 永远不要在循环内进行这样的字符串拼接，会隐士的创建很多StringBuilder对象</span><br>        join += s;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;join = &quot;</span> + join);<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    <span class="hljs-keyword">for</span> (String s : string) &#123;<br>        sb.append(s);<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;sb.toString() = &quot;</span> + sb);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testNumber2Str</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">num_str</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> + <span class="hljs-string">&quot;&quot;</span>;  <span class="hljs-comment">// 永远不要这样，虽然java8之前这样是最快的</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">num_str2</span> <span class="hljs-operator">=</span> num2.toString();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">num_str1</span> <span class="hljs-operator">=</span> Integer.toString(num);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jdk8之后各版本常用新特性</title>
    <link href="/2022/08/11/jdk8%E4%B9%8B%E5%90%8E%E5%90%84%E7%89%88%E6%9C%AC%E5%B8%B8%E7%94%A8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <url>/2022/08/11/jdk8%E4%B9%8B%E5%90%8E%E5%90%84%E7%89%88%E6%9C%AC%E5%B8%B8%E7%94%A8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="JDK10-var-关键字"><a href="#JDK10-var-关键字" class="headerlink" title="JDK10 var 关键字"></a>JDK10 var 关键字</h2><blockquote><p><a href="https://openjdk.org/jeps/286">REP-286</a> 增强 Java 语言，将类型推断扩展到带有初始值设定项的局部变量声明。我们寻求通过减少与编写 Java 代码相关的仪式改善开发人员的体验，同时通过允许开发人员省略通常不必要的局部变量类型的清单声明来保持 Java 对静态类型安全的承诺​查询详情</p></blockquote><p>局部变量推断类型，作用在局部代码块中，通过编译器的类型推断来避免频繁的定义一些类型，其目标是作用在局部变量、lambda表达式、for循环中声明降低 Java 代码编写和阅的繁琐程度(不用左右复制变量的类型信息真的很爽)，但是var关键字使用不当也会降低其代码的可读性，所以还是谨慎使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testVar</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 立即声明且初始话的时候才能使用var变量</span><br>    <span class="hljs-type">var</span> <span class="hljs-variable">users</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">assert</span> users <span class="hljs-keyword">instanceof</span> List;<br>    users.add(<span class="hljs-string">&quot;zs&quot;</span>);<br>    users.add(<span class="hljs-string">&quot;ls&quot;</span>);<br>    users.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p>switch-case语法一直都有，但是过去的switch不能判断基本数据类型、枚举、null，分支之后也不支持代码块，但是从JDK12开始对其进行了大的增强，一直延续到现在还没有停止，本文使用环境为JDK17，所以还有19上新增加的case类型判断没有测试</p><ul><li><p>基本数据类型的支持和yield关键字的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSwitch</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">var</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-type">var</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">switch</span> (number) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">yield</span>  <span class="hljs-string">&quot;zero&quot;</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;one&quot;</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;two&quot;</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;three&quot;</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;未知&quot;</span>;<br>    &#125;;<br>    log.info(<span class="hljs-string">&quot;The English representation of &#123;&#125; is &#123;&#125;&quot;</span>, number, result);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>枚举的支持与case多值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 枚举</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">DAYS</span> &#123;<br>    MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSwitch2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">var</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> DAYS.SUNDAY;<br>    <span class="hljs-type">var</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">switch</span> (day) &#123;<br>        <span class="hljs-keyword">case</span> MONDAY:<br>            <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;Weekday&quot;</span>;<br>        <span class="hljs-keyword">case</span> TUESDAY:<br>            <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;Weekday&quot;</span>;<br>        <span class="hljs-keyword">case</span> WEDNESDAY:<br>            <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;Weekday&quot;</span>;<br>        <span class="hljs-keyword">case</span> THURSDAY:<br>            <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;Weekday&quot;</span>;<br>        <span class="hljs-keyword">case</span> FRIDAY:<br>            <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;Weekday&quot;</span>;<br>        <span class="hljs-keyword">case</span> SATURDAY:<br>            <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;Weekend&quot;</span>;<br>        <span class="hljs-keyword">case</span> SUNDAY:<br>            <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;Weekend&quot;</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;Unknown&quot;</span>;<br>    &#125;;<br>    log.info(<span class="hljs-string">&quot;&#123;&#125; is &#123;&#125;&quot;</span>, day, type);<br>&#125;<br><br><span class="hljs-comment">// new </span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSwitch3</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">var</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> DAYS.MONDAY;<br>    <span class="hljs-type">var</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">switch</span> (day) &#123;<br>        <span class="hljs-comment">// case 多值</span><br>        <span class="hljs-keyword">case</span> MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY:<br>            <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;Weekday&quot;</span>;<br>        <span class="hljs-keyword">case</span> SATURDAY, SUNDAY:<br>            <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;Weekend&quot;</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;Unknown&quot;</span>;<br>    &#125;;<br>    log.info(<span class="hljs-string">&quot;&#123;&#125; is &#123;&#125;&quot;</span>, day, type);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>lambda表达式(代码块)支持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSwitch4</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">var</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> DAYS.MONDAY;<br>    <span class="hljs-type">var</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">switch</span> (day) &#123;<br>        <span class="hljs-keyword">case</span> MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY -&gt; &#123;<br>            log.info(<span class="hljs-string">&quot;Weekday!!!&quot;</span>);<br>            <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;Weekday&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">case</span> SATURDAY, SUNDAY -&gt; &#123;<br>            log.info(<span class="hljs-string">&quot;Weekend!!!&quot;</span>);<br>            <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;Weekend&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">default</span> -&gt; &#123;<br>            log.info(<span class="hljs-string">&quot;Unknown!!!&quot;</span>);<br>            <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;Unknown&quot;</span>;<br>        &#125;<br>    &#125;;<br>    log.info(<span class="hljs-string">&quot;&#123;&#125; is &#123;&#125;&quot;</span>, day, type);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="JDK15-text-block"><a href="#JDK15-text-block" class="headerlink" title="JDK15 text block"></a>JDK15 text block</h2><blockquote><p><a href="https://openjdk.org/jeps/378">JEP 378</a> 将文本块添加到 Java 语言中。文本块是多行字符串文字，它不需要大多数转义序列，以可预测的方式自动格式化字符串，并让开发人员在需要时控制格式。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTextBlock</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">var</span> <span class="hljs-variable">html</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&lt;html&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &lt;body&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        &lt;p&gt;%s&lt;/p&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &lt;/body&gt;\n&quot;</span> +<br>            <span class="hljs-string">&quot;&lt;/html&gt;\n&quot;</span>;<br>    log.info(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, html);<br>    log.info(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, html.formatted(<span class="hljs-string">&quot;hello world!&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JDK16-instanceof"><a href="#JDK16-instanceof" class="headerlink" title="JDK16 instanceof"></a>JDK16 instanceof</h2><blockquote><p><a href="https://openjdk.org/jeps/394">JEP 394</a>通过instanceof 运算符的模式匹配增强Java 编程语言。模式匹配允许更简洁、更安全地表达程序中的通用逻辑，即从对象中条件提取组件。</p></blockquote><p>经常会遇到我得到了一个Object对象，但是我知道实际上它是一个String对象，这个时候如果我想使用该对象的方法那我就必须使用强制转换，但是强制转换之前我一般都会进行一次instanceof检查它的正确类型避免强制类型转换报错，就像下边这样，这样看上去就像是告诉编译器两次它是String类型，看起来就很愚蠢</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> String) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> (String) obj;    <span class="hljs-comment">// grr...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>还好在JDK16引入了全新的instanceof写法，帮我们解决了这个愚蠢的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInstanceOf</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">names</span> <span class="hljs-operator">=</span> List.of(<span class="hljs-string">&quot;zs&quot;</span>);<br>    <span class="hljs-keyword">if</span> (names <span class="hljs-keyword">instanceof</span> List list) &#123;<br>        list.forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JDK16-recode-关键字"><a href="#JDK16-recode-关键字" class="headerlink" title="JDK16 recode 关键字"></a>JDK16 recode 关键字</h2><blockquote><p> <a href="https://openjdk.org/jeps/395">JEP 395</a>使用recode增强 Java 编程语言，记录是充当不可变数据的透明载体的类。记录可以被认为是名义元组。<br>人们一直认为Java是一门比较繁杂的语言，有时候仅仅是想创建一个需要返回给前端的VO都要写很长的代码，在Lombok出现之后极大了减少了必须由我们所写的重复的代码。在recode出现之后这类情况大有改善。我们以一个具有横纵坐标的Ponit为例看下recode究竟帮我们减轻了多少负担</p></blockquote><ul><li><p>before</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> x;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> y;<br><br>    Point(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y) &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>        <span class="hljs-built_in">this</span>.y = y;<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">x</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> x; &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">y</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> y; &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!(o <span class="hljs-keyword">instanceof</span> Point)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">Point</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> (Point) o;<br>        <span class="hljs-keyword">return</span> other.x == x &amp;&amp; other.y == y;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(x, y);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;Point[x=%d, y=%d]&quot;</span>, x, y);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>now</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">record</span> <span class="hljs-title class_">Point</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123; &#125;<br><br><span class="hljs-comment">// 查看编译后的文件可以发现其实编译器帮我自动生成了规范的构造方法，如下</span><br><span class="hljs-comment">// 因为它代表是一个数据载体，所以它没有set方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">Point</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Point</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>        <span class="hljs-built_in">this</span>.y = y;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">x</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.x;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">y</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.y;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然我们如果想验证他的一些字段也可以通过一个“紧凑的规范构造函数”，用于验证其隐式形式参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">Point</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>    <span class="hljs-keyword">public</span> Point &#123;<br>        <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span> || y &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;参数 &#x27;x&#x27; &#x27;y&#x27; 不能小于0&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 编译之后得到</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">Point</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Point</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">0</span> &amp;&amp; y &gt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">this</span>.x = x;<br>            <span class="hljs-built_in">this</span>.y = y;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;参数 &#x27;x&#x27; &#x27;y&#x27; 不能小于0&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">x</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.x;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">y</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.y;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>同样，我们也能重写它的get方法在获取的时候验证其参数是否合法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">Point</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>    <span class="hljs-keyword">public</span> Point &#123;<br>        <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span> || y &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;参数 &#x27;x&#x27; &#x27;y&#x27; 不能小于0&quot;</span>);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">x</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Math.max(x, <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">y</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Math.max(y, <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="JDK15密封类"><a href="#JDK15密封类" class="headerlink" title="JDK15密封类"></a>JDK15密封类</h2><blockquote><p>在Java 15之前，Java认为”代码重用”始终是一个终极目标，所以，一个类和接口都可以被任意的类实现或继承。但是，在很多场景中，这样做是容易造成错误的，而且也不符合物理世界的真实规律。而密封类（Sealed Classes）是一种限制继承的新机制，通过使用关键字sealed修饰类，可以将一个类限制为只能被特定的一些类继承。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义了一个密闭类People，它规定只能被Student和Teacher两个类继承</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">sealed</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> <span class="hljs-keyword">permits</span> Student, Teacher &#123;<br>&#125;<br><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">People</span> &#123;<br><br>&#125;<br><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">People</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义了一个密闭接口Service，它规定只能被StudentService和TeacherService两个类实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">sealed</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Service</span> <span class="hljs-keyword">permits</span> StudentService,TeacherService &#123;<br>&#125;<br><br><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Service</span> &#123;<br><br>&#125;<br><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TeacherService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Service</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring配置文件加密</title>
    <link href="/2022/08/10/spring%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8A%A0%E5%AF%86/"/>
    <url>/2022/08/10/spring%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8A%A0%E5%AF%86/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在配置文件中，往往会有密码，例如mysql，redis等。如果直接将密码和url以明文的形式写在项目中，就会有泄露的风险。所以这里使用jasypt，用于配置文件密。</p></blockquote><h2 id="1-引入依赖-gradle-maven"><a href="#1-引入依赖-gradle-maven" class="headerlink" title="1.引入依赖(gradle|maven)"></a>1.引入依赖(gradle|maven)</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs groovy">implementation <span class="hljs-string">&#x27;com.github.ulisesbocchio:jasypt-spring-boot-starter:2.1.0&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.ulisesbocchio<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jasypt-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-配置密钥-二选一，但是更建议通过参数-因为参数能取环境变量中的值，这样只能账户的拥有者能看到密钥，更加安全"><a href="#2-配置密钥-二选一，但是更建议通过参数-因为参数能取环境变量中的值，这样只能账户的拥有者能看到密钥，更加安全" class="headerlink" title="2.配置密钥(二选一，但是更建议通过参数,因为参数能取环境变量中的值，这样只能账户的拥有者能看到密钥，更加安全)"></a>2.配置密钥(二选一，但是更建议通过参数,因为参数能取环境变量中的值，这样只能账户的拥有者能看到密钥，更加安全)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># java 启动时通过添加参数方式指定</span><br>-Djasypt.encryptor.password=vegetablest<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># spring boot中配置</span><br><span class="hljs-attr">jasypt:</span><br>  <span class="hljs-attr">encryptor:</span><br>    <span class="hljs-comment"># 指定加密密钥，生产环境请放到启动参数里面</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">vegetablest</span><br>    <span class="hljs-comment"># 指定解密算法，需要和加密时使用的算法一致</span><br>    <span class="hljs-comment"># algorithm: PBEWithMD5AndDES</span><br>    <span class="hljs-comment"># 指定initialization vector类型</span><br>    <span class="hljs-comment"># iv-generator-classname: org.jasypt.iv.NoIvGenerator</span><br></code></pre></td></tr></table></figure><h2 id="3-数据加密"><a href="#3-数据加密" class="headerlink" title="3.数据加密"></a>3.数据加密</h2><ul><li>命令式<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"># cd  ~/.gradle/caches/modules-<span class="hljs-number">2</span>/files-<span class="hljs-number">2.1</span>/org.jasypt/jasypt/<span class="hljs-number">1.9</span><span class="hljs-number">.2</span>/<br># java -cp ./jasypt-<span class="hljs-number">1.9</span><span class="hljs-number">.2</span>.jar org.jasypt.intf.cli.JasyptPBEStringEncryptionCLI algorithm=PBEWithMD5AndDES password=<span class="hljs-string">&quot;vegetablest&quot;</span> input=your password<br></code></pre></td></tr></table></figure></li><li>插件式<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"># 如果对开发者可信，可以通过Maven插件进行<br> <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.ulisesbocchio<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jasypt-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span>file:src/main/resources/application.yml<span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br># 用DEC()包裹需要加密的字符<br># mvn jasypt:encrypt -Djasypt.encryptor.password=&quot;password&quot;<br></code></pre></td></tr></table></figure></li><li>编程式<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PasswdTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StringEncryptor encryptor;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">esHost</span> <span class="hljs-operator">=</span> encryptor.encrypt(<span class="hljs-string">&quot;https://192.168.2.10:9200&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;esHost = &quot;</span> + <span class="hljs-string">&quot;ENC(&quot;</span> + esHost + <span class="hljs-string">&quot;)&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h2 id="4-使用"><a href="#4-使用" class="headerlink" title="4.使用"></a>4.使用</h2><p>在spring boot配置文件中就能通过ENC()包括起来的形式配置自己的敏感配置了,就像下边那样</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">map:</span><br>  <span class="hljs-attr">service:</span><br>    <span class="hljs-attr">key:</span> <span class="hljs-string">ENC(iLB3vWEUOXOfEUjyCfCO9LVUaHShs3I1pWA22TBahY+s3LR2KHqXS+8wP+32336u)</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">https://restapi.amap.com/v3/geocode/regeo?key=&#123;key&#125;&amp;location=&#123;location&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>spring</category>
      
      <category>jasypt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven知识记录</title>
    <link href="/2022/08/03/Maven%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/08/03/Maven%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="一）初识Maven私服"><a href="#一）初识Maven私服" class="headerlink" title="一）初识Maven私服"></a>一）初识Maven私服</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3><blockquote><p>私服即私有的仓库。maven把存放文件的地方叫做仓库，我们可以理解成我门家中的储物间。而maven把存放文件的具体位置叫做坐标。我们项目中pom.xml文件里引入的jar文件就存放在了maven仓库中。</p></blockquote><p><strong>maven的仓库分两种：</strong></p><p><strong>1.本地仓库</strong></p><p>我们个人电脑中安装maven时分配的仓库。用于存放我们所有项目中所需的资源文件（多为jar文件）。需要说明的是初次安装maven时我们的本地仓库是没有任何文件的，只有我们在对应的项目里运行maven命令时才会在本地仓库生成文件。如果本地仓库没有，会首先尝试从远程仓库下载构件至本地仓库，然后再使用本地仓库的构件。<br>默认的仓库地址${user.home}&#x2F;.m2&#x2F;repository通过手动更改配置文件即可改变本地仓库存放位置。配置文件settings.xml存放在 安装maven路径\conf下（例如：D:\apache-maven-3.0.5\conf\settings.xml） 搜索localRepository即可修改。</p><p><strong>2.远程仓库</strong></p><p>简单的理解为通过网络访问的仓库被称为maven的远程仓库。综合来讲可分为三类：</p><p><strong>中央仓库</strong> 中央仓库是由 Maven 社区提供的仓库，其中包含了大量常用的库。该仓库由maven官方来维护，本地默认安装的maven无需配置。官方提供浏览器访问地址： <a href="https://search.maven.org/#browse%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80%EF%BC%9A">https://search.maven.org/#browse项目中配置的仓库地址：</a> <a href="https://repo1.maven.org/maven2/">https://repo1.maven.org/maven2/</a></p><p><strong>三方仓库：</strong> 可以理解为民间组织非官方的仓库。较为常用的当属国内的阿里云仓库。之所以有这些第三方仓库的存在。是为了弥补官方仓库的一些不足。例如：项目所需jar文件在官方仓库找不到、国内访问官方仓库的网络速度过慢等等原因。</p><p><strong>私有仓库</strong>：前面说了这么多终于绕到了今天的主题—私服。其实我们所说的私服就是远程仓库其中的一种。准确的说是只给自己公司使用的maven仓库。比起上面两种类型的仓库，私服除了可以节省网络带宽以外，更多的是提供公司内部使用的jar包。例如：公司通过业务积累封装出一套很有价值的基础项目，公司希望这个基础项目只被公司内被使用。这时我们就可以将此基础服务项目打成jar包上传到我们的私有仓库里。其他的项目就可以通过maven引入jar包的方式去使用。因此公司搭建自己的maven私服是很有必要的。</p><p><strong>常用远程仓库：</strong></p><ul><li>阿里云Maven仓库:( <a href="http://maven.aliyun.com/nexus/content/groups/public/">http://maven.aliyun.com/nexus/content/groups/public/</a>)</li><li>网易163Maven仓库:( <a href="http://mirrors.163.com/maven/repository/maven-public/">http://mirrors.163.com/maven/repository/maven-public/</a>)</li><li>JBoss的仓库:( <a href="http://repository.jboss.org/nexus/content/groups/public">http://repository.jboss.org/nexus/content/groups/public</a>)</li><li>Maven的1号仓库:( <a href="https://repo1.maven.org/maven2/">https://repo1.maven.org/maven2/</a>)<br>谷歌Maven仓库:( <a href="https://maven.google.com/">https://maven.google.com</a>)</li></ul><h3 id="搭建Maven私服的软件有哪些"><a href="#搭建Maven私服的软件有哪些" class="headerlink" title="搭建Maven私服的软件有哪些"></a>搭建Maven私服的软件有哪些</h3><ol><li>Archiva</li></ol><p>官网地址： <a href="http://archiva.apache.org/%E7%AE%80%E4%BB%8B%EF%BC%9AApache">http://archiva.apache.org/简介：Apache</a> Archiva™是可扩展的存储库管理软件，可帮助您维护自己的个人或企业范围 内的构建工件存储库。它是Maven， Continuum和ANT等构建工具的完美伴侣。Archiva提 供了多种功能，其中包括远程存储库代理，安全访问管理，构建工件存储，交付，浏览，索 引和使用情况报告，可扩展的扫描功能……等等！</p><ol start="2"><li>Artifactory</li></ol><p>官网地址： <a href="https://www.jfrogchina.com/artifactory%E7%AE%80%E4%BB%8B%EF%BC%9A%E7%AE%A1%E7%90%86%E5%88%B6%E5%93%81%E8%80%8C%E4%B8%8D%E6%98%AF%E6%BA%90%E4%BB%A3%E7%A0%81%E6%8C%81%E7%BB%AD%E3%80%81%E8%87%AA%E5%8A%A8%E5%9C%B0%E6%9B%B4%E6%96%B0%E4%BF%A1%E6%81%AF%E5%B7%B2%E7%BB%8F%E6%88%90%E4%B8%BA%E4%B8%80%E5%88%87%E6%88%90%E5%8A%9F%E8%BF%90%E7%BB%B4%E7%9A%84%E5%85%B3%E9%94%AE%E5%9B%A0%E7%B4%A0.JFrog">https://www.jfrogchina.com/artifactory简介：管理制品而不是源代码持续、自动地更新信息已经成为一切成功运维的关键因素.JFrog</a> 通过持续更新的实践彻底改变了软件世界, 其速度和连续性永远改变了组织管理和发布软件的 方式.</p><ol start="3"><li>Nexus</li></ol><p>官网地址： <a href="https://www.sonatype.com/download-oss-sonatype%E7%AE%80%E4%BB%8B%EF%BC%9A%E6%AD%A3%E5%A6%82%E5%AE%98%E7%BD%91%E7%9A%84%E6%8F%8F%E8%BF%B0%E9%82%A3%E8%BF%99%E6%A0%B7">https://www.sonatype.com/download-oss-sonatype简介：正如官网的描述那这样</a> The world’s first and only universal artifact repository that’s FREE to use.(世界上第一个也是唯一的免费使用的通用工件存储库。)也正因为如此nexus是目前市面上使用最多的maven私服搭建软件。<br>因此，这里使用nexus来做搭建私服的演示。上面的官网地址下载软件较慢，我这里提供了网盘下载地址如下：<br>网盘下载地址： <a href="https://pan.baidu.com/s/1saLf5Z0FwWRkjHY6eSzZLg">https://pan.baidu.com/s/1saLf5Z0FwWRkjHY6eSzZLg</a> 提取码：qz5z</p><h2 id="二）使用Nexus搭建Maven私服"><a href="#二）使用Nexus搭建Maven私服" class="headerlink" title="二）使用Nexus搭建Maven私服"></a>二）使用Nexus搭建Maven私服</h2><h3 id="Linux环境下安装Nexus"><a href="#Linux环境下安装Nexus" class="headerlink" title="Linux环境下安装Nexus"></a>Linux环境下安装Nexus</h3><p>有一点需要说明的是搭建nexus时尽量不要使用root用户直接安装运行，官方应该是处于安全考虑给出的建议，所以我这里创建了nexus用户作为日后维护私服帐号。</p><h4 id="1-使用root创建nexus用户"><a href="#1-使用root创建nexus用户" class="headerlink" title="1.使用root创建nexus用户"></a>1.使用root创建nexus用户</h4><p>我这里密码设置的是123456，因此提示过于简单。实际使用环境中这个密码要设置的复杂些。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@linux ~]# useradd nexus<br>[root@linux ~]# passwd nexus<br>更改用户 nexus 的密码 。<br>新的 密码：<br>无效的密码： 过于简单化/系统化<br>无效的密码： 过于简单<br>重新输入新的 密码：<br>passwd： 所有的身份验证令牌已经成功更新。<br>[root@linux ~]#<br></code></pre></td></tr></table></figure><h4 id="2-验证用户是否创建成功、密码是否设置成功"><a href="#2-验证用户是否创建成功、密码是否设置成功" class="headerlink" title="2. 验证用户是否创建成功、密码是否设置成功"></a>2. 验证用户是否创建成功、密码是否设置成功</h4><p>用户创建成功、密码设置成功后。下面切换到nexus用户。我这里为了验证nexus的密码所以预先切换到了另外一个普通用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@linux ~]# su wangwu<br>[wangwu@linux root]$ <br>[wangwu@linux root]$ <br>[wangwu@linux root]$ su nexus<br>密码：<br>[nexus@linux root]$<br></code></pre></td></tr></table></figure><p>如上出现nexus@linux 表示创建的nexus用户成功并且设置密码生效。</p><h4 id="3-上传nexus安装包"><a href="#3-上传nexus安装包" class="headerlink" title="3. 上传nexus安装包"></a>3. 上传nexus安装包</h4><p>使用cd ~切换到nexus用户的家目录。打开FTP上传文件工具把nexus上传到服务器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[nexus@linux ~]$ ll<br>总用量 132256<br>-rw-r--r--. 1 root root 135426386 7月  20 00:27 nexus-3.19.1-01-unix.tar.gz<br>[nexus@linux ~]$<br></code></pre></td></tr></table></figure><h4 id="4-解压nexus安装包"><a href="#4-解压nexus安装包" class="headerlink" title="4. 解压nexus安装包"></a>4. 解压nexus安装包</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[nexus@linux ~]$ tar -zxvf nexus-3.19.1-01-unix.tar.gz<br>[nexus@linux ~]$ ls<br>nexus-3.19.1-01  nexus-3.19.1-01-unix.tar.gz  sonatype-work<br></code></pre></td></tr></table></figure><h4 id="5-启动nexus服务"><a href="#5-启动nexus服务" class="headerlink" title="5. 启动nexus服务"></a>5. 启动nexus服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[nexus@linux ~]$ cd nexus-3.19.1-01/bin/<br>[nexus@linux bin]$ sh nexus start<br>Starting nexus<br>[nexus@linux bin]$ sh nexus status<br>nexus is running<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">说明一下nexus命令</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动： sh nexus start （后台运行） sh nexus run（输出信息运行）</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止：sh nexus-3.19.1-01/bin/nexus stop</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">状态：sh nexus-3.19.1-01/bin/nexus status</span><br></code></pre></td></tr></table></figure><h4 id="6-验证nexus安装是否成功"><a href="#6-验证nexus安装是否成功" class="headerlink" title="6. 验证nexus安装是否成功"></a>6. 验证nexus安装是否成功</h4><p>浏览器中输入ip:8081，出现如下画面，说明安装成功。 这里需要到提示的路径中获取nexus默认登录密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[nexus@linux bin]$ cat /home/nexus/sonatype-work/nexus3/admin.password<br>ba7fe33c-cd30-4a2b-aba6-d399f8ed34e3[nexus@linux bin]$ <br>[nexus@linux bin]$<br><span class="hljs-meta prompt_">#</span><span class="language-bash">ba7fe33c-cd30-4a2b-aba6-d399f8ed34e3 为我的初始登录密码，</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">输入此密码登录成功后按步骤需要重新设置一个新的密码，按步骤操作即可,这里不做演示了。</span><br></code></pre></td></tr></table></figure><h4 id="7-设置nexus开机启动"><a href="#7-设置nexus开机启动" class="headerlink" title="7. 设置nexus开机启动"></a>7. 设置nexus开机启动</h4><p>实际环境中需要设置下开机nexus自启动，这里因为nexus权限的原因需要切换回root用户下进行操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[nexus@linux bin]$ su root<br>密码：<br>[root@linux bin]# <br>[root@linux bin]# ln -s /home/nexus/nexus-3.19.1-01/bin/nexus /etc/init.d/nexus3<br>[root@linux bin]# chkconfig --add nexus3<br>[root@linux bin]# chkconfig nexus3 on<br>[root@linux bin]#<br></code></pre></td></tr></table></figure><h2 id="三）项目中使用maven私服"><a href="#三）项目中使用maven私服" class="headerlink" title="三）项目中使用maven私服"></a>三）项目中使用maven私服</h2><p>访问服务器地址验证成功，在我们项目里开始使用私服之前先了解一下maven依赖顺序，也就是mavne下载文件访问仓库的顺序。<br>1.本地仓库查找，找得到引入到项目，找不到执行下一步。<br>2.未设置远程仓库时，进行中央仓库搜索（maven官方提供的一号仓库）找得到下载到本地仓库后引入到项目，找不到给出错误信息。<br>3.若设置了远程仓库则按配置远程仓库地址的顺序下载到本地后引入到项目，同样找不到给出错误信息。<br>上面第三条提到按配置远程仓库地址的顺序进行搜索下载。下面简要说明下：</p><ul><li>settings_mirror 的优先级高于central</li><li>settings_profile_repo 优先级高于 settings_mirror</li><li>settings_profile_repo 优先级高于 pom_repositories</li><li>settings_profile_repo 优先级高于 pom_profile_repo</li><li>pom_profile_repo 优先级高于 pom_repositories</li><li>pom_repositories 优先级高于 settings_mirror</li></ul><p><strong>最后搜素顺序如下：</strong><br>local_repo &gt; settings_profile_repo &gt; pom_profile_repo &gt; pom_repositories &gt; settings_mirror &gt; central</p><h4 id="一、maven私服配置信息"><a href="#一、maven私服配置信息" class="headerlink" title="一、maven私服配置信息"></a>一、maven私服配置信息</h4><p>地址： <a href="http://ip:8081(搭建maven私服的地址)">http://ip:8081(搭建maven私服的地址)</a><br>管理帐号：admin 管理密码：123456 （登录私服的账号、密码）<br>发包帐号：maven 发包密码：123456 （为了安全起见，使用管理账号单独创建的账号密码用于发包使用）</p><h4 id="二、maven私服使用"><a href="#二、maven私服使用" class="headerlink" title="二、maven私服使用"></a>二、maven私服使用</h4><p>普通项目成员即不需要向私服发布包的，只需要在 pom 文件中加入以下配置即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span>      <br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>maven-public<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>      <br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>maven-public<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://ip:8081/repository/maven-public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>     <br>        <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span>          <br>            <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span>      <br>       <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span>     <br>       <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span>        <br>            <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span>   <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置说明：<br>其中 id 要和你的仓库名称一致，url 就是私服的仓库地址，就是type 为 group 的那个，它组合了一个 proxy 类型的和两个 hosted 类型的仓库。设置 snapshots 的 enabled 为ture，表示允许下载 snapshots 版本的包。</p><h4 id="三、发布公共资源包到maven私服："><a href="#三、发布公共资源包到maven私服：" class="headerlink" title="三、发布公共资源包到maven私服："></a>三、发布公共资源包到maven私服：</h4><p>向私服仓库中发布包，首先需要对仓库有权限才可以，没有权限的用户是没办法发布的。<br>打开 maven 的配置文件 setting.xml ，找到 servers 节点在其中添加 server 节点，用户名和密码也可以是管理员创建的账号，但是需要对仓库有添加权限。<br>配置本地maven settings.xml  提示：两种配置方法<br><strong>1.直接配置maven目录下的conf下的settings.xml文件。</strong><br>复制该文件到用户目录下的.m2目录，两种方法配置效果是一样的，看个人喜好了，加载顺序是.m2下的settings.xml目录接着是maven config目录下的settings.xml。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servers</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>releases<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>maven<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>maven<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">servers</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span>    <br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>internal nexus repository<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>       <br>        <span class="hljs-comment">&lt;!--镜像采用配置好的组的地址--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://ip:8081/repository/maven-public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>!internal.repo,*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置需要上传到私服上的项目pom.xml配置信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">distributionManagement</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置线上releases仓库地址，只要是正式版本都会上传到该地址</span><br><span class="hljs-comment">    （注意要和settings.xml文件里面的配置名称相同）--&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>releases<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Releases<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://ip:8081/repository/maven-releases/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br><span class="hljs-comment">&lt;!--配置线上snapshots仓库地址，只要是快照版本都会上传到该地址</span><br><span class="hljs-comment">（注意要和settings.xml文件里面的配置名称相同）--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">snapshotRepository</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Snapshot<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://ip:8081//repository/maven-snapshots/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">snapshotRepository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">distributionManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>特别说明：</strong>当pom.xml中同时配置了releases仓库和snapshots仓库时。<br>pom.xml文件开头的版本配置1.0.0-SNAPSHOT为build到snapshots库，<br>pom.xml文件开头的版本配置1.0.0 (不带-SNAPSHOT) 的会build到releases库，<br>如果只配置了releases库而版本号写的是带-SNAPSHOT的，build到最后一步会报400错误，因为它找不到对应的库。</p><h4 id="四、maven打包命令"><a href="#四、maven打包命令" class="headerlink" title="四、maven打包命令:"></a>四、maven打包命令:</h4><p>公共资源jar包发布到maven私服命令如下：<br>mvn clean deploy</p><h4 id="扩展知识点："><a href="#扩展知识点：" class="headerlink" title="扩展知识点："></a>扩展知识点：</h4><p>package命令完成了项目编译、单元测试、打包功能，但没有把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库和远程maven私服仓库<br>install命令完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库，但没有布署到远程maven私服仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn install:install-file -DgroupId=org.xl.brave  <br>-DartifactId=brave-axis2 -Dversion=0.0.1  <br>-Dfile=C:\Users\sy\Desktop\brave-axis2-0.0.1-SNAPSHOT.jar    <br>-Dpackaging=jar<br></code></pre></td></tr></table></figure><p>deploy命令完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库和远程maven私服仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn deploy:deploy-file -Dmaven.test.skip=true \<br>-Dfile=D:\workspace\com.xxx.test-1.0.0.jar \<br>-DgroupId=com.xxx -DartifactId=test -Dversion=1.0.0-SNAPSHOT -Dpackaging=jar<br>-DrepositoryId=snapshots<br>-Durl=http://ip:8081/repository/maven-releases/<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml">命令解释：<br>mvn deploy:deploy-file 安装到远程仓库的maven命令<br>-Dfile=jar包的位置<br>-DgroupId=groupId，自定义<br>-DartifactId=artifactId，自定义<br>-Dversion=version，自定义<br>-Durl=私服仓库地址<br>-Dpackaging=jar<br>-DrepositoryId=仓库id<br></code></pre></td></tr></table></figure><h2 id="四）maven几种打包插件介绍"><a href="#四）maven几种打包插件介绍" class="headerlink" title="四）maven几种打包插件介绍"></a>四）maven几种打包插件介绍</h2><h4 id="1-spring-boot-maven-plugin"><a href="#1-spring-boot-maven-plugin" class="headerlink" title="1.spring-boot-maven-plugin"></a>1.spring-boot-maven-plugin</h4><blockquote><p>spring-boot-maven-plugin：springboot项目默认的打包工具，默认情况下只会将项目源码编译生成的class文件和资源文件依赖jar包都打进来，即打包自己项目的class文件+环境变量+静态资源文件+依赖jar（不会把依赖jar反编译为class文件打入）。使用2.2.1.RELEASE版本需要maven版本在2.0及以上，JDK在1.8及以上。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-maven-shade-plugin"><a href="#2-maven-shade-plugin" class="headerlink" title="2.maven-shade-plugin"></a>2.maven-shade-plugin</h4><blockquote><p>它很聪明地将依赖的JAR文件全部解压后，再将得到的.class文件连同当前项目的.class文件一起合并到最终的CLI包(可以直接运行的jar包)中，这样，在执行CLI JAR文件的时候，所有需要的类就都在Classpath中了。</p></blockquote><p>maven-shade-plugin提供了两大基本功能：<br>将依赖的jar包打包到当前jar包（常规打包是不会将所依赖jar包打进来的）；<br>对依赖的jar包进行重命名（用于类的隔离）；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-shade-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- put your configurations here --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>shade<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-maven-assembly-plugin"><a href="#3-maven-assembly-plugin" class="headerlink" title="3.maven-assembly-plugin"></a>3.maven-assembly-plugin</h4><blockquote><p>功能非常强大，是maven中针对打包任务而提供的标准插件。它是Maven最强大的打包插件，它支持各种打包文件格式，包括zip、tar.gz、tar.bz2等等，通过一个打包描述文件设置（src&#x2F;main&#x2F;assembly.xml），它能够帮助用户选择具体打包哪些资源文件集合、依赖、模块，甚至本地仓库文件，每个项的具体打包路径用户也能自由控制。</p></blockquote><p>它不是把依赖的jar直接打进去，而是把依赖的jar编译成class文件打入jar中目录</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.example.demo.DemoApplication<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">descriptorRefs</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRef</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRefs</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>     <span class="hljs-comment">&lt;!--下面是为了使用 mvn package命令，如果不加则使用mvn assembly--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>make-assemble<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>             <span class="hljs-comment">&lt;!-- 绑定到package生命周期 --&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                 <span class="hljs-comment">&lt;!-- 只运行一次 --&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>single<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4-maven-jar-plugin"><a href="#4-maven-jar-plugin" class="headerlink" title="4.maven-jar-plugin"></a>4.maven-jar-plugin</h4><blockquote><p>默认的打包方式，用来打普通的project JAR包</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-jar-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--要使用的打包配置.--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 创建的归档文件是否包含以下pom.xml 和pom.properties Maven 文件,默认是true --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">addMavenDescriptor</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addMavenDescriptor</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 生成MANIFEST.MF的设置 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 为依赖包添加路径, 这些路径会写在MANIFEST文件的Class-Path下 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">addClasspath</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addClasspath</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 这个jar所依赖的jar包添加classPath的时候的前缀，如果这个jar本身和依赖包在同一级目录，则不需要添加 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">classpathPrefix</span>&gt;</span>lib/<span class="hljs-tag">&lt;/<span class="hljs-name">classpathPrefix</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- jar启动入口类 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.example.demo.DemoApplication<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">manifestEntries</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 在Class-Path下添加配置文件的路径 --&gt;</span><br>                <span class="hljs-comment">&lt;!--&lt;Class-Path&gt;../config/&lt;/Class-Path&gt;--&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">manifestEntries</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- jar包的位置，其中$&#123;project.build.directory&#125;默认为 target/ --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--过滤掉不希望包含在jar中的文件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>$&#123;project.basedir&#125;/xml/*<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--要包含的文件列表--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 打jar包时，打包class文件和config目录下面的 properties文件 --&gt;</span><br>            <span class="hljs-comment">&lt;!-- 有时候可能需要一些其他文件，这边可以配置，包括剔除的文件等等 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.class<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><p>5.maven-dependency-plugin</p><blockquote><p>maven-dependency-plugin是处理与依赖相关的插件。它有很多可用的goal，大部分是和依赖构建、分析和解决相关的goal，这部分goal可以直接用maven的命令操作，<br>例如：mvn dependency:tree、mvn dependency:analyze<br>但是我们最常用到的是dependency:copydependency:copy-dependencies、dependency:unpack、dependency:unpack-dependencies这四个。</p></blockquote><p>maven-dependency-plugin最大的用途是帮助分析项目依赖，dependency:list能够列出项目最终解析到的依赖列表，dependency:tree能进一步的描绘项目依赖树，dependency:analyze可以告诉你项目依赖潜在的问题，如果你有直接使用到的却未声明的依赖，该目标就会发出警告。<br>maven-dependency-plugin还有很多目标帮助你操作依赖文件，例如dependency:copy-dependencies能将项目依赖从本地Maven仓库复制到某个特定的文件夹下面。<br>默认的主资源文件目录是src&#x2F;main&#x2F;resources，很多用户会需要添加额外的资源文件目录，这个时候就可以通过配置maven-resources-plugin来实现。<br>此外，资源文件过滤也是Maven的一大特性，你可以在资源文件中使用_${propertyName}_形式的Maven属性，然后配置maven-resources-plugin开启对资源文件的过滤，之后就可以针对不同环境通过命令行或者Profile传入属性的值，以实现更为灵活的构建。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在打包阶段将依赖的jar包导出到lib目录下--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>copy-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>copy-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">includeTypes</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">includeTypes</span>&gt;</span><br>               <span class="hljs-comment">&lt;!--项目构件输出目录，其中$&#123;project.build.directory&#125;默认为 target/--&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/lib<span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">overWriteReleases</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">overWriteReleases</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">overWriteSnapshots</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">overWriteSnapshots</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">overWriteIfNewer</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">overWriteIfNewer</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="6-maven-resources-plugin"><a href="#6-maven-resources-plugin" class="headerlink" title="6.maven-resources-plugin"></a>6.maven-resources-plugin</h4><blockquote><p>为了使项目结构更为清晰，Maven区别对待Java代码文件和资源文件，maven-compiler-plugin用来编译Java代码，maven-resources-plugin则用来处理资源文件。<br>默认的主资源文件目录是src&#x2F;main&#x2F;resources，很多用户会需要添加额外的资源文件目录，这个时候就可以通过配置maven-resources-plugin来实现。<br>此外，资源文件过滤也是Maven的一大特性，你可以在资源文件中使用_${propertyName}_形式的Maven属性，然后配置maven-resources-plugin开启对资源文件的过滤，之后就可以针对不同环境通过命令行或者Profile传入属性的值，以实现更为灵活的构建。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-resources-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>copy-resources<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>           <span class="hljs-comment">&lt;!--绑定到package生命周期--&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>copy-resources<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>target/conf<span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">useDefaultDelimiters</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">useDefaultDelimiters</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">includeEmptyDirs</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">includeEmptyDirs</span>&gt;</span><br>               <span class="hljs-comment">&lt;!--设置自定义分隔符--&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">delimiters</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">delimiter</span>&gt;</span>#<span class="hljs-tag">&lt;/<span class="hljs-name">delimiter</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">delimiters</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                       <span class="hljs-comment">&lt;!--从此目录下读取全部以.properties和.xml开头的文件--&gt;</span><br>                       <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources/<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                       <span class="hljs-comment">&lt;!--用来指定需要打入哪些后缀类型的文件--&gt;</span><br>                       <span class="hljs-comment">&lt;!--&lt;includes&gt;</span><br><span class="hljs-comment">                           &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="hljs-comment">                           &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="hljs-comment">                       &lt;/includes&gt;--&gt;</span><br>                   <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>               <span class="hljs-comment">&lt;!-- 过滤后缀为crt和jks的文件 --&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">nonFilteredFileExtensions</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">nonFilteredFileExtension</span>&gt;</span>crt<span class="hljs-tag">&lt;/<span class="hljs-name">nonFilteredFileExtension</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">nonFilteredFileExtension</span>&gt;</span>jks<span class="hljs-tag">&lt;/<span class="hljs-name">nonFilteredFileExtension</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">nonFilteredFileExtensions</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="-2"><a href="#-2" class="headerlink" title=""></a></h4><p>7.maven-compiler-plugin</p><blockquote><p>作用: 1. 指示maven用什么版本的jdk编译; 2. 指示IntelliJ IDEA把项目识别成什么jdk</p></blockquote><p>maven 是个管理工具，如果我们不告诉它我们的代码要使用什么样的 jdk 版本编译的话，它就会用 maven-compiler-plugin 默认的 jdk 版本来进行处理，这样就容易出现版本不匹配，以至于可能导致编译不通过的问题。<br>maven-compiler-plugin插件是一个Maven插件，用来编译项目代码；自从3.0开始默认的编译器是javax.tools.JavaCompiler，用来编译Java源码；如果你想强制插件使用javac编译器，你必须配置插件的属性forceJavacCompilerUse；还要注意，当前默认源（source）设置为1.6，默认目标(target)设置为1.6。独立运行Maven和JDK,可以通过source和target选项更改他们的默认值；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch-Tips</title>
    <link href="/2021/04/24/ElasticSearch-Tips/"/>
    <url>/2021/04/24/ElasticSearch-Tips/</url>
    
    <content type="html"><![CDATA[<h2 id="这里记录一下es使用经验"><a href="#这里记录一下es使用经验" class="headerlink" title="这里记录一下es使用经验"></a>这里记录一下es使用经验</h2><h3 id="1-ES资源评估公式"><a href="#1-ES资源评估公式" class="headerlink" title="1.ES资源评估公式"></a>1.ES资源评估公式</h3><table><thead><tr><th>各规格下最大索引速度和查询速度预估</th><th></th><th></th></tr></thead><tbody><tr><td>集群规模</td><td>3master+n data</td><td></td></tr><tr><td>连接方式</td><td>直连同步写及同步查询</td><td></td></tr><tr><td>数据量</td><td>查询基于320W数据，单条数据1K，索引1个副本、刷新时间1s，其他索引配置默认。</td><td></td></tr><tr><td>评估依据</td><td>基于data节点数的影响结果，预估不同data节点个数时的最大索引速度和查询速度，n为数据节点数。</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td>虚拟机资源规格(CPU&#x2F;JVM&#x2F;主机)</td><td>索引速度（&#x2F;s）</td><td>查询速度（&#x2F;s）</td></tr><tr><td>0.5C&#x2F;1G&#x2F;2G</td><td>30_(1+n_0.2)</td><td>10_(1+n_0.2)</td></tr><tr><td>1C&#x2F;2G&#x2F;4G</td><td>100_(1+n_0.2)</td><td>55_(1+n_0.2)</td></tr><tr><td>2C&#x2F;4G&#x2F;8G</td><td>430_(1+n_0.2)</td><td>170_(1+n_0.2)</td></tr><tr><td>4C&#x2F;8G&#x2F;16G</td><td>1150_(1+n_0.2)</td><td>500_(1+n_0.2)</td></tr><tr><td>8C&#x2F;16G&#x2F;32G</td><td>2600_(1+n_0.2)</td><td>1800_(1+n_0.2)</td></tr><tr><td></td><td></td><td></td></tr><tr><td>容器资源规格(CPU&#x2F;JVM&#x2F;主机)</td><td>索引速度（&#x2F;s）</td><td>查询速度（&#x2F;s）</td></tr><tr><td>1C&#x2F;2G&#x2F;4G</td><td>110+n*20</td><td>50+n*10</td></tr><tr><td>2C&#x2F;8G&#x2F;16G</td><td>420+n*80</td><td>170+n*30</td></tr><tr><td>4C&#x2F;16G&#x2F;32G</td><td>1100+n*200</td><td>550+n*110</td></tr><tr><td>8C&#x2F;32G&#x2F;64G</td><td>2700+n*500</td><td>1900+n*300</td></tr><tr><td>12C&#x2F;32G&#x2F;64G</td><td>4600+n*900</td><td>4000+n*800</td></tr><tr><td>16C&#x2F;32G&#x2F;64G</td><td>6800+n*1400</td><td>7000+n*1400</td></tr><tr><td>24C&#x2F;32G&#x2F;64G</td><td>12300+n*2400</td><td>15300+n*3100</td></tr><tr><td></td><td></td><td></td></tr><tr><td>主分片数的评估方式</td><td></td><td></td></tr><tr><td>要求</td><td>1、同一个节点上分配的索引分片数不超过3个。</td><td></td></tr><tr><td>2、每个索引分片数大小不超过30G。</td><td></td><td></td></tr><tr><td>根据集群节点数计算承载最大的主分片数</td><td>节点数*3&#x2F;2</td><td></td></tr><tr><td>根据数据大小计算最大的主分片数</td><td>XG&#x2F;节点数&#x2F;2</td><td></td></tr></tbody></table><h3 id="2-ES配置原则"><a href="#2-ES配置原则" class="headerlink" title="2.ES配置原则"></a>2.ES配置原则</h3><p><strong>服务内存在 1-64G之间的</strong>:</p><p>export ES_HEAP_SIZE &#x3D; 一半服务器的内存把50%的内存给elasticsearch，剩下的50%也不会没有用处的，Lucene会很快吞噬剩下的这部分内存用于文件缓存。</p><p><strong>服务器内存大于64G的</strong>：</p><ul><li>方案一：更多的全文检索： export ES_HEAP_SIZE &#x3D; 31G，剩下的给Lucene</li><li>方案二：更多的排序和聚合：一台机器上创建两个或者更多ES节点，而不要部署一个使用32+GB内存的节点export ES_HEAP_SIZE &#x3D; 31G剩下的给Lucene</li><li>备注：cluster.routing.allocation.same_shard.host:true。这会防止同一个shard的主副本存在同一个物理机上（因为如果存在一个机器上，副本的高可用性就没有了）。</li></ul><p><strong>为什么32G是JVM堆内存设置的一个坎？</strong></p><blockquote><p>JVM 在内存小于 32 GB 的时候会采用一个内存对象指针压缩技术。在 Java 中，所有的对象都分配在堆上，并通过一个指针进行引用。 普通对象指针（OOP）指向这些对象，通常为 CPU 字长 的大小：32 位或 64 位，取决于你的处理器。指针引用的就是这个 OOP 值的字节位置。对于 32 位的系统，意味着堆内存大小最大为 4 GB。对于 64 位的系统， 可以使用更大的内存，但是 64 位的指针意味着更大的浪费，因为你的指针本身大了。更糟糕的是， 更大的指针在主内存和各级缓存（例如 LLC，L1 等）之间移动数据的时候，会占用更多的带宽。Java 使用一个叫作 内存指针压缩（compressed oops）的技术来解决这个问题。 它的指针不再表示对象在内存中的精确位置，而是表示 偏移量 。这意味着 32 位的指针可以引用 40 亿个 对象 ， 而不是 40 亿个字节。最终， 也就是说堆内存增长到 32 GB 的物理内存，也可以用 32 位的指针表示。一旦你越过那个神奇的 ~32 GB 的边界，指针就会切回普通对象的指针。 每个对象的指针都变长了，就会使用更多的 CPU 内存带宽，也就是说你实际上失去了更多的内存。事实上，当内存到达 40–50 GB 的时候，有效内存才相当于使用内存对象指针压缩技术时候的 32 GB 内存。这段描述的意思就是说：即便你有足够的内存，也尽量不要 超过 32 GB。因为它浪费了内存，降低了 CPU 的性能，还要让 GC 应对大内存。</p></blockquote><p><strong>指针压缩</strong></p><blockquote><p>因为java需要记录对象在内存中的位置啊，这个记录在对象头中，32位机器对象头默认占了8个字节(内存指针+kclass)，4字节&#x3D;4*8&#x3D;32位&#x3D;4G，但是Java使用的是压缩指针不是12345这样记录的，是0，8，16这样记录的，所以8字节的对象头最大记录内存地址32G如果超过32G就需要更大的对象头记录位置和kclass，可以想象超过32G之后对象头占用内存那么多不值得，所以31G最优。</p></blockquote><p><strong>压缩指针是怎么实现的</strong></p><blockquote><p>不再保存所有引用，而是每隔8个字节保存一个引用。例如，原来保存每个引用0、1、2…，现在只保存0、8、16…。因此，指针压缩后，并不是所有引用都保存在堆中，而是以8个字节为间隔保存引用。在实现上，堆中的引用其实还是按照0x0、0x1、0x2…进行存储。只不过当引用被存入64位的寄存器时，JVM将其左移3位（相当于末尾添加3个0），例如0x0、0x1、0x2…分别被转换为0x0、0x8、0x10。而当从寄存器读出时，JVM又可以右移3位，丢弃末尾的0。（oop在堆中是32位，在寄存器中是35位，2的35次方&#x3D;32G。也就是说，使用32位，来达到35位oop所能引用的堆内存空间）</p></blockquote><h3 id="3-ES部署原则"><a href="#3-ES部署原则" class="headerlink" title="3.ES部署原则"></a>3.ES部署原则</h3><ul><li>【强制】开启内存锁，禁止swapping</li><li>【强制】文件描述符数量调整至65536</li><li>【强制】最大映射数调整至262144</li><li>【强制】重要数据至少有一个副本。</li><li>【强制】主分片和副本分片不能在同一个物理机上</li><li>【强制】部署最后严格划分ES节点角色</li><li>【强制】添加快照任务</li><li>【建议】使用RestClient连接</li><li>【强制】读连接client节点，写连接data节点。</li><li>【强制】连接时，必须配置上所有的对应节点，避免单节点配置。</li></ul><h3 id="4-ES索引模板设计原则"><a href="#4-ES索引模板设计原则" class="headerlink" title="4.ES索引模板设计原则"></a>4.ES索引模板设计原则</h3><ul><li>【建议】设置索引的refresh_interval，默认1s建议调至60s减少写入压力</li><li>【强制】禁止不使用的字段存入Elasticsearch</li><li>【强制】不作为查询字段的index值设置为false</li><li>【强制】不允许_all字段（7.5.1版本不再支持）</li><li>【强制】禁止es自动创建字段，防止索引结构混乱字段。dynamic属性设置为false遇到陌生字段，就忽略；strict：遇到陌生字段，就报错</li><li>【强制】索引的分片数在一个节点上不超过3个，每个分片数量不超过30G</li><li>【强制】对于大表必须设置分月或分天，一般为单个索引不超过100G</li><li>【强制】数据必须有对应的生命周期，禁止永久保存，且周期性数据存储最长为6个月</li><li>【强制】必须开启副本</li><li>【强制】禁止不需要排序和聚合的字段doc_values属性设置为true</li><li>【强制】表结构字段不超过50个</li><li>【强制】不允许使用type，一个索引只存储一种结构（7.5.1版本不再支持type）</li><li>【强制】index_patterns只允许包含一种索引模式</li><li>【强制】禁止keyword类型字段超过256个字符，默认超过256个字符不会被索引</li></ul><h3 id="5-ES读写规范"><a href="#5-ES读写规范" class="headerlink" title="5.ES读写规范"></a>5.ES读写规范</h3><ul><li>【建议】建议使用match_phrase替代match提高查询性能</li><li>【建议】善用filter过滤器，过滤适合在大范围筛选数据，而查询则适合精确匹配数据。一般应用时，应先使用过滤操作过滤数据，然后使用查询匹配数据</li><li>【建议】善用路由routing，极大提升查询效率</li><li>【建议】大量数据提交时使用批量提交方法</li><li>【建议】不得一次超大返回结果上限为100条，应需分页查询。具体实际限制根据集群规模</li><li>【建议】单个查询条件字数长度不得超过30字</li><li>【建议】尽量少使用delete_by_query删除文档，更好的方案是直接删除索引</li><li>【建议】使用 datastrem 和 ILM 索引生命周期管理管理时序数据</li><li>【建议】分片大小控制在 10GB-50GB</li><li>【建议】控制在每 GB 堆内存 20 个分片以内，避免单个节点分片过多、负载过重</li><li>【建议】增加字段限制，避免mapping爆炸</li><li>【强制】不能使用index*的操作，同时跨多个es索引进行查询，会严重消耗es性能，建议单次查询不跨索引查询，跨索引查询不得超过3个</li><li>【强制】设置查询所使用字段和返回结果列，查询结果返回不能超过1万条，数据量过大会导致es堆内存溢出</li><li>【强制】查询条件不能超过10K，条件过大会导致查询缓慢和es栈内存溢出</li><li>【强制】禁止使用前缀wildcards查询。</li><li>【强制】查询条件禁止超过1024个。</li><li>【强制】ES不支持事务性读写操作。</li><li>【强制】避免内嵌查询。</li><li>【强制，使用请进行评审】避免聚合查询。</li><li>【强制】避免使用from和size深度分页，可以考虑使用searchAfter来实现。</li><li>【强制】ES本身不支持事务！！！！</li></ul><h3 id="6-ES慢查询日志"><a href="#6-ES慢查询日志" class="headerlink" title="6.ES慢查询日志"></a>6.ES慢查询日志</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs json"># index数据的慢日志   <br>PUT /you index name/_settings<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;index.indexing.slowlog.threshold.index.warn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;10s&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;index.indexing.slowlog.threshold.index.info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;5s&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;index.indexing.slowlog.threshold.index.debug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2s&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;index.indexing.slowlog.threshold.index.trace&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;500ms&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;index.indexing.slowlog.level&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;info&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;index.indexing.slowlog.source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1000&quot;</span><br><span class="hljs-punctuation">&#125;</span><br># search数据的慢日志    查询分为fetch和query，fetch先查出来id和score，再根据id查找全文，根据score排序。就像数据库的回表一样。索引fetch会较慢一些<br>PUT /you index name/_settings<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;index.search.slowlog.threshold.query.warn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;10s&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;index.search.slowlog.threshold.query.info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;5s&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;index.search.slowlog.threshold.query.debug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2s&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;index.search.slowlog.threshold.query.trace&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;500ms&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;index.search.slowlog.threshold.fetch.warn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1s&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;index.search.slowlog.threshold.fetch.info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;800ms&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;index.search.slowlog.threshold.fetch.debug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;500ms&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;index.search.slowlog.threshold.fetch.trace&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;200ms&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;index.search.slowlog.level&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;info&quot;</span><br><span class="hljs-punctuation">&#125;</span><br># 查看慢日志所在位置<br>GET _nodes/settings?pretty=<span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><br># 可以通过logstash将慢查询日志收集进ES中，然后进行分析<br># 注：docker安装ES，会出现日志只输出控制台，不写入文件的情况，请自定义配置log4j2.properties文件<br></code></pre></td></tr></table></figure><h3 id="7-ES索引新增字段"><a href="#7-ES索引新增字段" class="headerlink" title="7.ES索引新增字段"></a>7.ES索引新增字段</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">PUT user_order_2010（表名）/_mapping<br>&#123;<br>   <span class="hljs-string">&quot;properties&quot;</span>:&#123;    //新增字段combineOrderNumber<br>       <span class="hljs-string">&quot;combineOrderNumber&quot;</span>: &#123;<br>           <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br>curl -X PUT http://127.0.0.1:9200/user_order_2010/_mapping -H <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span>  -d <span class="hljs-string">&#x27;&#123;</span><br><span class="hljs-string">   &quot;properties&quot;:&#123;    //新增字段combineOrderNumber</span><br><span class="hljs-string">       &quot;combineOrderNumber&quot;: &#123;</span><br><span class="hljs-string">           &quot;type&quot;: &quot;keyword&quot;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="8-Docker安装ES及相关技术栈"><a href="#8-Docker安装ES及相关技术栈" class="headerlink" title="8.Docker安装ES及相关技术栈"></a>8.Docker安装ES及相关技术栈</h3><p>注：如果是wsl中部署，存在ip地址重启之后变动的情况请使用网桥模式，将相关组件全使用一个网桥，通过docker 容器名称连接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 拉取镜像</span><br>docker pull elasticsearch:7.6.1<br>docker pull kibana:7.6.1<br><span class="hljs-comment"># 创建文件夹</span><br><span class="hljs-built_in">mkdir</span> -p /mydata/elasticsearch/config<br><span class="hljs-built_in">mkdir</span> -p /mydata/elasticsearch/data<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;http.host: 0.0.0.0&quot;</span> &gt;/mydata/elasticsearch/config/elasticsearch.yml<br><span class="hljs-built_in">mkdir</span> -p /mydata/elasticsearch/kibana/config/<br>vim  /mydata/elasticsearch/kibana/config/kibana.yml<br><span class="hljs-built_in">chmod</span> -R  777 /mydata/elasticsearch/config<br><span class="hljs-built_in">chmod</span> -R  777  /mydata/elasticsearch/data<br><span class="hljs-built_in">chmod</span> -R  777  /mydata/elasticsearch/kibana/config/<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#kibana.yaml</span><br><span class="hljs-attr">server.name:</span> <span class="hljs-string">kibana</span><br><span class="hljs-attr">server.host:</span> <span class="hljs-string">&quot;0&quot;</span><br><span class="hljs-attr">elasticsearch.hosts:</span> [ <span class="hljs-string">&quot;http://192.168.170.132:9200&quot;</span> ]  <span class="hljs-comment"># 根据自己情况选择是否使--network=es-network [[ &quot;http://es容器名称:9200&quot; ]]</span><br><span class="hljs-attr">xpack.monitoring.ui.container.elasticsearch.enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">i18n.locale:</span> <span class="hljs-string">&quot;zh-CN&quot;</span><br><span class="hljs-comment">#密码</span><br><span class="hljs-attr">elasticsearch.username:</span> <span class="hljs-string">&quot;elastic&quot;</span><br><span class="hljs-attr">elasticsearch.password:</span> <span class="hljs-string">&quot;passwd&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># elasticsearch.yml 高版本增加如下</span><br><span class="hljs-attr">http.host:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">&quot;docker-cluster&quot;</span><br><span class="hljs-attr">network.hosts:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><span class="hljs-comment"># 跨域</span><br><span class="hljs-attr">http.cors.allow-origin:</span> <span class="hljs-string">&quot;*&quot;</span><br><span class="hljs-attr">http.cors.enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">http.cors.allow-headers:</span> <span class="hljs-string">Authorization,X-Requested-With,Content-Length,Content-Type</span><br><span class="hljs-comment"># 密码</span><br><span class="hljs-attr">xpack.security.enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">xpack.license.self_generated.type:</span> <span class="hljs-string">basic</span><br><span class="hljs-attr">xpack.security.transport.ssl.enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 启动ES 根据自己情况选择是否使用网桥 --network=es-network </span><br>docker run --name elasticsearch -p <span class="hljs-number">9200</span>:<span class="hljs-number">9200</span> -p <span class="hljs-number">9300</span>:<span class="hljs-number">9300</span> -e <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> -e ES_JAVA_OPTS=<span class="hljs-string">&quot;-Xms64m -Xmx512m&quot;</span> -v <span class="hljs-regexp">/mydata/</span>elasticsearch<span class="hljs-regexp">/config/</span>elasticsearch.yml:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>config<span class="hljs-regexp">/elasticsearch.yml -v /my</span>data<span class="hljs-regexp">/elasticsearch/</span>data:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>data -v <span class="hljs-regexp">/mydata/</span>elasticsearch<span class="hljs-regexp">/plugins:/u</span>sr<span class="hljs-regexp">/share/</span>elasticsearch/plugins -d elasticsearch:<span class="hljs-number">7.6</span>.<span class="hljs-number">1</span><br><br><span class="hljs-comment"># 启动kibana 根据自己情况选择是否使用网桥 --network=es-network </span><br>docker run -d   --name=kibana   --restart=always   -p <span class="hljs-number">5601</span>:<span class="hljs-number">5601</span>   -v <span class="hljs-regexp">/mydata/</span>elasticsearch<span class="hljs-regexp">/kibana/</span>config<span class="hljs-regexp">/kibana.yml:/u</span>sr<span class="hljs-regexp">/share/</span>kibana<span class="hljs-regexp">/config/</span>kibana.yml   kibana:<span class="hljs-number">7.6</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>docker 部署metricbea</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull docker.elastic.co/beats/metricbeat:7.10.1<br>vim /mydata/elasticsearch/metricbeat/metricbeat.yml   <span class="hljs-comment"># 注意不能给777，给755</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">metricbeat.config:</span><br>  <span class="hljs-attr">modules:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">$&#123;path.config&#125;/modules.d/*.yml</span><br>    <span class="hljs-comment"># Reload module configs as they change:</span><br>    <span class="hljs-attr">reload.enabled:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">metricbeat.autodiscover:</span><br>  <span class="hljs-attr">providers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">docker</span><br>      <span class="hljs-attr">hints.enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">metricbeat.modules:</span>    <br><span class="hljs-bullet">-</span> <span class="hljs-attr">module:</span> <span class="hljs-string">elasticsearch</span>       <span class="hljs-comment"># 开启elasticsearch</span><br>  <span class="hljs-attr">xpack.enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">period:</span> <span class="hljs-string">10s</span><br>  <span class="hljs-attr">hosts:</span> [<span class="hljs-string">&quot;http://elasticsearch:9200&quot;</span>]  <span class="hljs-comment"># 跨容器交互使用桥接</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">module:</span> <span class="hljs-string">docker</span><br>  <span class="hljs-attr">metricsets:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;container&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;cpu&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;diskio&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;healthcheck&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;info&quot;</span><br>    <span class="hljs-comment">#- &quot;image&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;memory&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;network&quot;</span><br>  <span class="hljs-attr">hosts:</span> [<span class="hljs-string">&quot;unix:///var/run/docker.sock&quot;</span>] <br>  <span class="hljs-attr">period:</span> <span class="hljs-string">10s</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">processors:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">add_cloud_metadata:</span> <span class="hljs-string">~</span><br><span class="hljs-comment"># 直接发送elasticsearch</span><br><span class="hljs-attr">output.elasticsearch:</span><br>  <span class="hljs-attr">hosts:</span> [<span class="hljs-string">&quot;elasticsearch:9200&quot;</span>]   <span class="hljs-comment"># 跨容器交互使用桥接</span><br><br><span class="hljs-comment"># 要加载仪表板，可以在metricbeat设置中启用仪表板加载。当仪表板加载被启用时，Metricbeat使用Kibana API来加载样本仪表板。只有当Metricbeat启动时，才会尝试仪表板加载。</span><br><span class="hljs-comment"># 设置kibana服务地址</span><br><span class="hljs-attr">setup.kibana.host:</span> <span class="hljs-string">&quot;kibana:5601&quot;</span> <span class="hljs-comment"># 跨容器交互使用桥接</span><br><span class="hljs-comment"># 加载默认的仪表盘样式</span><br><span class="hljs-attr">setup.dashboards.enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 设置如果存在模板，则不覆盖原有模板</span><br><span class="hljs-attr">setup.template.overwrite:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 根据自己情况选择是否使用网桥</span><br>docker <span class="hljs-built_in">run</span> -d <span class="hljs-attribute">--network</span>=es-network <span class="hljs-attribute">--name</span>=metricbeat \<br><span class="hljs-attribute">--user</span>=root <span class="hljs-attribute">--volume</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$(pwd)</span>/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro&quot;</span> \<br><span class="hljs-attribute">--volume</span>=<span class="hljs-string">&quot;/var/run/docker.sock:/var/run/docker.sock:ro&quot;</span>\<br><span class="hljs-attribute">--volume</span>=<span class="hljs-string">&quot;/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro&quot;</span> \<br><span class="hljs-attribute">--volume</span>=<span class="hljs-string">&quot;/proc:/hostfs/proc:ro&quot;</span> <span class="hljs-attribute">--volume</span>=<span class="hljs-string">&quot;/:/hostfs:ro&quot;</span> \<br>docker.elastic.co/beats/metricbeat:7.10.1 metricbeat -e<br></code></pre></td></tr></table></figure><h3 id="9-ES修复log4j2-bug"><a href="#9-ES修复log4j2-bug" class="headerlink" title="9.ES修复log4j2 bug"></a>9.ES修复log4j2 bug</h3><ol><li>关闭ES集群</li><li>备份 elasticsearch 目录下lib下的 log4j-api-2.11.1.jar和log4j-core-2.11.1.jar</li><li>cd &#x2F;xxx&#x2F;xxxx&#x2F;elasticsearch&#x2F;lib</li><li>mkdir log_bak</li><li>mv log4j* .&#x2F;log_bak</li><li>上传log4j-core-2.17.0.jar 和 log4j-api-2.17.0.jar 到 lib目录下</li><li>启动ES集群</li></ol><h3 id="10-ES监控dashboard"><a href="#10-ES监控dashboard" class="headerlink" title="10.ES监控dashboard"></a>10.ES监控dashboard</h3><p>1.python收集脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> urllib2<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-comment"># ElasticSearch Cluster to Monitor</span><br><span class="hljs-comment">#elasticServer = os.environ.get(&#x27;ES_METRICS_CLUSTER_URL&#x27;, &#x27;http://192.168.2.13:9200&#x27;)</span><br><span class="hljs-comment">#interval = int(os.environ.get(&#x27;ES_METRICS_INTERVAL&#x27;, &#x27;60&#x27;))</span><br><br>elasticServer = <span class="hljs-string">&#x27;http://192.168.2.13:9200&#x27;</span><br>interval = <span class="hljs-number">60</span><br><span class="hljs-comment"># ElasticSearch Cluster to Send Metrics</span><br><span class="hljs-comment">#elasticIndex = os.environ.get(&#x27;ES_METRICS_INDEX_NAME&#x27;, &#x27;elasticsearch_metrics&#x27;)</span><br><span class="hljs-comment">#elasticMonitoringCluster = os.environ.get(&#x27;ES_METRICS_MONITORING_CLUSTER_URL&#x27;, &#x27;http://192.168.2.13:9200&#x27;)</span><br><br>elasticIndex = <span class="hljs-string">&#x27;elasticsearch_metrics&#x27;</span><br>elasticMonitoringCluster = <span class="hljs-string">&#x27;http://192.168.2.13:9200&#x27;</span><br><span class="hljs-comment"># Enable Elasticsearch Security</span><br><span class="hljs-comment"># read_username and read_password for read ES cluster information</span><br><span class="hljs-comment"># write_username and write_passowrd for write monitor metric to ES.</span><br>read_es_security_enable = <span class="hljs-literal">False</span><br>read_username = <span class="hljs-string">&quot;read_username&quot;</span><br>read_password = <span class="hljs-string">&quot;read_password&quot;</span><br><br>write_es_security_enable = <span class="hljs-literal">False</span><br>write_username = <span class="hljs-string">&quot;write_username&quot;</span><br>write_password = <span class="hljs-string">&quot;write_password&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_urlopen</span>(<span class="hljs-params">urlData, read_username, read_password</span>):<br>    <span class="hljs-keyword">if</span> read_es_security_enable: <br>      <span class="hljs-keyword">try</span>:<br>password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()<br>        password_mgr.add_password(<span class="hljs-literal">None</span>, urlData, read_username, read_password)<br>        handler = urllib2.HTTPBasicAuthHandler(password_mgr)<br>        opener = urllib2.build_opener(handler)<br>        urllib2.install_opener(opener)<br>        response = urllib2.urlopen(urlData)<br><span class="hljs-keyword">return</span> response<br>      <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Error:  &#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">str</span>(e))<br>    <span class="hljs-keyword">else</span>:<br>      <span class="hljs-keyword">try</span>:<br>        response = urllib2.urlopen(urlData)<br>        <span class="hljs-keyword">return</span> response<br>      <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Error:  &#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">str</span>(e))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_clusterhealth</span>():<br>    <span class="hljs-keyword">try</span>:<br>        utc_datetime = datetime.datetime.utcnow()<br>        endpoint = <span class="hljs-string">&quot;/_cluster/health&quot;</span><br>        urlData = elasticServer + endpoint<br>        response = handle_urlopen(urlData,read_username,read_password)<br>        jsonData = json.loads(response.read())<br>        clusterName = jsonData[<span class="hljs-string">&#x27;cluster_name&#x27;</span>]<br>        jsonData[<span class="hljs-string">&#x27;@timestamp&#x27;</span>] = <span class="hljs-built_in">str</span>(utc_datetime.strftime(<span class="hljs-string">&#x27;%Y-%m-%dT%H:%M:%S.%f&#x27;</span>)[:-<span class="hljs-number">3</span>])<br>        <span class="hljs-keyword">if</span> jsonData[<span class="hljs-string">&#x27;status&#x27;</span>] == <span class="hljs-string">&#x27;green&#x27;</span>:<br>            jsonData[<span class="hljs-string">&#x27;status_code&#x27;</span>] = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">elif</span> jsonData[<span class="hljs-string">&#x27;status&#x27;</span>] == <span class="hljs-string">&#x27;yellow&#x27;</span>:<br>            jsonData[<span class="hljs-string">&#x27;status_code&#x27;</span>] = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> jsonData[<span class="hljs-string">&#x27;status&#x27;</span>] == <span class="hljs-string">&#x27;red&#x27;</span>:<br>            jsonData[<span class="hljs-string">&#x27;status_code&#x27;</span>] = <span class="hljs-number">2</span><br>        post_data(jsonData)<br>        <span class="hljs-keyword">return</span> clusterName<br>    <span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> err:<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;IOError: Maybe can&#x27;t connect to elasticsearch.&quot;</span><br>        clusterName = <span class="hljs-string">&quot;unknown&quot;</span><br>        <span class="hljs-keyword">return</span> clusterName<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_clusterstats</span>():<br>    utc_datetime = datetime.datetime.utcnow()<br>    endpoint = <span class="hljs-string">&quot;/_cluster/stats&quot;</span><br>    urlData = elasticServer + endpoint<br>    response = handle_urlopen(urlData,read_username,read_password)<br>    jsonData = json.loads(response.read())<br>    jsonData[<span class="hljs-string">&#x27;@timestamp&#x27;</span>] = <span class="hljs-built_in">str</span>(utc_datetime.strftime(<span class="hljs-string">&#x27;%Y-%m-%dT%H:%M:%S.%f&#x27;</span>)[:-<span class="hljs-number">3</span>])<br>    post_data(jsonData)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_nodestats</span>(<span class="hljs-params">clusterName</span>):<br>    utc_datetime = datetime.datetime.utcnow()<br>    endpoint = <span class="hljs-string">&quot;/_cat/nodes?v&amp;h=n&quot;</span><br>    urlData = elasticServer + endpoint<br>    response = handle_urlopen(urlData,read_username,read_password)<br>    nodes = response.read()[<span class="hljs-number">1</span>:-<span class="hljs-number">1</span>].strip().split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> nodes:<br>        endpoint = <span class="hljs-string">&quot;/_nodes/%s/stats&quot;</span> % node.rstrip()<br>        urlData = elasticServer + endpoint<br>        response = handle_urlopen(urlData,read_username,read_password)<br>        jsonData = json.loads(response.read())<br>        nodeID = jsonData[<span class="hljs-string">&#x27;nodes&#x27;</span>].keys()<br>        <span class="hljs-keyword">try</span>:<br>            jsonData[<span class="hljs-string">&#x27;nodes&#x27;</span>][nodeID[<span class="hljs-number">0</span>]][<span class="hljs-string">&#x27;@timestamp&#x27;</span>] = <span class="hljs-built_in">str</span>(utc_datetime.strftime(<span class="hljs-string">&#x27;%Y-%m-%dT%H:%M:%S.%f&#x27;</span>)[:-<span class="hljs-number">3</span>])<br>            jsonData[<span class="hljs-string">&#x27;nodes&#x27;</span>][nodeID[<span class="hljs-number">0</span>]][<span class="hljs-string">&#x27;cluster_name&#x27;</span>] = clusterName<br>            newJsonData = jsonData[<span class="hljs-string">&#x27;nodes&#x27;</span>][nodeID[<span class="hljs-number">0</span>]]<br>            post_data(newJsonData)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">continue</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_indexstats</span>(<span class="hljs-params">clusterName</span>):<br>    utc_datetime = datetime.datetime.utcnow()<br>    endpoint = <span class="hljs-string">&quot;/_stats&quot;</span><br>    urlData = elasticServer + endpoint<br>    response = handle_urlopen(urlData,read_username,read_password)<br>    jsonData = json.loads(response.read())<br>    jsonData[<span class="hljs-string">&#x27;_all&#x27;</span>][<span class="hljs-string">&#x27;@timestamp&#x27;</span>] = <span class="hljs-built_in">str</span>(utc_datetime.strftime(<span class="hljs-string">&#x27;%Y-%m-%dT%H:%M:%S.%f&#x27;</span>)[:-<span class="hljs-number">3</span>])<br>    jsonData[<span class="hljs-string">&#x27;_all&#x27;</span>][<span class="hljs-string">&#x27;cluster_name&#x27;</span>] = clusterName<br>    post_data(jsonData[<span class="hljs-string">&#x27;_all&#x27;</span>])<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">post_data</span>(<span class="hljs-params">data</span>):<br>    utc_datetime = datetime.datetime.utcnow()<br>    url_parameters = &#123;<span class="hljs-string">&#x27;cluster&#x27;</span>: elasticMonitoringCluster, <span class="hljs-string">&#x27;index&#x27;</span>: elasticIndex,<br>        <span class="hljs-string">&#x27;index_period&#x27;</span>: utc_datetime.strftime(<span class="hljs-string">&quot;%Y.%m.%d&quot;</span>), &#125;<br>    url = <span class="hljs-string">&quot;%(cluster)s/%(index)s-%(index_period)s/message&quot;</span> % url_parameters<br>    headers = &#123;<span class="hljs-string">&#x27;content-type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>&#125;<br>    <span class="hljs-keyword">try</span>:<br>        req = urllib2.Request(url, headers=headers, data=json.dumps(data))<br>        <span class="hljs-keyword">if</span> write_es_security_enable:<br>            password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()<br>            password_mgr.add_password(<span class="hljs-literal">None</span>, url, write_username, write_password)<br>            handler = urllib2.HTTPBasicAuthHandler(password_mgr)<br>            opener = urllib2.build_opener(handler)<br>            urllib2.install_opener(opener)<br>            response = urllib2.urlopen(req)<br>        <span class="hljs-keyword">else</span>:<br>            response = urllib2.urlopen(req)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Error:  &#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">str</span>(e))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    clusterName = fetch_clusterhealth()<br>    <span class="hljs-built_in">print</span>(clusterName)<br>    <span class="hljs-keyword">if</span> clusterName != <span class="hljs-string">&quot;unknown&quot;</span>:<br>        fetch_clusterstats()<br>        fetch_nodestats(clusterName)<br>        fetch_indexstats(clusterName)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">try</span>:<br>        nextRun = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-keyword">if</span> time.time() &gt;= nextRun:<br>                nextRun = time.time() + interval<br>                now = time.time()<br>                main()<br>                elapsed = time.time() - now<br>                <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Total Elapsed Time: %s&quot;</span> % elapsed<br>                timeDiff = nextRun - time.time()<br><br>                <span class="hljs-comment"># Check timediff , if timediff &gt;=0 sleep, if &lt; 0 send metrics to es</span><br>                <span class="hljs-keyword">if</span> timeDiff &gt;= <span class="hljs-number">0</span>:<br>                    time.sleep(timeDiff)<br><br>    <span class="hljs-keyword">except</span> KeyboardInterrupt:<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Interrupted&#x27;</span><br>        <span class="hljs-keyword">try</span>:<br>            sys.exit(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">except</span> SystemExit:<br>            os._exit(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>2.服务启动脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>nohup python2 ./elasticsearch2elastic.py &gt; ./elastic.log 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure><p>3.服务停止脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">! /bin/shell</span><br>appName=&#x27;elasticsearch2elastic.py&#x27;<br>pid=$(ps -ef | grep $&#123;appName&#125; | grep -v grep | awk  &#x27;&#123;print $2&#125;&#x27;)<br>echo -e $pid<br><br>kill -9 $&#123;pid&#125;<br>sleep 2<br>if [ $? -eq 0 ];then<br>    echo &quot;kill $&#123;appName&#125; success...&quot;<br>else<br>    echo &quot;kill $&#123;appName&#125; fail&quot;<br>fi<br></code></pre></td></tr></table></figure><p>4.索引清理脚本-shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>ES_IP=10.0.0.73<br>ES_PORT=9200<br>INDEX_PREFIX=&#x27;elasticsearch_metrics-&#x27;<br>INDEX_SUFF=&#x27;*&#x27;<br>DATE_MONTH=`date -d &quot;1 month ago&quot; +%Y.%m`<br>INDEX_NAME=$&#123;INDEX_PREFIX&#125;$&#123;DATE_MONTH&#125;$&#123;INDEX_SUFF&#125;<br>ES_URL=http://$&#123;ES_IP&#125;:$&#123;ES_PORT&#125;/$&#123;INDEX_NAME&#125;<br>LOG_FILE=esindex_del-$&#123;DATE_MONTH&#125;.out<br>curl -XDELETE $&#123;ES_URL&#125; &gt;&gt; $&#123;LOG_FILE&#125;<br></code></pre></td></tr></table></figure><p>5.索引清理脚本-python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">@Project ：es-monitor</span><br><span class="hljs-string">@File    ：index_clear.py</span><br><span class="hljs-string">@IDE     ：PyCharm</span><br><span class="hljs-string">@Author  ：Suaf</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> os<br><br>ES_PORT = <span class="hljs-string">&#x27;9200&#x27;</span><br>ES_IP = <span class="hljs-string">&#x27;10.0.0.73&#x27;</span><br>INDEX_PREFIX = <span class="hljs-string">&#x27;elasticsearch_metrics-&#x27;</span><br>INDEX_SUFF = <span class="hljs-string">&#x27;*&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getLastMonth</span>():<br>    today = datetime.date.today()<br>    first = today.replace(day=<span class="hljs-number">1</span>)<br>    last_month = first - datetime.timedelta(days=<span class="hljs-number">1</span>)<br>    month = last_month.strftime(<span class="hljs-string">&quot;%Y.%m&quot;</span>)<br>    index_name = INDEX_PREFIX + month + INDEX_SUFF<br>    log_file = <span class="hljs-string">&#x27;esindex_del-&#x27;</span> + month + <span class="hljs-string">&#x27;.out&#x27;</span><br>    command = (<span class="hljs-string">&#x27;curl -XDELETE http://%s:%s/%s &gt; %s&#x27;</span>) % (ES_IP, ES_PORT, index_name, log_file)<br>    <span class="hljs-built_in">print</span>(command)<br>    os.system(command)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    getLastMonth()<br></code></pre></td></tr></table></figure><h3 id="11-IP转GeoIp"><a href="#11-IP转GeoIp" class="headerlink" title="11.IP转GeoIp"></a>11.IP转GeoIp</h3><blockquote><p>GeoIp processor 根据来自 Maxmind 数据库的数据添加有关IP地址地理位置的信息。默认情况下，GeoIp processor 将此信息添加到 geoip 字段下。GeoIp processor 可以解析 IPv4 和 IPv6 地址。</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs json"># 创建一个预处理管道<br>PUT _ingest/pipeline/geoip_pipeline<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;description&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Add geoip info&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;processors&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;geoip&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ip&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><br># 创建一个索引<br># 考虑到后面要批量导入数千条+数据，我们采用了取巧的方式。使用了在创建索引的时候指定缺省管道（index.default_pipeline）的方式。<br># 这样的好处是：<br># 灵活：用户只关心 bulk 批量写入数据。<br># 零写入代码修改：甚至写入数据的代码一行都不需要改就可以。<br>PUT ip_index<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;index.default_pipeline&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;geoip_pipeline&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;geoip&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;location&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;geo_point&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ip&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;keyword&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br># 写入一条数据<br>PUT ip_index/_doc/<span class="hljs-number">1</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;ip&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;8.8.8.8&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="12-ES存储深入了解"><a href="#12-ES存储深入了解" class="headerlink" title="12.ES存储深入了解"></a>12.ES存储深入了解</h3><p><strong>ES配置的目录：</strong></p><ul><li>path.home：运行Elasticsearch进程的用户的主目录。默认为Java系统属性user.dir，它是进程所有者的默认主目录</li><li>path.conf：包含配置文件的目录。这通常通过设置Java系统属性es.config来设置，因为在找到配置文件之前它必然会被解析</li><li>path.plugins：子文件夹为Elasticsearch插件的目录</li><li>path.logs：存储生成的日志的位置。如果其中一个卷的磁盘空间不足，则将它放在与数据目录不同的卷上可能是有意义的</li><li>path.data：包含Elasticsearch存储的数据的文件夹的路径(只看他)</li></ul><p><strong>文件从哪里来：</strong></p><ul><li>Lucene负责写和维护Lucene索引文件</li><li>而Elasticsearch在Lucene之上写与功能相关的元数据，例如字段映射，索引设置和其他集群元数据。 最终用户和支持功能</li><li>在低级Lucene中不存在，由Elasticsearch提供</li></ul><p><strong>文件结构：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs json">data<br>|__ elasticsearch<br>|__ nodes<br>|__ <span class="hljs-number">0</span><br>|__ _state<br>||__ global<span class="hljs-number">-0.</span>st # 集群的全局元数据<br>|__ node.lock  # 文件用于确保一次只能从一个数据目录读取/写入一个Elasticsearch相关安装信息<br>|__ indices<br>|__ <span class="hljs-number">45</span>aonVA8RPSlHSKGnK_yaA<br>|__ <span class="hljs-number">0</span> # <span class="hljs-number">0</span>包含与索引的第一个（也是唯一的）分片相关的数据（分片<span class="hljs-number">0</span>）<br>||__ _state<br>||__ index #<br>||__ translog # 每个分片的 事务日志<span class="hljs-punctuation">,</span>保可以安全地将数据索引到Elasticsearch<br>|__ _state # 前者_state包含所谓的索引状态文件，存储索引的元数据<br><br>data/<br>└── nodes<br>    └── <span class="hljs-number">0</span><br>        ├── _state  # 集群的全局元数据<br>        ├── indices # 存储索引的目录<br>        │   ├── <span class="hljs-number">45</span>aonVA8RPSlHSKGnK_yaA # 索引唯一标识<br>        │   │   ├── <span class="hljs-number">0</span> # <span class="hljs-number">0</span>包含与索引的第一个（也是唯一的）分片相关的数据（分片<span class="hljs-number">0</span>）<br>        │   │   │   ├── _state # _state包含所谓的索引状态文件，存储索引的元数据<br>        │   │   │   │   ├── retention-leases<span class="hljs-number">-41.</span>st<br>        │   │   │   │   └── state<span class="hljs-number">-1.</span>st<br>        │   │   │   ├── index # 索引数据<br>        │   │   │   │   ├── _0.cfe<br>        │   │   │   │   ├── _0.cfs<br>        │   │   │   │   ├── _0.si<br>        │   │   │   │   ├── segments_3<br>        │   │   │   │   └── write.lock<br>        │   │   │   └── translog # 每个分片的 事务日志<span class="hljs-punctuation">,</span>保可以安全地将数据索引到Elasticsearch<br>        │   │   │       ├── translog<span class="hljs-number">-4.</span>tlog<br>        │   │   │       └── translog.ckp<br>        │   │   └── _state  #  索引的元数据，它的创建时间戳，它还包含唯一标识符以及索引的设置和映射<br>        │   │       └── state<span class="hljs-number">-5.</span>s<br>        └── node.lock  # 文件用于确保一次只能从一个数据目录读取/写入一个Elasticsearch相关安装信息<br></code></pre></td></tr></table></figure><h3 id="13-ES查询出现数据量倒退问题"><a href="#13-ES查询出现数据量倒退问题" class="headerlink" title="13.ES查询出现数据量倒退问题"></a>13.ES查询出现数据量倒退问题</h3><p>两次查询数据量不一致，因为ES查询为了降低查询压力默认会轮询查询主分片与副本分片，但是主副本之间同步会存在同步时差，所以限制只查询主分片就会避免该问题出现，具体解决方式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /_search?preference=_primary    # preference查询偏好设置<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;elasticsearch&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br># searchRequest.preference(<span class="hljs-string">&quot;_primary&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>_primary: 指查询只在主分片中查询</li><li>_primary_first： 指查询会先在主分片中查询，如果主分片找不到（挂了），就会在副本中查询</li><li>_local:：指查询操作会优先在本地节点有的分片中查询，没有的话再在其它节点查询。</li><li>__only_node：指在指定id的节点里面进行查询，如果该节点只有要查询索引的部分分片，就只在这部分分片中查找，所以查询结果可能不完整。如_only_node:123在节点id为123的节点中查询。</li><li>_prefer_node：nodeid 优先在指定的节点上执行查询</li><li>_shards:0,1,2,3,4：查询指定分片的数据</li><li>Custom (string) value：用户自定义值，指在参数cluster.routing.allocation.awareness.attributes指定的值，如这个值设置为了zone，那么preference&#x3D;zone的话就在awareness.attributes&#x3D;zone*这样的节点搜索，如zone1、zone2</li></ul><h3 id="14-基于拼音和中文进行搜索"><a href="#14-基于拼音和中文进行搜索" class="headerlink" title="14.基于拼音和中文进行搜索"></a>14.基于拼音和中文进行搜索</h3><p>一般情况下，有些搜索需求是需要根据拼音和中文来搜索的，那么在elasticsearch中是如何来实现基于拼音来搜索的，可以通过elasticsearch-analysis-pinyin分析器来实现，那我们的需求：自定义一个分词器，即可以实现拼音搜索，也可以实现中文搜索。<a href="https://blog.csdn.net/weixin_45248492/article/details/127810051?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~AD_ESQUERY~yljh-2-127810051-blog-126437539.pc_relevant_landingrelevant&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~AD_ESQUERY~yljh-2-127810051-blog-126437539.pc_relevant_landingrelevant&utm_relevant_index=3">参考这里</a></p><h4 id="14-1-安装拼音分词器Pinyin-Analysis-for-Elasticsearch"><a href="#14-1-安装拼音分词器Pinyin-Analysis-for-Elasticsearch" class="headerlink" title="14.1.安装拼音分词器Pinyin Analysis for Elasticsearch"></a>14.1.安装拼音分词器<a href="https://github.com/medcl/elasticsearch-analysis-pinyin">Pinyin Analysis for Elasticsearch</a></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入 es 的插件目录</span><br>cd /Users/suaofeng/Downloads/docker/elasticsearch/plugins<br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载</span><br>wget https://github.com/medcl/elasticsearch-analysis-pinyin/releases/tag/v7.10.1# 新建目录<br>mkdir analysis-pinyin<br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压</span><br>mv elasticsearch-analysis-pinyin-7.10.1.zip analysis-pinyin &amp;&amp; cd analysis-pinyin &amp;&amp; unzip elasticsearch-analysis-pinyin-7.10.1.zip &amp;&amp; rm -rvf elasticsearch-analysis-pinyin-7.10.1.zip<br>cd ../ &amp;&amp; chown -R es:es analysis-pinyin<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动es并测试,结果发现实现了拼音分词，但是这个不一定满足我们的需求，</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">比如没有中文了，单个的拼音(比如：wo)是没有什么用的，需要对拼音分词器进行定制化。</span><br>GET _analyze<br>&#123;<br>  &quot;text&quot;: [&quot;我是程序员&quot;]<br>  , &quot;analyzer&quot;: &quot;pinyin&quot;<br>&#125;<br><br>&#123;<br>  &quot;tokens&quot; : [<br>    &#123;<br>      &quot;token&quot; : &quot;wo&quot;,<br>      &quot;start_offset&quot; : 0,<br>      &quot;end_offset&quot; : 0,<br>      &quot;type&quot; : &quot;word&quot;,<br>      &quot;position&quot; : 0<br>    &#125;,<br>    &#123;<br>      &quot;token&quot; : &quot;wscxy&quot;,<br>      &quot;start_offset&quot; : 0,<br>      &quot;end_offset&quot; : 0,<br>      &quot;type&quot; : &quot;word&quot;,<br>      &quot;position&quot; : 0<br>    &#125;,<br>    &#123;<br>      &quot;token&quot; : &quot;shi&quot;,<br>      &quot;start_offset&quot; : 0,<br>      &quot;end_offset&quot; : 0,<br>      &quot;type&quot; : &quot;word&quot;,<br>      &quot;position&quot; : 1<br>    &#125;,<br>    &#123;<br>      &quot;token&quot; : &quot;cheng&quot;,<br>      &quot;start_offset&quot; : 0,<br>      &quot;end_offset&quot; : 0,<br>      &quot;type&quot; : &quot;word&quot;,<br>      &quot;position&quot; : 2<br>    &#125;,<br>    &#123;<br>      &quot;token&quot; : &quot;xu&quot;,<br>      &quot;start_offset&quot; : 0,<br>      &quot;end_offset&quot; : 0,<br>      &quot;type&quot; : &quot;word&quot;,<br>      &quot;position&quot; : 3<br>    &#125;,<br>    &#123;<br>      &quot;token&quot; : &quot;yuan&quot;,<br>      &quot;start_offset&quot; : 0,<br>      &quot;end_offset&quot; : 0,<br>      &quot;type&quot; : &quot;word&quot;,<br>      &quot;position&quot; : 4<br>    &#125;<br>  ]<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="14-2-自定义分词器"><a href="#14-2-自定义分词器" class="headerlink" title="14.2.自定义分词器"></a>14.2.自定义分词器</h4><p>再次分析es分词的三个过程</p><ul><li>character filters： 用于在tokenizer之前对文本进行处理。比如：删除字符，替换字符等。</li><li>tokenizer： 将文本按照一定的规则分成独立的token。即实现分词功能。</li><li>tokenizer filter： 将tokenizer输出的词条做进一步的处理。比如： 同义词处理，大小写转换、移除停用词，拼音处理等。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /test_pinyin<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 分析阶段的设置</span><br>    <span class="hljs-attr">&quot;analysis&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-comment">// 分析器设置</span><br>      <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">// 自定义分析器，在tokenizer阶段使用ik_max_word，在filter上使用py</span><br>        <span class="hljs-attr">&quot;custom_analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;tokenizer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_max_word&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;custom_pinyin&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-comment">// 由于不满足pinyin分词器的默认设置，所以我们基于pinyin</span><br>      <span class="hljs-comment">// 自定义了一个filter，叫custom_pinyin，其中修改了一些设置</span><br>      <span class="hljs-comment">// 这些设置可以在pinyin分词器官网找到</span><br>      <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;custom_pinyin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pinyin&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-comment">// 不会这样分：刘德华 &gt; [liu, de, hua]</span><br>          <span class="hljs-attr">&quot;keep_full_pinyin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-comment">// 这样分：刘德华 &gt; [liudehua]</span><br>          <span class="hljs-attr">&quot;keep_joined_full_pinyin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-comment">// 保留原始token（即中文）</span><br>          <span class="hljs-attr">&quot;keep_original&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-comment">// 设置first_letter结果的最大长度，默认值：16</span><br>          <span class="hljs-attr">&quot;limit_first_letter_length&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">16</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-comment">// 当启用此选项时，将删除重复项以保存索引，例如：de的&gt; de，默认值：false，注意：位置相关查询可能受影响</span><br>          <span class="hljs-attr">&quot;remove_duplicated_term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-comment">// 如果非汉语字母是拼音，则将其拆分为单独的拼音术语，默认值：true，如：liudehuaalibaba13zhuanghan- &gt; liu，de，hua，a，li，ba，ba，13，zhuang，han，注意：keep_none_chinese和keep_none_chinese_together应首先启用</span><br>          <span class="hljs-attr">&quot;none_chinese_pinyin_tokenize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 定义mapping</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 创建倒排索引时使用的分词器</span><br>        <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;custom_analyzer&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 搜索时使用的分词器，搜索时不使用custom_analyzer是为了防止 词语的拼音一样，但是中文含义不一样，导致搜索错误。 比如： 科技 和 客机，拼音一样，但是含义不一样</span><br>        <span class="hljs-attr">&quot;search_analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong><br>可以看到 我们的 name字段 使用的分词器是 custom_analyzer，这个是我们在上一步定义的。但是搜索的时候使用的是 ik_smart，这个为甚么会这样呢？<br>假设我们存在如下2个文本 科技强国和 这是一架客机， 那么科技和客机的拼音是不是就是一样的。 这个时候如果搜索时使用的分词器也是custom_analyzer那么，搜索科技的时候客机也会搜索出来，这样是不对的。因此在搜索的时候中文就以中文搜，拼音就以拼音搜。当 analyzer和search_analyzer的值都是custom_analyzer，搜索时也会通过拼音搜索，这样的结果可能就不是我们想要的。</p><p><strong>关于拼音分词器的一些可选配置：</strong><br>The plugin includes analyzer: pinyin , tokenizer: pinyin and token-filter: pinyin.</p><ul><li>keep_first_letter when this option enabled, eg: 刘德华&gt;ldh, default: true</li><li>keep_separate_first_letter when this option enabled, will keep first letters separately, eg: 刘德华&gt;l,d,h, default: false, NOTE: query result maybe too fuzziness due to term too frequency</li><li>limit_first_letter_length set max length of the first_letter result, default: 16</li><li>keep_full_pinyin when this option enabled, eg: 刘德华&gt; [liu,de,hua], default: true</li><li>keep_joined_full_pinyin when this option enabled, eg: 刘德华&gt; [liudehua], default: false</li><li>keep_none_chinese keep non chinese letter or number in result, default: true</li><li>keep_none_chinese_together keep non chinese letter together, default: true, eg: DJ音乐家 -&gt; DJ,yin,yue,jia, when set to false, eg: DJ音乐家 -&gt; D,J,yin,yue,jia, NOTE: keep_none_chinese should be enabled first</li><li>keep_none_chinese_in_first_letter keep non Chinese letters in first letter, eg: 刘德华AT2016-&gt;ldhat2016, default: true</li><li>keep_none_chinese_in_joined_full_pinyin keep non Chinese letters in joined full pinyin, eg: 刘德华2016-&gt;liudehua2016, default: false</li><li>none_chinese_pinyin_tokenize break non chinese letters into separate pinyin term if they are pinyin, default: true, eg: liudehuaalibaba13zhuanghan -&gt; liu,de,hua,a,li,ba,ba,13,zhuang,han, NOTE: keep_none_chinese and keep_none_chinese_together should be enabled first</li><li>keep_original when this option enabled, will keep original input as well, default: false</li><li>lowercase lowercase non Chinese letters, default: true</li><li>trim_whitespace default: true</li><li>remove_duplicated_term when this option enabled, duplicated term will be removed to save index, eg: de的&gt;de, default: false, NOTE: position related query maybe influenced</li><li>ignore_pinyin_offset after 6.0, offset is strictly constrained, overlapped tokens are not allowed, with this parameter, overlapped token will allowed by ignore offset, please note, all position related query or highlight will become incorrect, you should use multi fields and specify different settings for different query purpose. if you need offset, please set it to false. default: true.</li></ul><h4 id="14-3-插入数据并测试"><a href="#14-3-插入数据并测试" class="headerlink" title="14.3.插入数据并测试"></a>14.3.插入数据并测试</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs json">#插入数据<br>PUT /test_pinyin/_bulk<br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;科技强国&quot;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;这是一架客机&quot;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><br># 中文query<br>GET test_pinyin/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;科技&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br># 拼音query<br>GET test_pinyin/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keji&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="15-数据迁移"><a href="#15-数据迁移" class="headerlink" title="15.数据迁移"></a>15.数据迁移</h3><p><a href="https://github.com/elasticsearch-dump/elasticsearch-dump">elasticsearch-dump</a>备份文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">不一定要a集群到b集群，到文件到s3都行，具体看文档说明</span><br> docker run --network host --rm -ti -v /data:/tmp elasticdump/elasticsearch-dump \<br>  --input=http://elastic:law2022@192.168.0.22:9200/law_event_info@1665926463 \<br>  --output=https://elastic:law2022@lvfa-v.com:8085/law_event_info@1665926463 \<br>  --type=analyzer<br>  <br><span class="hljs-meta prompt_"> # </span><span class="language-bash">开启index</span><br> POST /law_event_info@1665926463/_open<br> <br> docker run --network host --rm -ti -v /data:/tmp elasticdump/elasticsearch-dump \<br>  --input=http://elastic:law2022@192.168.0.22:9200/law_event_info@1665926463 \<br>  --output=https://elastic:law2022@lvfa-v.com:8085/law_event_info@1665926463 \<br>  --type=mapping<br>  <br> docker run --network host --rm -ti -v /data:/tmp elasticdump/elasticsearch-dump \<br>  --input=http://elastic:law2022@192.168.0.22:9200/law_event_info@1665926463 \<br>  --output=https://elastic:law2022@lvfa-v.com:8085/law_event_info@1665926463 \<br>  --type=data<br></code></pre></td></tr></table></figure><h3 id="spring-boot-data-elasticsearch"><a href="#spring-boot-data-elasticsearch" class="headerlink" title="spring boot data elasticsearch"></a>spring boot data elasticsearch</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;br&gt;</span><br><span class="hljs-comment"> * 主题信息   对映主题表</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: su af</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Accessors(chain = true)</span><br><span class="hljs-meta">@Document(indexName = &quot;law_forum_theme&quot;)</span><br><span class="hljs-meta">@Setting(shards = 2, refreshInterval = &quot;10s&quot;)</span><br><span class="hljs-comment">//@Setting(settingPath = &quot;/elasticsearch_config.json&quot;)    自定义分词器与拼音过滤器，实现拼音补全</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThemeEntity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * id 关联数据库id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * tag #话题#</span><br><span class="hljs-comment">     * 想做词云？field data需要设置</span><br><span class="hljs-comment">     * mainField = <span class="hljs-doctag">@Field</span>(type = FieldType.Text, fielddata = true)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@MultiField(</span><br><span class="hljs-meta">            mainField = @Field(type = FieldType.Text, fielddata = true),</span><br><span class="hljs-meta">            otherFields = &#123;</span><br><span class="hljs-meta">                    @InnerField(suffix = &quot;keyword&quot;,type = FieldType.Keyword)</span><br><span class="hljs-meta">            &#125;</span><br><span class="hljs-meta">    )</span><br>    <span class="hljs-keyword">private</span> String title;<br><br><br>    <span class="hljs-meta">@CompletionField(analyzer=&quot;ik_max_word&quot;,searchAnalyzer=&quot;ik_smart&quot;, maxInputLength = 20)</span><br>    <span class="hljs-keyword">private</span> Completion titleSuggest;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 描述</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Field(type = FieldType.Text, analyzer = &quot;ik_max_word&quot;, searchAnalyzer = &quot;ik_smart&quot;)</span><br>    <span class="hljs-keyword">private</span> String description;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 审核状态</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Field(type = FieldType.Integer)</span><br>    <span class="hljs-keyword">private</span> Integer status;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除状态</span><br><span class="hljs-comment">     * 默认值: 0</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Field(type = FieldType.Integer)</span><br>    <span class="hljs-keyword">private</span> Integer isDelete;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 坐标  点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GeoPointField</span><br>    <span class="hljs-keyword">private</span> GeoPoint location;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 经度</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Field(type = FieldType.Double)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> longitude;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 纬度</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Field(type = FieldType.Double)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> latitude;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 坐标 区域</span><br><span class="hljs-comment">     * &quot;type&quot; : &quot;polygon&quot;,</span><br><span class="hljs-comment">     * &quot;coordinates&quot; : [</span><br><span class="hljs-comment">     * [ [10.0, 0.0], [11.0, 0.0], [11.0, 1.0], [10.0, 1.0], [10.0, 0.0] ]</span><br><span class="hljs-comment">     * ]</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GeoShapeField</span><br>    <span class="hljs-keyword">private</span> GeoJson landmark;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * //<span class="hljs-doctag">@LastModifiedDate</span></span><br><span class="hljs-comment">     *     //<span class="hljs-doctag">@Field</span>(type = FieldType.Date, format = DateFormat.date_hour_minute_second,pattern = &quot;yyyy-MM-dd HH:mm:ss:SSS&quot;)</span><br><span class="hljs-comment">     * 创建时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Field(type = FieldType.Date, format = DateFormat.date_hour_minute_second_millis)</span><br>    <span class="hljs-meta">@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;GMT+8&quot;)</span><br>    <span class="hljs-keyword">private</span> LocalDateTime createTime;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ThemeEntityRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ElasticsearchRepository</span>&lt;ThemeEntity, Long&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据描述或者title查询贴吧</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> describe 描述</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> title    title</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> list</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Highlight(fields = &#123;</span><br><span class="hljs-meta">            @HighlightField(name = &quot;content&quot;),</span><br><span class="hljs-meta">            @HighlightField(name = &quot;description&quot;),</span><br><span class="hljs-meta">            @HighlightField(name = &quot;title&quot;),</span><br><span class="hljs-meta">    &#125;, parameters = @HighlightParameters(</span><br><span class="hljs-meta">            preTags = &quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;,</span><br><span class="hljs-meta">            postTags = &quot;&lt;/strong&gt;&quot;</span><br><span class="hljs-meta">    ))</span><br>    List&lt;SearchHit&lt;ThemeEntity&gt;&gt; <span class="hljs-title function_">findThemeEntityByDescriptionOrTitle</span><span class="hljs-params">(String describe, String title)</span>;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 令人费解，如果获取page 则不能获取高亮数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> describe</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> title</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pageable</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Highlight(fields = &#123;</span><br><span class="hljs-meta">            @HighlightField(name = &quot;content&quot;),</span><br><span class="hljs-meta">            @HighlightField(name = &quot;description&quot;),</span><br><span class="hljs-meta">            @HighlightField(name = &quot;title&quot;),</span><br><span class="hljs-meta">    &#125;, parameters = @HighlightParameters(</span><br><span class="hljs-meta">            preTags = &quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;,</span><br><span class="hljs-meta">            postTags = &quot;&lt;/strong&gt;&quot;</span><br><span class="hljs-meta">    ))</span><br>    Page&lt;ThemeEntity&gt; <span class="hljs-title function_">findThemeEntityByDescriptionOrTitle</span><span class="hljs-params">(String describe, String title, Pageable pageable)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * sort query</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> describe       desc</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> title          title</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sort           sort</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>               list</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Highlight(fields = &#123;</span><br><span class="hljs-meta">            @HighlightField(name = &quot;content&quot;),</span><br><span class="hljs-meta">            @HighlightField(name = &quot;description&quot;),</span><br><span class="hljs-meta">            @HighlightField(name = &quot;title&quot;),</span><br><span class="hljs-meta">    &#125;, parameters = @HighlightParameters(</span><br><span class="hljs-meta">            preTags = &quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;,</span><br><span class="hljs-meta">            postTags = &quot;&lt;/strong&gt;&quot;</span><br><span class="hljs-meta">    ))</span><br>    List&lt;ThemeEntity&gt; <span class="hljs-title function_">findThemeEntityByDescriptionOrTitle</span><span class="hljs-params">(String describe, String title, Sort sort)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCompletion</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ThemeInfoEntity</span> <span class="hljs-variable">themeInfoEntity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThemeInfoEntity</span>();<br>    themeInfoEntity.setId(<span class="hljs-number">1L</span>);<br>    themeInfoEntity.setTitle(<span class="hljs-string">&quot;这是一个有意思的标题&quot;</span>);<br>    <span class="hljs-type">Completion</span> <span class="hljs-variable">completion</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Completion</span>(Lists.newArrayList(<span class="hljs-string">&quot;这是一个有意思的标题&quot;</span>));<br>    themeInfoEntity.setTitleSuggest(completion);<br>    themeInfoEntityRepository.save(themeInfoEntity);<br><br>    <span class="hljs-type">SuggestBuilder</span> <span class="hljs-variable">suggestBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuggestBuilder</span>().addSuggestion(<span class="hljs-string">&quot;simple_suggest&quot;</span>,<br>            SuggestBuilders.completionSuggestion(<span class="hljs-string">&quot;titleSuggest&quot;</span>)<br>                    .prefix(<span class="hljs-string">&quot;这是&quot;</span>)<br>                    .analyzer(<span class="hljs-string">&quot;ik_max_word&quot;</span>)<br>                    .size(<span class="hljs-number">3</span>)<br>    );<br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">suggestResp</span> <span class="hljs-operator">=</span> elasticsearchOperations.suggest(suggestBuilder, ThemeInfoEntity.class);<br>    Suggest.Suggestion&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Suggest</span>.Suggestion.Entry&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Suggest</span>.Suggestion.Entry.Option&gt;&gt; completionSuggest = suggestResp.getSuggest().getSuggestion(<span class="hljs-string">&quot;simple_suggest&quot;</span>);<br>    List&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Suggest</span>.Suggestion.Entry&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Suggest</span>.Suggestion.Entry.Option&gt;&gt; entries = completionSuggest.getEntries();<br>    List&lt;Object&gt; collect = entries.stream().map(entry -&gt; &#123;<br>        <span class="hljs-keyword">if</span> (!entry.getOptions().isEmpty()) &#123;<br>            <span class="hljs-type">Text</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> entry.getOptions().get(<span class="hljs-number">0</span>).getText();<br>            <span class="hljs-keyword">return</span> text.string();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;).collect(Collectors.toList());<br>    collect.forEach(System.out::println);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSuggestTerm</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &#123;</span><br><span class="hljs-comment">     *   &quot;errorCorrection&quot; : &#123;</span><br><span class="hljs-comment">     *     &quot;text&quot; : &quot;The suggest feature suggestts&quot;,</span><br><span class="hljs-comment">     *     &quot;term&quot; : &#123;</span><br><span class="hljs-comment">     *       &quot;analyzer&quot; : &quot;ik_max_word&quot;,</span><br><span class="hljs-comment">     *       &quot;field&quot; : &quot;description&quot;,</span><br><span class="hljs-comment">     *       &quot;size&quot; : 3,</span><br><span class="hljs-comment">     *       &quot;suggest_mode&quot; : &quot;MISSING&quot;,</span><br><span class="hljs-comment">     *       &quot;accuracy&quot; : 0.5,</span><br><span class="hljs-comment">     *       &quot;sort&quot; : &quot;SCORE&quot;,</span><br><span class="hljs-comment">     *       &quot;string_distance&quot; : &quot;INTERNAL&quot;,</span><br><span class="hljs-comment">     *       &quot;max_edits&quot; : 2,</span><br><span class="hljs-comment">     *       &quot;max_inspections&quot; : 5,</span><br><span class="hljs-comment">     *       &quot;max_term_freq&quot; : 0.01,</span><br><span class="hljs-comment">     *       &quot;prefix_length&quot; : 1,</span><br><span class="hljs-comment">     *       &quot;min_word_length&quot; : 4,</span><br><span class="hljs-comment">     *       &quot;min_doc_freq&quot; : 0.0</span><br><span class="hljs-comment">     *     &#125;</span><br><span class="hljs-comment">     *   &#125;</span><br><span class="hljs-comment">     * &#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">SuggestBuilder</span> <span class="hljs-variable">suggestBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuggestBuilder</span>().addSuggestion(<span class="hljs-string">&quot;errorCorrection&quot;</span>,<br>            SuggestBuilders.termSuggestion(<span class="hljs-string">&quot;description&quot;</span>)<br>                    .text(<span class="hljs-string">&quot;The suggest feature suggestts&quot;</span>)<br>                    .suggestMode(TermSuggestionBuilder.SuggestMode.MISSING)<br>                    .analyzer(<span class="hljs-string">&quot;ik_max_word&quot;</span>)<br>                    .size(<span class="hljs-number">3</span>).sort(SortBy.SCORE)<br>    );<br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">suggestResp</span> <span class="hljs-operator">=</span> elasticsearchOperations.suggest(suggestBuilder, ThemeEntity.class);<br>    Suggest.Suggestion&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Suggest</span>.Suggestion.Entry&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Suggest</span>.Suggestion.Entry.Option&gt;&gt; errorCorrection = suggestResp.getSuggest().getSuggestion(<span class="hljs-string">&quot;errorCorrection&quot;</span>);<br>    List&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Suggest</span>.Suggestion.Entry&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Suggest</span>.Suggestion.Entry.Option&gt;&gt; entries = errorCorrection.getEntries();<br>    List&lt;Object&gt; collect = entries.stream().map(entry -&gt; &#123;<br>        <span class="hljs-keyword">if</span> (!entry.getOptions().isEmpty()) &#123;<br>            <span class="hljs-type">Text</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> entry.getOptions().get(<span class="hljs-number">0</span>).getText();<br>            <span class="hljs-keyword">return</span> text.string();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;).collect(Collectors.toList());<br>    collect.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">query</span><span class="hljs-params">()</span> &#123;<br>     <span class="hljs-comment">//分页</span><br>     <span class="hljs-type">Pageable</span> <span class="hljs-variable">pageInfo</span> <span class="hljs-operator">=</span> PageRequest.of(<span class="hljs-number">1</span> - <span class="hljs-number">1</span>, <span class="hljs-number">10</span>);<br>     <span class="hljs-comment">//查询条件构建</span><br>     <span class="hljs-type">GeoPoint</span> <span class="hljs-variable">geoPoint</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GeoPoint</span>(<span class="hljs-number">39.927</span>, <span class="hljs-number">116.322</span>);<br>     <span class="hljs-type">NativeSearchQuery</span> <span class="hljs-variable">searchQuery</span> <span class="hljs-operator">=</span> getSearchQuery(geoPoint, pageInfo);<br>     <span class="hljs-comment">//查询并返回结果</span><br>     SearchHits&lt;ThemeEntity&gt; themeEntitySearchHits = elasticsearchOperations.search(searchQuery, ThemeEntity.class);<br><br>     List&lt;Integer&gt; nearbyStoreList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>     themeEntitySearchHits.forEach(hitTheme -&gt; &#123;<br>                 <span class="hljs-type">ThemeEntity</span> <span class="hljs-variable">theme</span> <span class="hljs-operator">=</span> hitTheme.getContent();<br>                 <span class="hljs-type">int</span> <span class="hljs-variable">distance</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                 <span class="hljs-comment">//坐标不为空时计算出距离（单位：km）</span><br>                 <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(geoPoint.getLat() + <span class="hljs-string">&quot;&quot;</span>) &amp;&amp; !StringUtils.isEmpty(geoPoint.getLon() + <span class="hljs-string">&quot;&quot;</span>)) &#123;<br>                     <span class="hljs-comment">//LocationUtils.getDistance,通过经纬度获得实际距离的方法，可百度</span><br>                     distance = (<span class="hljs-type">int</span>) LocationUtils.getDistance(geoPoint, theme.getLocation());<br>                 &#125;<br>                 nearbyStoreList.add(distance);<br>             &#125;<br>     );<br>     nearbyStoreList.forEach(System.out::println);<br> &#125;<br><br> <span class="hljs-meta">@Test</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryShape</span><span class="hljs-params">()</span> &#123;<br>     <span class="hljs-comment">//分页</span><br>     <span class="hljs-type">Pageable</span> <span class="hljs-variable">pageInfo</span> <span class="hljs-operator">=</span> PageRequest.of(<span class="hljs-number">1</span> - <span class="hljs-number">1</span>, <span class="hljs-number">10</span>);<br>     <span class="hljs-comment">//查询条件构建</span><br>     <span class="hljs-type">GeoPoint</span> <span class="hljs-variable">geoPoint1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GeoPoint</span>(<span class="hljs-number">39.927</span>, <span class="hljs-number">116.322</span>);<br>     <span class="hljs-type">GeoPoint</span> <span class="hljs-variable">geoPoint2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GeoPoint</span>(<span class="hljs-number">39.227</span>, <span class="hljs-number">116.722</span>);<br>     <span class="hljs-type">NativeSearchQuery</span> <span class="hljs-variable">searchQuery</span> <span class="hljs-operator">=</span> getSearchQuery(geoPoint1, geoPoint2, pageInfo);<br>     <span class="hljs-comment">//查询并返回结果</span><br>     SearchHits&lt;ThemeEntity&gt; themeEntitySearchHits = elasticsearchOperations.search(searchQuery, ThemeEntity.class);<br><br>     themeEntitySearchHits.forEach(hitTheme -&gt; &#123;<br>                 <span class="hljs-type">ThemeEntity</span> <span class="hljs-variable">theme</span> <span class="hljs-operator">=</span> hitTheme.getContent();<br>                 System.out.println(theme);<br>             &#125;<br>     );<br> &#125;<br><br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@description</span>: 入参条件查询构建</span><br><span class="hljs-comment">  **/</span><br> <span class="hljs-keyword">private</span> NativeSearchQuery <span class="hljs-title function_">getSearchQuery</span><span class="hljs-params">(GeoPoint locationModel, Pageable pageInfo)</span> &#123;<br>     <span class="hljs-type">BoolQueryBuilder</span> <span class="hljs-variable">boolQuery</span> <span class="hljs-operator">=</span> QueryBuilders.boolQuery();<br>     <span class="hljs-comment">//boolQuery.must(boolQuery.must(QueryBuilders.termQuery(&quot;is_delete&quot;, false)));</span><br>     <span class="hljs-comment">//不为空查询经度与纬度</span><br>     boolQuery.must(QueryBuilders.existsQuery(<span class="hljs-string">&quot;latitude&quot;</span>));<br>     boolQuery.must(QueryBuilders.existsQuery(<span class="hljs-string">&quot;longitude&quot;</span>));<br>     <span class="hljs-comment">//构建查询</span><br>     <span class="hljs-type">NativeSearchQueryBuilder</span> <span class="hljs-variable">nativeBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeSearchQueryBuilder</span>();<br>     <span class="hljs-comment">//调用地理位置查询构建方法</span><br>     <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(locationModel.getLat() + <span class="hljs-string">&quot;&quot;</span>) &amp;&amp; !StringUtils.isEmpty(locationModel.getLon() + <span class="hljs-string">&quot;&quot;</span>)) &#123;<br>         getLocation(locationModel, boolQuery, nativeBuilder);<br>     &#125;<br>     <span class="hljs-keyword">if</span> (StringUtils.isEmpty(locationModel.getLat() + <span class="hljs-string">&quot;&quot;</span>) || StringUtils.isEmpty(locationModel.getLon() + <span class="hljs-string">&quot;&quot;</span>)) &#123;<br>         nativeBuilder.withSort(SortBuilders.fieldSort(<span class="hljs-string">&quot;latitude&quot;</span>).order(SortOrder.DESC));<br>     &#125;<br>     <span class="hljs-comment">//构建完成</span><br>     <span class="hljs-keyword">return</span> nativeBuilder<br>             .withQuery(boolQuery)<br>             .withPageable(pageInfo)<br>             .build();<br> &#125;<br><br> <span class="hljs-keyword">private</span> NativeSearchQuery <span class="hljs-title function_">getSearchQuery</span><span class="hljs-params">(GeoPoint locationModel1, GeoPoint locationModel2, Pageable pageInfo)</span> &#123;<br>     <span class="hljs-type">BoolQueryBuilder</span> <span class="hljs-variable">boolQuery</span> <span class="hljs-operator">=</span> QueryBuilders.boolQuery();<br>     <span class="hljs-comment">//storeBool.must(storeBool.must(QueryBuilders.termQuery(&quot;is_delete&quot;, false)));</span><br>     <span class="hljs-comment">//不为空查询经度与纬度</span><br>     boolQuery.must(QueryBuilders.existsQuery(<span class="hljs-string">&quot;latitude&quot;</span>));<br>     boolQuery.must(QueryBuilders.existsQuery(<span class="hljs-string">&quot;longitude&quot;</span>));<br>     <span class="hljs-comment">//构建查询</span><br>     <span class="hljs-type">NativeSearchQueryBuilder</span> <span class="hljs-variable">nativeBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeSearchQueryBuilder</span>();<br>     <span class="hljs-comment">//调用地理位置查询构建方法</span><br>     <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(locationModel1.getLat() + <span class="hljs-string">&quot;&quot;</span>) &amp;&amp; !StringUtils.isEmpty(locationModel2.getLon() + <span class="hljs-string">&quot;&quot;</span>)) &#123;<br>         getShape(locationModel1, locationModel2, boolQuery, nativeBuilder);<br>     &#125;<br>     <span class="hljs-keyword">if</span> (StringUtils.isEmpty(locationModel1.getLat() + <span class="hljs-string">&quot;&quot;</span>) || StringUtils.isEmpty(locationModel1.getLon() + <span class="hljs-string">&quot;&quot;</span>)) &#123;<br>         nativeBuilder.withSort(SortBuilders.fieldSort(<span class="hljs-string">&quot;latitude&quot;</span>).order(SortOrder.DESC));<br>     &#125;<br>     <span class="hljs-comment">//构建完成</span><br>     <span class="hljs-keyword">return</span> nativeBuilder<br>             .withQuery(boolQuery)<br>             .withPageable(pageInfo)<br>             .build();<br> &#125;<br><br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@description</span>: 地理位置查询条件构建</span><br><span class="hljs-comment">  **/</span><br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getLocation</span><span class="hljs-params">(GeoPoint geoPoint, BoolQueryBuilder queryBool, NativeSearchQueryBuilder searchQueryBuilder)</span> &#123;<br>     <span class="hljs-comment">// 以某点为中心，搜索指定范围</span><br>     <span class="hljs-type">GeoDistanceQueryBuilder</span> <span class="hljs-variable">distanceQueryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GeoDistanceQueryBuilder</span>(<span class="hljs-string">&quot;location&quot;</span>);<br>     <span class="hljs-comment">//指定从哪个位置搜索</span><br>     distanceQueryBuilder.point(geoPoint.getLat(), geoPoint.getLon());<br>     <span class="hljs-comment">//指定搜索多少km，distance可为自定义数值</span><br>     distanceQueryBuilder.distance(<span class="hljs-number">10</span>, DistanceUnit.KILOMETERS);<br>     queryBool.filter(distanceQueryBuilder);<br>     <span class="hljs-comment">// 按距离升序排列</span><br>     <span class="hljs-type">GeoDistanceSortBuilder</span> <span class="hljs-variable">distanceSortBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GeoDistanceSortBuilder</span>(<span class="hljs-string">&quot;location&quot;</span>, geoPoint.getLat(), geoPoint.getLon());<br>     distanceSortBuilder.unit(DistanceUnit.KILOMETERS);<br>     distanceSortBuilder.order(SortOrder.ASC);<br>     searchQueryBuilder.withSort(distanceSortBuilder);<br> &#125;<br></code></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>中间件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git使用</title>
    <link href="/2021/03/21/git%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/03/21/git%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Git是一个免费的开源分布式版本控制系统，旨在快速高效地处理从小到大的项目。Git 易于学习，占用空间小，性能快如闪电。它凭借廉价的本地分支、方便的暂存区域和多个工作流程等功能。</p></blockquote><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><p>略</p><h3 id="2-命令"><a href="#2-命令" class="headerlink" title="2.命令"></a>2.命令</h3><p><a href="https://learngitbranching.js.org/?locale=zh_CN">去这里练习！！！</a><br>如果想要熟练掌握工作用的git flow使用，务必熟练掌握<code>merge</code>、<code>rebase(rebase -i)</code>、<code>reset</code>、<code>cherry-pick</code>、<code>checkout(switch)</code>、<code>tag</code>、<code>stash</code>的使用！！！</p><h3 id="3-git-工作流程"><a href="#3-git-工作流程" class="headerlink" title="3.git 工作流程"></a>3.git 工作流程</h3><h4 id="3-1-Git-Flow"><a href="#3-1-Git-Flow" class="headerlink" title="3.1 Git Flow"></a>3.1 Git Flow</h4><ul><li>主干分支</li><li>稳定分支</li><li>开发分支</li><li>补丁分支</li><li>修改分支</li></ul><h4 id="3-2-GitHub-Flow"><a href="#3-2-GitHub-Flow" class="headerlink" title="3.2 GitHub Flow"></a>3.2 GitHub Flow</h4><ul><li>创建分支</li><li>添加提交</li><li>提交 PR 请求</li><li>讨论和评估代码</li><li>部署检测</li><li>合并代码</li></ul><h4 id="3-3-GitLab-Flow"><a href="#3-3-GitLab-Flow" class="headerlink" title="3.3 GitLab Flow"></a>3.3 GitLab Flow</h4><ul><li>带生产分支</li><li>带环境分支</li><li>带发布分支</li></ul><h3 id="4-git-commit规范"><a href="#4-git-commit规范" class="headerlink" title="4.git commit规范"></a>4.git commit规范</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 类型之后的！是可选的，有它意味着是人们需要关注的重点变更</span><br>&lt;类型&gt;[!][可选的作用域]: &lt;描述&gt;<br></code></pre></td></tr></table></figure><h4 id="4-1-所有的-type-类型如下："><a href="#4-1-所有的-type-类型如下：" class="headerlink" title="4.1 所有的 type 类型如下：**"></a>4.1 所有的 type 类型如下：**</h4><p>feat： 新增 feature<br>fix: 修复 bug<br>docs: 仅仅修改了文档，比如 README, CHANGELOG, CONTRIBUTE等等<br>style: 仅仅修改了空格、格式缩进、逗号等等，不改变代码逻辑<br>refactor: 代码重构，没有加新功能或者修复 bug<br>perf: 优化相关，比如提升性能、体验<br>test: 测试用例，包括单元测试、集成测试等<br>chore: 改变构建流程、或者增加依赖库、工具等<br>revert: 回滚到上一个版本</p><h4 id="4-2-Examples"><a href="#4-2-Examples" class="headerlink" title="4.2 Examples"></a>4.2 Examples</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">feat(api)!: add send email<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">chore: modify dockerfile basice image version<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docs(api): update api docs<br></code></pre></td></tr></table></figure><h3 id="5-git-tips"><a href="#5-git-tips" class="headerlink" title="5.git tips"></a>5.git tips</h3><h4 id="5-1-git-log"><a href="#5-1-git-log" class="headerlink" title="5.1 git log"></a>5.1 git log</h4><p>对于码农来说git log是自然熟悉不过的了，但是每天面对git log原始的日志格式，你是不是觉得很烦人啊，因为上面的给的信息太不人性化了，而且我相信大部分的码农的提交日志都是随心所欲的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --graph --pretty=format:<span class="hljs-string">&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27;</span> --abbrev-commit<br></code></pre></td></tr></table></figure><p>不过很显然上面的命令有点长，没关系，我们可以给上面的命令添加一个别名，的日志的时候只需要输入git lg就可以，git lg -p 可查看详细信息。如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global alias.lg <span class="hljs-string">&quot;log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit&quot;</span><br></code></pre></td></tr></table></figure><h4 id="5-2-rebase-i"><a href="#5-2-rebase-i" class="headerlink" title="5.2 rebase -i"></a>5.2 rebase -i</h4><p>日常开发中，我们为了完成一个功能或者特性，提交很多个 commit 记录。但是在最后，提交 PR 之前，一般情况下，我们是应该整理下这些提交记录的。有些 commit 需要合并起来，或者需要将其删除掉，等等。</p><table><thead><tr><th>序号</th><th>选项列表</th><th>对应含义</th></tr></thead><tbody><tr><td>1</td><td>p&#x2F;pick</td><td>使用这个commit记录</td></tr><tr><td>2</td><td>r&#x2F;reword</td><td>使用这个commit记录，并且修改提交信息</td></tr><tr><td>3</td><td>e&#x2F;edit</td><td>使用这个commit记录，rebase时会短暂的允许你修改这个commit</td></tr><tr><td>4</td><td>s&#x2F;squash</td><td>使用这个commit记录，但是会与上一个commit合并</td></tr><tr><td>5</td><td>f&#x2F;fixup</td><td>和squash相同，但是不会保留commit时候提交的信息</td></tr><tr><td>6</td><td>x&#x2F;exec</td><td>执行其它shell命令</td></tr><tr><td>7</td><td>d&#x2F;drop</td><td>移除这个commit记录</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 调整最近五次的提交记录</span><br>$ git rebase -i HEAD~5    <br>$ git rebase -i 5af4zd35  <span class="hljs-comment"># 往前第六次的commit值</span><br>reword c2aeb6e 3rd commit<br>squash 25a3122 4th commit<br>pick 5d36f1d 5th commit<br>fixup bd5d32f 6th commit<br>drop 581e96d 7th commit<br><br><span class="hljs-comment"># 查看提交历史记录</span><br>$ git <span class="hljs-built_in">log</span><br>* ce813eb - (HEAD -&gt; master) 5th commit<br>* aa2f043 - 3rd commit -&gt; modified<br>* 6c5418f - 2nd commit<br>* c8f7dea - 1st commit<br></code></pre></td></tr></table></figure><h4 id="5-3-git-commit-–amend"><a href="#5-3-git-commit-–amend" class="headerlink" title="5.3 git commit –amend"></a>5.3 git commit –amend</h4><p>有时候提交之后，我们才发现提交的历史记录中存在这一些问题，而这个时候我们又不想新生成一个 commit 记录，且达到一个修改的目录。即，修改之前的 commit 提交记录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 不使用分页器</span><br>$ git --no-pager <span class="hljs-built_in">log</span> --oneline -1<br>d5e96d9 (HEAD -&gt; master) say file<br><br><span class="hljs-comment"># 改变提交信息并加入暂存区</span><br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello&quot;</span> &gt; say.txt<br>$ git add -u<br><br><span class="hljs-comment"># 改变当前最新一次提交记录</span><br>$ git commit --amend<br><span class="hljs-comment"># 改变且息不改变提交信</span><br>$ git commit --amend --no-edit<br><span class="hljs-comment"># 改变当前最新一次提交记录并修改信息</span><br>$ git commit --amend -m <span class="hljs-string">&quot;some_info&quot;</span><br><br><span class="hljs-comment"># 不使用分页器</span><br>$ git --no-pager <span class="hljs-built_in">log</span> --oneline -1<br>9e1e0eb (HEAD -&gt; master) say file<br></code></pre></td></tr></table></figure><h4 id="5-4-找回代码"><a href="#5-4-找回代码" class="headerlink" title="5.4 找回代码"></a>5.4 找回代码</h4><p>如何找回我们丢失的内容和记录？</p><p>我们之前说过，使用下面命令回退内容、强制推送代码、删除本地分支，都是非常危险的操作，因为重置之后我们就没有办法在找到之前的修改内容了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 回退</span><br>$ git reset --hard &lt;commit&gt;<br><span class="hljs-comment"># 推送</span><br>$ git push origin master -f<br><span class="hljs-comment"># 分支</span><br>$ git branch -D &lt;branch_name&gt;<br></code></pre></td></tr></table></figure><p>其实 Git 给我们留了一个后门，就是使用 relflog 命令来找回之前的内容，只不过是相对来说麻烦一些。而原理也很简答，就是在我们使用 Git 命令操作仓库的时候，Git 偷偷地帮助我们把所有的操作记录了下来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看日志记录</span><br>$ git --no-pager <span class="hljs-built_in">log</span> --oneline -1<br>4bc8703 (HEAD -&gt; master) hhhh<br><br><span class="hljs-comment"># 回退到上次提交</span><br>$ git reset --hard HEAD~1<br><br><span class="hljs-comment"># 查看引用日志记录</span><br>$ git reflog<br>6a89f1b (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to HEAD~1<br>4bc8703 HEAD@&#123;1&#125;: commit (amend): hhhh<br><br><span class="hljs-comment"># 找回内容</span><br>$ git cherry-pick 4bc8703<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>规范</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日志规范</title>
    <link href="/2021/02/19/%E6%97%A5%E5%BF%97%E8%A7%84%E8%8C%83/"/>
    <url>/2021/02/19/%E6%97%A5%E5%BF%97%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h3 id="1-基本原则"><a href="#1-基本原则" class="headerlink" title="1.基本原则"></a>1.基本原则</h3><ul><li>不影响系统正常运行</li><li>不允许出现安全问题</li><li>日志可供开发人员定位问题的真正原因</li><li>日志可供监控系统自动监控与分析</li></ul><h3 id="2-日志级别"><a href="#2-日志级别" class="headerlink" title="2.日志级别"></a>2.日志级别</h3><ul><li>ERROR：影响系统正常运行，影响业务正常运行，明确需要人工干预。比如：数据库不可用，关键业务流程中断等等</li><li>WARN：发生这个级别问题时，处理过程可以继续，但必须对这个问题给予额外关注。这个问题又可以细分成两种情况：一种是存在严重的问题但有应急措施（比如数据库不可用，使用Cache）；第二种是潜在问题及建议（ATTENTION），比如生产环境的应用运行在Development模式下、管理控制台没有密码保护等。系统可以允许这种错误的存在，但必须及时做跟踪检查</li><li>INFO：重要的业务处理已经结束。在实际环境中，系统管理员或者高级用户要能理解INFO输出的信息并能很快的了解应用正在做什么。比如，一个和处理机票预订的系统，对每一张票要有且只有一条INFO信息描述 “[Who] booked ticket from [Where] to [Where]”。另外一种对INFO信息的定义是：记录显著改变应用状态的每一个action，比如：数据库更新、外部系统请求</li><li>DEBUG：用于开发人员使用。将在TRACE章节中一起说明这个级别该输出什么信息。</li><li>TRACE：非常具体的信息，只能用于开发调试使用。部署到生产环境后，这个级别的信息只能保持很短的时间。这些信息只能临时存在，并将最终被关闭。要区分DEBUG和TRACE会比较困难，对一个在开发及测试完成后将被删除的LOG输出，可能会比较适合定义为TRACE级别。</li></ul><h3 id="3-日志对性能的影响"><a href="#3-日志对性能的影响" class="headerlink" title="3.日志对性能的影响"></a>3.日志对性能的影响</h3><ul><li>如何创建Logger实例：对于可以预见的多数情况下单例运行的class，可以不添加static前缀；对于可能是多例居多，尤其是需要频繁创建的class，我们要求要添加static前缀</li><li>判断日志级别：对于可以预见的会频繁产生的日志输出，比如for、while循环，定期执行的job等，建议先使用if对日志级别进行判断后再输出。对于日志输出内容需要复杂的序列化，或输出的某些信息获取成本较高时，需要对日志级别进行判断。比如日志中需要输出用户名，而用户名需要在日志输出时从数据库获取，此时就需要先判断一下日志级别，看看是否有必要获取这些信息。</li><li>优先使用参数，减少字符串拼接：使用参数的方式输出日志信息，有助于在性能和代码简洁之间取得平衡。当日志级别限制输出该日志时，参数内容将不会融合到最终输出中，减少了字符串的拼接，从而提升执行效率。</li></ul><h3 id="4-什么时候应该打印日志"><a href="#4-什么时候应该打印日志" class="headerlink" title="4.什么时候应该打印日志"></a>4.什么时候应该打印日志</h3><ul><li>系统初始化：系统初始化时会依赖一些关键配置，根据参数不同会提供不一样的服务。将系统的启动参数记录INFO日志，打印出参数以及启动完成态服务表述。</li><li>业务流程与预期不符：项目代码中结果与期望不符时也是日志场景之一，简单来说所有流程分支都可以加入考虑。取决于开发人员判断能否容忍情形发生。常见的合适场景包括外部参数不正确，数据处理问题导致返回码不在合理范围内等等</li><li>系统核心的关键动作：系统中核心角色触发的业务动作是需要多加关注的，是衡量系统正常运行的重要指标，建议记录INFO级别日志，比如电商系统用户从登录到下单的整个流程；微服务各服务节点交互；核心数据表增删改等等。</li><li>系统异常：这类捕获的异常是系统告知开发人员需要加以关注的，是质量非常高的报错。应当适当记录日志，根据实际结合业务的情况使用warn或者error级别。</li></ul><h3 id="5-建议"><a href="#5-建议" class="headerlink" title="5.建议"></a>5.建议</h3><ul><li>使用参数化信息的方式:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">logger.debug(<span class="hljs-string">&quot;Processing trade with id:[&#123;&#125;] and symbol : [&#123;&#125;] &quot;</span>, id, symbol);<br></code></pre></td></tr></table></figure></li><li>使用[]进行参数变量隔离,如有参数变量，应该写成如下写法:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//可读性更好，对于排查问题更有帮助。</span><br>logger.debug(<span class="hljs-string">&quot;Processing trade with id:[&#123;&#125;] and symbol : [&#123;&#125;] &quot;</span>, id, symbol);<br></code></pre></td></tr></table></figure></li><li>禁用System.out.println  不要直接使用System.out或System.err 输出日志，也不允许使用 STDOUT、STDERR 作为Logger名字<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//错误</span><br>System.out.print( <span class="hljs-string">&quot;do something. . .&quot;</span>);<br>System.err.print(<span class="hljs-string">&quot;do something. . .&quot;</span>);<br><span class="hljs-comment">//错误</span><br>STDOUT.info( <span class="hljs-string">&quot;do something. . .&quot;</span>);<br>STDERR.info( <span class="hljs-string">&quot;do something. . . &quot;</span>);<br><span class="hljs-comment">//正确</span><br>logger.info( <span class="hljs-string">&quot;do something. . . &quot;</span>);<br>logger.error( <span class="hljs-string">&quot;do something.. .&quot;</span>);<br></code></pre></td></tr></table></figure></li><li>对于else 是非正常的情况，需要根据情况选择打印warn 或 error 日志。对于只有 if 没有 else 的地方，如果 else 的路径是不可能的，应当加上 else 语句，并打印 error 日志。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>)&#123;<br>   <span class="hljs-comment">//do something </span><br>&#125;<span class="hljs-keyword">else</span> &#123;<br>logger.error(<span class="hljs-string">&quot;It is impossible. . .&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>不打无意义的日志，不记录对于排查故障毫无意义的日志信息，日志信息一定要带有业务信息<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//错误</span><br>logger.error( <span class="hljs-string">&quot;Consume message failed !! ! &quot;</span>);<br><span class="hljs-comment">//正确</span><br>logger.error(<span class="hljs-string">&quot;Consume message failed, msgId=, &quot;</span>, id);<br></code></pre></td></tr></table></figure></li><li>不推荐字符串拼接，如果信息本身需要计算或合并的，打印前要对isxxxEnable()方法进行判断。这是因为在WARN级别时，即使INFO信息不打印，也会执行字符串拼接，造成资源浪费。实际上，不推荐使用字符串拼接的方式打印日志，可读性和可维护性都比较差。建议使用占位符</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//错误</span><br><span class="hljs-keyword">if</span> (logger.isInfoEnabled())&#123;<br>logger.info( <span class="hljs-string">&quot;Push message success,id=&quot;</span> + id + <span class="hljs-string">&quot;,msg=&quot;</span> +msg);<br>&#125;<br><span class="hljs-comment">//错误</span><br>logger.warn(<span class="hljs-string">&quot;Push message failed，id=&quot;</span> + id + <span class="hljs-string">&quot;,msg=&quot;</span> + msg + <span class="hljs-string">&quot; ,reason=&quot;</span>+ response.getReason());<br><span class="hljs-comment">//正确</span><br>logger.warn(<span class="hljs-string">&quot;Push message failed,id=&#123;&#125;,msg=&#123;&#125;，reason=&#123;&#125;&quot;</span>，id，msg，response.getReason()); <br></code></pre></td></tr></table></figure><ul><li>循环体内不要打印info日志<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (Message message : messages) &#123;<br><span class="hljs-keyword">if</span> ( response.isSuccess())&#123;<br><span class="hljs-comment">//错误</span><br>logger.info(<span class="hljs-string">&quot;Message sends successfully,msgId=&#123;&#125;&quot;</span>, message.getId());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>打印日志的代码任何情况下都不允许失败,一定要确保不会因为Log语句的问题而抛出异常造成中断。如下，如果request为null，就会抛空指针异常<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">logger.error( <span class="hljs-string">&quot;execute failed,id:&#123;&#125;&quot;</span>,request.getId());<br></code></pre></td></tr></table></figure></li><li>重要方法入口建议记录方法调用、入参、返回值，对于排查问题会有很大帮助。注解应该可实现,后续调研<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Response <span class="hljs-title function_">consume</span><span class="hljs-params">(Message msg)</span> &#123;<br>logger.debug(<span class="hljs-string">&quot;Prepare to consume a message，msgId=&#123;&#125;, content=&#123;&#125;&quot;</span> , msg.getId(), msg.getContent());<br><span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> messageService.send(msg);<br>logger.debug(<span class="hljs-string">&quot;Consume result:&#123;&#125;,status code:&#123;&#125;&quot;</span>, response.isSuccess(), response.getCode());<br><span class="hljs-keyword">return</span> response;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>异常情况，catch中的异常记录必须打印堆栈信息，不要用e.printStackTrace()<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//do something</span><br>&#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br><span class="hljs-comment">//正确</span><br>logger.error( <span class="hljs-string">&quot;something wrong&quot;</span>, e);<br><span class="hljs-comment">//错误</span><br>e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure></li><li>不要记录日志后又抛出异常。抛出去的异常，一般外层会处理。如果不处理，那为什么还要抛出去？另外一个原则是，无论是否发生异常，都不要在不同地方重复记录针对同一事件的日志消息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">//do something</span><br>&#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>    logger.error( <span class="hljs-string">&quot;something wrong&quot;</span>, e);<br>    <span class="hljs-keyword">throw</span> e;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>输出Exceptions的全部Throwable信息。否则会丢失最重要的堆栈信息。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//do something</span><br>&#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br><span class="hljs-comment">//错误</span><br>logger.error( <span class="hljs-string">&quot;Invoke causes a exception:&#123;&#125;&quot;</span>, e.getMessage());<br>    <span class="hljs-comment">//正确</span><br>logger.error( <span class="hljs-string">&quot;Invoke causes a exception:&#123;&#125;&quot;</span>, e);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>组件间交互接口上,建议增加日志输出，以方便异常情况下的排查</li></ul><h3 id="5-统一logback配置"><a href="#5-统一logback配置" class="headerlink" title="5.统一logback配置"></a>5.统一logback配置</h3><ul><li>logback.xml—-&gt;engine<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">scan</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">scanPeriod</span>=<span class="hljs-string">&quot;10 seconds&quot;</span> <span class="hljs-attr">debug</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 日志最大的历史 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MAX_HISTORY&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;30&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 组件名称 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MODULE_NAME&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;engine&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 日志文件目录 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;DIR&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;logs&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 日志文件大小上限 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MAX_FILE_SIZE&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;100MB&quot;</span>/&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 开启JMX管理日志 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jmxConfigurator</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 输出到控制台 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span></span><br><span class="hljs-tag">                          <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!-- 输出格式 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span><br>                                %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; %X&#123;traceId&#125; - %msg%n<br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- error级别单独记录 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;errorAppender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;DIR&#125;/$&#123;MODULE_NAME&#125;-error.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 以day为单位自动回滚 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;DIR&#125;/$&#123;MODULE_NAME&#125;-error/$&#123;MODULE_NAME&#125;-error-%d&#123;yyyy-MM-dd&#125;.%i.log.gz<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>$&#123;MAX_HISTORY&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                                <span class="hljs-comment">&lt;!-- or whenever the file size reaches 100MB --&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>$&#123;MAX_FILE_SIZE&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;35&#125; %X&#123;traceId&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- error级别过滤器 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>ERROR<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- warn级别单独记录 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;warnAppender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;DIR&#125;/$&#123;MODULE_NAME&#125;-warn.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 以day为单位自动回滚 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;DIR&#125;/$&#123;MODULE_NAME&#125;-warn/$&#123;MODULE_NAME&#125;-warn-%d&#123;yyyy-MM-dd&#125;.%i.log.gz<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>$&#123;MAX_HISTORY&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                                <span class="hljs-comment">&lt;!-- or whenever the file size reaches 100MB --&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>$&#123;MAX_FILE_SIZE&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;35&#125; %X&#123;traceId&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- error级别过滤器 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>WARN<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- debug级别单独记录 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;debugAppender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;DIR&#125;/$&#123;MODULE_NAME&#125;-debug.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 以day为单位自动回滚 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;DIR&#125;/$&#123;MODULE_NAME&#125;-debug/$&#123;MODULE_NAME&#125;-debug-%d&#123;yyyy-MM-dd&#125;.%i.log.gz<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>$&#123;MAX_HISTORY&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                                <span class="hljs-comment">&lt;!-- or whenever the file size reaches 100MB --&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>$&#123;MAX_FILE_SIZE&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;35&#125; %X&#123;traceId&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- error级别过滤器 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>DEBUG<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;infoAppender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;DIR&#125;/$&#123;MODULE_NAME&#125;.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;DIR&#125;/$&#123;MODULE_NAME&#125;/$&#123;MODULE_NAME&#125;-%d&#123;yyyy-MM-dd&#125;.%i.log.gz<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>$&#123;MAX_HISTORY&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                                <span class="hljs-comment">&lt;!-- or whenever the file size reaches 100MB --&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>$&#123;MAX_FILE_SIZE&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;35&#125; %X&#123;traceId&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--&lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;</span><br><span class="hljs-comment">                        &lt;level&gt;INFO&lt;/level&gt;  </span><br><span class="hljs-comment">                        &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;  </span><br><span class="hljs-comment">                        &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</span><br><span class="hljs-comment">                &lt;/filter&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;asyncSTDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 默认情况下，当BlockingQueue还有20%容量，他将丢弃TRACE、DEBUG和INFO级别的event，只保留WARN和ERROR级别的event。为了保持所有的events，设置该值为0。 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">discardingThreshold</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">discardingThreshold</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">queueSize</span>&gt;</span>512<span class="hljs-tag">&lt;/<span class="hljs-name">queueSize</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;asyncErrorAppender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 默认情况下，当BlockingQueue还有20%容量，他将丢弃TRACE、DEBUG和INFO级别的event，只保留WARN和ERROR级别的event。为了保持所有的events，设置该值为0。 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">discardingThreshold</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">discardingThreshold</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">queueSize</span>&gt;</span>512<span class="hljs-tag">&lt;/<span class="hljs-name">queueSize</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;errorAppender&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;asyncWarnAppender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 默认情况下，当BlockingQueue还有20%容量，他将丢弃TRACE、DEBUG和INFO级别的event，只保留WARN和ERROR级别的event。为了保持所有的events，设置该值为0。 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">discardingThreshold</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">discardingThreshold</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">queueSize</span>&gt;</span>512<span class="hljs-tag">&lt;/<span class="hljs-name">queueSize</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;warnAppender&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;asyncInfoAppender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 默认情况下，当BlockingQueue还有20%容量，他将丢弃TRACE、DEBUG和INFO级别的event，只保留WARN和ERROR级别的event。为了保持所有的events，设置该值为0。 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">discardingThreshold</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">discardingThreshold</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">queueSize</span>&gt;</span>512<span class="hljs-tag">&lt;/<span class="hljs-name">queueSize</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;infoAppender&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;asyncDebugAppender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 默认情况下，当BlockingQueue还有20%容量，他将丢弃TRACE、DEBUG和INFO级别的event，只保留WARN和ERROR级别的event。为了保持所有的events，设置该值为0。 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">discardingThreshold</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">discardingThreshold</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">queueSize</span>&gt;</span>512<span class="hljs-tag">&lt;/<span class="hljs-name">queueSize</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;debugAppender&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 事件构建相关 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cn.com.bsfit.engine.core.retem&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 特征加载相关 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cn.com.bsfit.engine.core.load&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 规则执行相关 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cn.com.bsfit.engine.core.exec&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 模型执行相关 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cn.com.bsfit.engine.core.model&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 事件下发相关 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cn.com.bsfit.engine.core.mgr&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- rest接口可以打印接收到的原始报文日志 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cn.com.bsfit.engine.core.web&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 流立方客户端查询相关 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cn.com.bsfit.sc.client.command&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span> /&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 根，所有logger的祖先 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;asyncSTDOUT&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;asyncErrorAppender&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;asyncWarnAppender&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;asyncInfoAppender&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;asyncDebugAppender&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>logback.xml—-&gt;mgr<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 日志最大的历史 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MAX_HISTORY&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;30&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 组件名称 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MODULE_NAME&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mgr&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 日志文件目录 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;DIR&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;logs&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 日志文件大小上限 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MAX_FILE_SIZE&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;100MB&quot;</span>/&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 开启JMX管理日志 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jmxConfigurator</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 输出到控制台 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!-- 输出格式 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span><br>                                %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; %X&#123;traceId&#125; - %msg%n<br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- error级别单独记录 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;errorAppender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;DIR&#125;/$&#123;MODULE_NAME&#125;-error.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 以day为单位自动回滚 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;DIR&#125;/$&#123;MODULE_NAME&#125;-error/$&#123;MODULE_NAME&#125;-error-%d&#123;yyyy-MM-dd&#125;.%i.log.gz<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>$&#123;MAX_HISTORY&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!-- or whenever the file size reaches 100MB --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>$&#123;MAX_FILE_SIZE&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;35&#125; %X&#123;traceId&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- error级别过滤器 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>ERROR<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- warn级别单独记录 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;warnAppender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;DIR&#125;/$&#123;MODULE_NAME&#125;-warn.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 以day为单位自动回滚 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;DIR&#125;/$&#123;MODULE_NAME&#125;-warn/$&#123;MODULE_NAME&#125;-warn-%d&#123;yyyy-MM-dd&#125;.%i.log.gz<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>$&#123;MAX_HISTORY&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!-- or whenever the file size reaches 100MB --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>$&#123;MAX_FILE_SIZE&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;35&#125; %X&#123;traceId&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- error级别过滤器 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>WARN<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;infoAppender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;DIR&#125;/$&#123;MODULE_NAME&#125;.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;DIR&#125;/$&#123;MODULE_NAME&#125;/$&#123;MODULE_NAME&#125;-%d&#123;yyyy-MM-dd&#125;.%i.log.gz<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>$&#123;MAX_HISTORY&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!-- or whenever the file size reaches 100MB --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>$&#123;MAX_FILE_SIZE&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;35&#125; %X&#123;traceId&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--&lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;</span><br><span class="hljs-comment">                        &lt;level&gt;INFO&lt;/level&gt;  </span><br><span class="hljs-comment">                        &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;  </span><br><span class="hljs-comment">                        &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</span><br><span class="hljs-comment">                &lt;/filter&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ASYNCSTDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 默认情况下，当BlockingQueue还有20%容量，他将丢弃TRACE、DEBUG和INFO级别的event，只保留WARN和ERROR级别的event。为了保持所有的events，设置该值为0。 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">discardingThreshold</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">discardingThreshold</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">queueSize</span>&gt;</span>512<span class="hljs-tag">&lt;/<span class="hljs-name">queueSize</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ASYNCerrorAppender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 默认情况下，当BlockingQueue还有20%容量，他将丢弃TRACE、DEBUG和INFO级别的event，只保留WARN和ERROR级别的event。为了保持所有的events，设置该值为0。 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">discardingThreshold</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">discardingThreshold</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">queueSize</span>&gt;</span>512<span class="hljs-tag">&lt;/<span class="hljs-name">queueSize</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;errorAppender&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ASYNCwarnAppender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 默认情况下，当BlockingQueue还有20%容量，他将丢弃TRACE、DEBUG和INFO级别的event，只保留WARN和ERROR级别的event。为了保持所有的events，设置该值为0。 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">discardingThreshold</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">discardingThreshold</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">queueSize</span>&gt;</span>512<span class="hljs-tag">&lt;/<span class="hljs-name">queueSize</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;warnAppender&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ASYNCinfoAppender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 默认情况下，当BlockingQueue还有20%容量，他将丢弃TRACE、DEBUG和INFO级别的event，只保留WARN和ERROR级别的event。为了保持所有的events，设置该值为0。 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">discardingThreshold</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">discardingThreshold</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">queueSize</span>&gt;</span>512<span class="hljs-tag">&lt;/<span class="hljs-name">queueSize</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;infoAppender&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;logger name=&quot;com.netflix&quot; level=&quot;INFO&quot;/&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;logger name=&quot;cn.com.bsfit.frms.engine&quot; level=&quot;INFO&quot;/&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;logger name=&quot;cn.com.bsfit.frms.pay.engine.loader.mob&quot; level=&quot;INFO&quot;/&gt;   --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 根，所有logger的祖先 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ASYNCSTDOUT&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ASYNCerrorAppender&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ASYNCwarnAppender&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ASYNCinfoAppender&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>规范</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单聊聊缓存</title>
    <link href="/2020/09/23/%E7%AE%80%E5%8D%95%E8%81%8A%E8%81%8A%E7%BC%93%E5%AD%98/"/>
    <url>/2020/09/23/%E7%AE%80%E5%8D%95%E8%81%8A%E8%81%8A%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<blockquote><p>有一句老话说的好：计算机科学有两件难事，一是缓存失效，二是取名。既然如此这里就着重记录一下什么是缓存。</p></blockquote><p>你是不是曾经遇到过很多问题，别人给你的解决方案就是清除浏览器缓存或者dns缓存试试能不能解决？我们都听说过这些，但是到底什么是cache？</p><p>通俗来说cache就是将东西存储到离请求者更近的地方，这样可以提高访问速度。生活中的算法这本书给出了简单的解释，现在你想写一篇论文，但是你需要参考很多文献资料，这些文献资料都在图书馆中存储，图书馆都相当于一个大的数据库，其实你可以把它借回家然后放到书桌上，什么时候想要参考的时候从书桌上拿起来就好了，不需要再去图书馆，这样大大减少了获取书的时间。此时这个书桌就相当于缓存，它把你需要的东西放到了离你更近的位置，但是你的书桌大小是有限的，能放的书本也是有限的。所以通过这个例子我们很直观的了解到了缓存是快速的且有限的空间。</p><p>那么我们的电脑是怎么使用缓存的？</p><p>当我们第一次通过浏览器打开bilibili时候，浏览器会缓存网站的图标，缩略图，字体，脚本，然后在之后的访问中这些都不再通过网络请求，通过浏览器直接加载更快更流畅，此时只需要下载们需要的资源。为什么有时候清楚缓存能解决一些问题？因为有时候网站更改了自己的缩略图，但是我们还是通过版本缓存获取的，没有获取最新的内容，所以出现了点问题，显而易见此时我们只需要清除缓存就能够解决这类问题。</p><p>在硬件方面，CPU、GPU、SSD也同样都有缓存，这形成了一个内存层次结构，从顶层开始又嵌入cpu的内存，非常小，但是非常快，往下一直到最后是ssd内存，这个结构就像图书馆的结构一样，会把常借用的书本放入一个小柜子里，方便人们快速借阅，而其它的则分布在书架中，需要根据目录去建索获取，最后一些旧书会放入仓库中。</p><p>再回到书桌上，一直借阅就会出现你的书桌上堆积满了书本，这个时候我们该怎么办？我们应该使用过期缓存策略，将借阅到期的图书还回图书馆，但是这样就有个弊端就是你的知道每一本你借阅的图书时间，这样会很麻烦。还有一种就是随机还回去一本，这样听起来很糟糕，但是显然实现起来更简单。还是就是将借阅的书里边最长时间没用过的还回去，显然这样的话每次只需要还你书桌上一摞书中最底层的那本就行，也是很easy的。</p><p>最后说一句，缓存概念是1965年计算机科学家提出的，至今还在计算机各个组件中使用。</p>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cache</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
